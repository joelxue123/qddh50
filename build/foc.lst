ARM GAS  /tmp/ccIBY9uK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"foc.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN23FieldOrientedController5resetEv,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	_ZN23FieldOrientedController5resetEv
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	_ZN23FieldOrientedController5resetEv:
  28              	.LVL0:
  29              	.LFB3466:
  30              		.file 1 "Src/foc.cpp"
   1:Src/foc.cpp   **** 
   2:Src/foc.cpp   **** #include "interfaces.hpp"
   3:Src/foc.cpp   **** #include "foc.hpp"
   4:Src/foc.cpp   **** #include "low_level.h"
   5:Src/foc.cpp   **** #include "utils.hpp"
   6:Src/foc.cpp   **** #include "main.h"
   7:Src/foc.cpp   **** 
   8:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error AlphaBetaFrameController::on_measurement(
   9:Src/foc.cpp   ****             std::optional<float> vbus_voltage,
  10:Src/foc.cpp   ****             std::optional<std::array<float, 3>> currents,
  11:Src/foc.cpp   ****             uint32_t input_timestamp) {
  12:Src/foc.cpp   **** 
  13:Src/foc.cpp   ****     std::optional<float2D> Ialpha_beta;
  14:Src/foc.cpp   ****     
  15:Src/foc.cpp   ****     if (currents.has_value()) {
  16:Src/foc.cpp   ****         // Clarke transform
  17:Src/foc.cpp   ****         Ialpha_beta = {
  18:Src/foc.cpp   ****             (*currents)[0],
  19:Src/foc.cpp   ****             one_by_sqrt3 * ((*currents)[1] - (*currents)[2])
  20:Src/foc.cpp   ****         };
  21:Src/foc.cpp   ****     }
  22:Src/foc.cpp   ****     
  23:Src/foc.cpp   ****     return on_measurement(vbus_voltage, Ialpha_beta, input_timestamp);
  24:Src/foc.cpp   **** }
  25:Src/foc.cpp   **** 
  26:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error AlphaBetaFrameController::get_output(
  27:Src/foc.cpp   ****             uint32_t output_timestamp, float (&pwm_timings)[3],
  28:Src/foc.cpp   ****             std::optional<float>* ibus) {
ARM GAS  /tmp/ccIBY9uK.s 			page 2


  29:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
  30:Src/foc.cpp   ****     ODriveIntf::MotorIntf::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, 
  31:Src/foc.cpp   ****     
  32:Src/foc.cpp   ****     if (status != ODriveIntf::MotorIntf::ERROR_NONE) {
  33:Src/foc.cpp   ****         return status;
  34:Src/foc.cpp   ****     } else if (!mod_alpha_beta.has_value() || is_nan(mod_alpha_beta->first) || is_nan(mod_alpha_bet
  35:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
  36:Src/foc.cpp   ****     }
  37:Src/foc.cpp   **** 
  38:Src/foc.cpp   ****     float tA, tB, tC;
  39:Src/foc.cpp   ****     if (SVM(mod_alpha_beta->first, mod_alpha_beta->second, &tA, &tB, &tC) != 0)
  40:Src/foc.cpp   ****     {
  41:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_MAGNITUDE;
  42:Src/foc.cpp   ****     }
  43:Src/foc.cpp   ****         
  44:Src/foc.cpp   **** 
  45:Src/foc.cpp   **** 
  46:Src/foc.cpp   ****     pwm_timings[0] = tA;
  47:Src/foc.cpp   ****     pwm_timings[1] = tB;
  48:Src/foc.cpp   ****     pwm_timings[2] = tC;
  49:Src/foc.cpp   **** 
  50:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
  51:Src/foc.cpp   **** }
  52:Src/foc.cpp   **** 
  53:Src/foc.cpp   **** void FieldOrientedController::reset() {
  31              		.loc 1 53 39 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  54:Src/foc.cpp   ****     v_current_control_integral_d_ = 0.0f;
  36              		.loc 1 54 5 view .LVU1
  37              	.LBB1643:
  38              	.LBB1644:
  39              	.LBB1645:
  40              	.LBB1646:
  41              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
ARM GAS  /tmp/ccIBY9uK.s 			page 3


  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
ARM GAS  /tmp/ccIBY9uK.s 			page 4


  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
ARM GAS  /tmp/ccIBY9uK.s 			page 5


 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
ARM GAS  /tmp/ccIBY9uK.s 			page 6


 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
ARM GAS  /tmp/ccIBY9uK.s 			page 7


 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
  42              		.loc 2 279 2 is_stmt 0 view .LVU2
  43 0000 90F87C20 		ldrb	r2, [r0, #124]	@ zero_extendqisi2
  44              	.LBE1646:
  45              	.LBE1645:
  46              	.LBE1644:
  47              	.LBE1643:
  48              		.loc 1 54 35 view .LVU3
  49 0004 0023     		movs	r3, #0
  50 0006 C0F89430 		str	r3, [r0, #148]	@ float
  55:Src/foc.cpp   ****     v_current_control_integral_q_ = 0.0f;
  51              		.loc 1 55 5 is_stmt 1 view .LVU4
  52              		.loc 1 55 35 is_stmt 0 view .LVU5
  53 000a C0F89830 		str	r3, [r0, #152]	@ float
  56:Src/foc.cpp   ****     vbus_voltage_measured_ = std::nullopt;
  54              		.loc 1 56 5 is_stmt 1 view .LVU6
  55              	.LVL1:
  56              	.LBB1652:
  57              	.LBI1643:
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
ARM GAS  /tmp/ccIBY9uK.s 			page 8


 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
ARM GAS  /tmp/ccIBY9uK.s 			page 9


 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
ARM GAS  /tmp/ccIBY9uK.s 			page 10


 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
ARM GAS  /tmp/ccIBY9uK.s 			page 11


 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
ARM GAS  /tmp/ccIBY9uK.s 			page 12


 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
ARM GAS  /tmp/ccIBY9uK.s 			page 13


 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
ARM GAS  /tmp/ccIBY9uK.s 			page 14


 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
ARM GAS  /tmp/ccIBY9uK.s 			page 15


 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
ARM GAS  /tmp/ccIBY9uK.s 			page 16


 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, _Args&&... __args)
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp,
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  initializer_list<_Up>&,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  _Args&&...>> = false>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       optional&
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(nullopt_t) noexcept
  58              		.loc 2 776 7 view .LVU7
  59              	.LBB1651:
  60              	.LBI1644:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
  61              		.loc 2 431 7 view .LVU8
  62              	.LBB1650:
  63              	.LBI1645:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
  64              		.loc 2 277 7 view .LVU9
  65              	.LBB1649:
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
  66              		.loc 2 279 2 is_stmt 0 view .LVU10
  67 000e 12B1     		cbz	r2, .L2
  68              	.LVL2:
  69              	.LBB1647:
  70              	.LBI1647:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
  71              		.loc 2 257 7 is_stmt 1 view .LVU11
  72              	.LBB1648:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
  73              		.loc 2 259 13 is_stmt 0 view .LVU12
  74 0010 0023     		movs	r3, #0
  75 0012 80F87C30 		strb	r3, [r0, #124]
  76              	.LVL3:
ARM GAS  /tmp/ccIBY9uK.s 			page 17


  77              	.L2:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
  78              		.loc 2 259 13 view .LVU13
  79              	.LBE1648:
  80              	.LBE1647:
  81              	.LBE1649:
  82              	.LBE1650:
  83              	.LBE1651:
  84              	.LBE1652:
  57:Src/foc.cpp   ****     Ialpha_beta_measured_ = std::nullopt;
  85              		.loc 1 57 5 is_stmt 1 view .LVU14
  86              	.LBB1653:
  87              	.LBI1653:
  88              		.loc 2 776 7 view .LVU15
  89              	.LBB1654:
  90              	.LBI1654:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
  91              		.loc 2 431 7 view .LVU16
  92              	.LBB1655:
  93              	.LBI1655:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
  94              		.loc 2 277 7 view .LVU17
  95              	.LBB1656:
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
  96              		.loc 2 279 2 is_stmt 0 view .LVU18
  97 0016 90F88830 		ldrb	r3, [r0, #136]	@ zero_extendqisi2
  98 001a 13B1     		cbz	r3, .L3
  99              	.LVL4:
 100              	.LBB1657:
 101              	.LBI1657:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 102              		.loc 2 257 7 is_stmt 1 view .LVU19
 103              	.LBB1658:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 104              		.loc 2 259 13 is_stmt 0 view .LVU20
 105 001c 0023     		movs	r3, #0
 106 001e 80F88830 		strb	r3, [r0, #136]
 107              	.LVL5:
 108              	.L3:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 109              		.loc 2 259 13 view .LVU21
 110              	.LBE1658:
 111              	.LBE1657:
 112              	.LBE1656:
 113              	.LBE1655:
 114              	.LBE1654:
 115              	.LBE1653:
  58:Src/foc.cpp   ****     power_ = 0.0f;
 116              		.loc 1 58 5 is_stmt 1 view .LVU22
 117              		.loc 1 58 12 is_stmt 0 view .LVU23
 118 0022 0023     		movs	r3, #0
 119 0024 C0F8AC30 		str	r3, [r0, #172]	@ float
  59:Src/foc.cpp   **** }
 120              		.loc 1 59 1 view .LVU24
 121 0028 7047     		bx	lr
 122              		.cfi_endproc
 123              	.LFE3466:
ARM GAS  /tmp/ccIBY9uK.s 			page 18


 125 002a 00BF     		.section	.text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm,"ax",%
 126              		.align	1
 127              		.p2align 2,,3
 128              		.global	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 135              	.LVL6:
 136              	.LFB3467:
  60:Src/foc.cpp   **** 
  61:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error FieldOrientedController::on_measurement(
  62:Src/foc.cpp   ****         std::optional<float> vbus_voltage, std::optional<float2D> Ialpha_beta,
  63:Src/foc.cpp   ****         uint32_t input_timestamp) {
 137              		.loc 1 63 35 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 20, pretend = 8, frame = 8
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		.loc 1 63 35 is_stmt 0 view .LVU26
 142 0000 82B0     		sub	sp, sp, #8
 143              	.LCFI0:
 144              		.cfi_def_cfa_offset 8
 145 0002 00B5     		push	{lr}
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 12
 148              		.cfi_offset 14, -12
 149 0004 83B0     		sub	sp, sp, #12
 150              	.LCFI2:
 151              		.cfi_def_cfa_offset 24
 152              		.loc 1 63 35 view .LVU27
 153 0006 EE46     		mov	lr, sp
 154 0008 8EE80600 		stm	lr, {r1, r2}
 155 000c 8446     		mov	ip, r0
  64:Src/foc.cpp   ****     // Store the measurements for later processing.
  65:Src/foc.cpp   ****     i_timestamp_ = input_timestamp;
  66:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 156              		.loc 1 66 28 view .LVU28
 157 000e 9EE80300 		ldm	lr, {r0, r1}
 158              	.LVL7:
  63:Src/foc.cpp   ****     // Store the measurements for later processing.
 159              		.loc 1 63 35 view .LVU29
 160 0012 0899     		ldr	r1, [sp, #32]
  65:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 161              		.loc 1 65 18 view .LVU30
 162 0014 CCF87410 		str	r1, [ip, #116]
 163              		.loc 1 66 28 view .LVU31
 164 0018 0CF17801 		add	r1, ip, #120
 165 001c 81E80500 		stm	r1, {r0, r2}
 166              	.LBB1672:
 167              	.LBB1673:
 168              	.LBB1674:
 169              	.LBB1675:
 170              	.LBB1676:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 171              		.loc 2 167 9 view .LVU32
 172 0020 9CF88820 		ldrb	r2, [ip, #136]	@ zero_extendqisi2
ARM GAS  /tmp/ccIBY9uK.s 			page 19


 173              	.LBE1676:
 174              	.LBE1675:
 175              	.LBE1674:
 176              	.LBE1673:
 177              	.LBE1672:
  63:Src/foc.cpp   ****     // Store the measurements for later processing.
 178              		.loc 1 63 35 view .LVU33
 179 0024 0593     		str	r3, [sp, #20]
 180 0026 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 181              	.LVL8:
  65:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 182              		.loc 1 65 5 is_stmt 1 view .LVU34
 183              		.loc 1 66 5 view .LVU35
  67:Src/foc.cpp   ****     Ialpha_beta_measured_ = Ialpha_beta;
 184              		.loc 1 67 5 view .LVU36
 185              	.LBB1697:
 186              	.LBI1672:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 187              		.loc 2 659 11 view .LVU37
 188              	.LBB1694:
 189              	.LBI1673:
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 190              		.loc 2 628 23 view .LVU38
 191              	.LBB1691:
 192              	.LBI1674:
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 193              		.loc 2 369 7 view .LVU39
 194              	.LBB1688:
 195              	.LBI1675:
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 196              		.loc 2 165 7 view .LVU40
 197              	.LBB1685:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 198              		.loc 2 167 9 is_stmt 0 view .LVU41
 199 002a 62B1     		cbz	r2, .L12
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 200              		.loc 2 167 30 view .LVU42
 201 002c C3B1     		cbz	r3, .L13
 202              	.LVL9:
 203              	.LBB1677:
 204              	.LBI1677:
 205              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_p
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccIBY9uK.s 			page 20


  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccIBY9uK.s 			page 21


  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
ARM GAS  /tmp/ccIBY9uK.s 			page 22


 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
ARM GAS  /tmp/ccIBY9uK.s 			page 23


 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
ARM GAS  /tmp/ccIBY9uK.s 			page 24


 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
ARM GAS  /tmp/ccIBY9uK.s 			page 25


 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
ARM GAS  /tmp/ccIBY9uK.s 			page 26


 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 206              		.loc 3 390 7 is_stmt 1 view .LVU43
 207              	.LBB1678:
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 208              		.loc 3 395 8 is_stmt 0 view .LVU44
 209 002e 059A     		ldr	r2, [sp, #20]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 210              		.loc 3 396 9 view .LVU45
 211 0030 069B     		ldr	r3, [sp, #24]	@ float
 212              	.LVL10:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 213              		.loc 3 395 8 view .LVU46
 214 0032 CCF88020 		str	r2, [ip, #128]	@ float
 215              		.loc 3 396 9 view .LVU47
 216 0036 CCF88430 		str	r3, [ip, #132]	@ float
 217              	.LVL11:
 218              	.L16:
 219              		.loc 3 396 9 view .LVU48
 220              	.LBE1678:
 221              	.LBE1677:
 222              	.LBE1685:
ARM GAS  /tmp/ccIBY9uK.s 			page 27


 223              	.LBE1688:
 224              	.LBE1691:
 225              	.LBE1694:
 226              	.LBE1697:
  68:Src/foc.cpp   **** 
  69:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
  70:Src/foc.cpp   **** }
 227              		.loc 1 70 1 view .LVU49
 228 003a 0020     		movs	r0, #0
 229 003c 03B0     		add	sp, sp, #12
 230              	.LCFI3:
 231              		.cfi_remember_state
 232              		.cfi_def_cfa_offset 12
 233              		@ sp needed
 234 003e 5DF804EB 		ldr	lr, [sp], #4
 235              	.LCFI4:
 236              		.cfi_restore 14
 237              		.cfi_def_cfa_offset 8
 238 0042 02B0     		add	sp, sp, #8
 239              	.LCFI5:
 240              		.cfi_def_cfa_offset 0
 241 0044 7047     		bx	lr
 242              	.LVL12:
 243              	.L12:
 244              	.LCFI6:
 245              		.cfi_restore_state
 246              	.LBB1698:
 247              	.LBB1695:
 248              	.LBB1692:
 249              	.LBB1689:
 250              	.LBB1686:
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 251              		.loc 2 171 6 view .LVU50
 252 0046 002B     		cmp	r3, #0
 253 0048 F7D0     		beq	.L16
 254              	.LVL13:
 255              	.LBB1679:
 256              	.LBI1679:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 257              		.loc 2 248 9 is_stmt 1 view .LVU51
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 258              		.loc 2 248 9 is_stmt 0 view .LVU52
 259              	.LBE1679:
 260              	.LBE1686:
 261              	.LBE1689:
 262              	.LBE1692:
 263              	.LBE1695:
 264              	.LBE1698:
 265              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
ARM GAS  /tmp/ccIBY9uK.s 			page 28


   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
ARM GAS  /tmp/ccIBY9uK.s 			page 29


  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
ARM GAS  /tmp/ccIBY9uK.s 			page 30


 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
 266              		.loc 4 175 3 is_stmt 1 view .LVU53
 267              	.LBB1699:
 268              	.LBB1696:
 269              	.LBB1693:
ARM GAS  /tmp/ccIBY9uK.s 			page 31


 270              	.LBB1690:
 271              	.LBB1687:
 272              	.LBB1681:
 273              	.LBB1680:
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 274              		.loc 2 251 11 is_stmt 0 view .LVU54
 275 004a 05AB     		add	r3, sp, #20
 276 004c 93E80300 		ldm	r3, {r0, r1}
 277 0050 0CF18003 		add	r3, ip, #128
 278              	.LVL14:
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 279              		.loc 2 251 11 view .LVU55
 280 0054 83E80300 		stm	r3, {r0, r1}
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 281              		.loc 2 253 28 view .LVU56
 282 0058 0123     		movs	r3, #1
 283 005a 8CF88830 		strb	r3, [ip, #136]
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284              		.loc 2 254 9 view .LVU57
 285 005e ECE7     		b	.L16
 286              	.LVL15:
 287              	.L13:
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 288              		.loc 2 254 9 view .LVU58
 289              	.LBE1680:
 290              	.LBE1681:
 291              	.LBB1682:
 292              	.LBB1683:
 293              	.LBI1683:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 294              		.loc 2 257 7 is_stmt 1 view .LVU59
 295              	.LBB1684:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 296              		.loc 2 259 13 is_stmt 0 view .LVU60
 297 0060 8CF88830 		strb	r3, [ip, #136]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 298              		.loc 2 261 7 view .LVU61
 299 0064 E9E7     		b	.L16
 300              	.LBE1684:
 301              	.LBE1683:
 302              	.LBE1682:
 303              	.LBE1687:
 304              	.LBE1690:
 305              	.LBE1693:
 306              	.LBE1696:
 307              	.LBE1699:
 308              		.cfi_endproc
 309              	.LFE3467:
 311 0066 00BF     		.section	.text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_I
 312              		.align	1
 313              		.p2align 2,,3
 314              		.global	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
ARM GAS  /tmp/ccIBY9uK.s 			page 32


 321              	.LVL16:
 322              	.LFB3471:
  71:Src/foc.cpp   **** 
  72:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error FieldOrientedController::get_alpha_beta_output(
  73:Src/foc.cpp   ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
  74:Src/foc.cpp   ****         std::optional<float>* ibus) {
 323              		.loc 1 74 37 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		.loc 1 74 37 is_stmt 0 view .LVU63
 328 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 329              	.LCFI7:
 330              		.cfi_def_cfa_offset 24
 331              		.cfi_offset 3, -24
 332              		.cfi_offset 4, -20
 333              		.cfi_offset 5, -16
 334              		.cfi_offset 6, -12
 335              		.cfi_offset 7, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
  75:Src/foc.cpp   **** 
  76:Src/foc.cpp   ****     if (!vbus_voltage_measured_.has_value() || !Ialpha_beta_measured_.has_value()) {
 338              		.loc 1 76 45 view .LVU64
 339 0004 90F87C00 		ldrb	r0, [r0, #124]	@ zero_extendqisi2
 340              	.LVL17:
 341              		.loc 1 76 5 is_stmt 1 view .LVU65
 342              	.LBB1920:
 343              	.LBI1920:
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_reset();
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp>
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(_Up&& __u)
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (this->_M_is_engaged())
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
ARM GAS  /tmp/ccIBY9uK.s 			page 33


 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(const optional<_Up>& __u)
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = *__u;
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(*__u);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(optional<_Up>&& __u)
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = std::move(*__u);
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(std::move(*__u));
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(_Args&&... __args)
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 				       _Args&&...>, _Tp&>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
ARM GAS  /tmp/ccIBY9uK.s 			page 34


 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Swap.
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       swap(optional& __other)
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using std::swap;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (this->_M_is_engaged())
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_destruct();
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (__other._M_is_engaged())
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_destruct();
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Observers.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp*
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->() const
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp*
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->()
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&&
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&&
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr explicit operator bool() const noexcept
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool has_value() const noexcept
 344              		.loc 2 917 22 view .LVU66
ARM GAS  /tmp/ccIBY9uK.s 			page 35


 345              	.LBB1921:
 346              	.LBI1921:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 347              		.loc 2 434 22 view .LVU67
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 348              		.loc 2 434 22 is_stmt 0 view .LVU68
 349              	.LBE1921:
 350              	.LBE1920:
  74:Src/foc.cpp   **** 
 351              		.loc 1 74 37 view .LVU69
 352 0008 2DED0C8B 		vpush.64	{d8, d9, d10, d11, d12, d13}
 353              	.LCFI8:
 354              		.cfi_def_cfa_offset 72
 355              		.cfi_offset 80, -72
 356              		.cfi_offset 81, -68
 357              		.cfi_offset 82, -64
 358              		.cfi_offset 83, -60
 359              		.cfi_offset 84, -56
 360              		.cfi_offset 85, -52
 361              		.cfi_offset 86, -48
 362              		.cfi_offset 87, -44
 363              		.cfi_offset 88, -40
 364              		.cfi_offset 89, -36
 365              		.cfi_offset 90, -32
 366              		.cfi_offset 91, -28
 367              		.loc 1 76 45 view .LVU70
 368 000c 0028     		cmp	r0, #0
 369 000e 00F0B580 		beq	.L31
 370              	.LVL18:
 371              	.LBB1922:
 372              	.LBI1922:
 373              		.loc 2 917 22 is_stmt 1 discriminator 2 view .LVU71
 374              	.LBB1923:
 375              	.LBI1923:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 376              		.loc 2 434 22 discriminator 2 view .LVU72
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 377              		.loc 2 434 22 is_stmt 0 discriminator 2 view .LVU73
 378 0012 1D46     		mov	r5, r3
 379              	.LBE1923:
 380              	.LBE1922:
 381              		.loc 1 76 45 discriminator 2 view .LVU74
 382 0014 94F88830 		ldrb	r3, [r4, #136]	@ zero_extendqisi2
 383              	.LVL19:
 384              		.loc 1 76 45 discriminator 2 view .LVU75
 385 0018 002B     		cmp	r3, #0
 386 001a 00F0AF80 		beq	.L31
 387              	.LBB1924:
 388              	.LBB1925:
  77:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
  78:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_CONTROLLER_INITIALIZING;
  79:Src/foc.cpp   ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 389              		.loc 1 79 43 view .LVU76
 390 001e 636C     		ldr	r3, [r4, #68]
 391 0020 606F     		ldr	r0, [r4, #116]
 392 0022 C01A     		subs	r0, r0, r3
 393 0024 1646     		mov	r6, r2
ARM GAS  /tmp/ccIBY9uK.s 			page 36


 394              	.LVL20:
 395              		.loc 1 79 43 view .LVU77
 396              	.LBE1925:
 397              	.LBI1924:
  72:Src/foc.cpp   ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 398              		.loc 1 72 30 is_stmt 1 view .LVU78
 399              	.LBB1988:
 400              		.loc 1 79 12 view .LVU79
 401              	.LBB1926:
 402              	.LBI1926:
 403              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
ARM GAS  /tmp/ccIBY9uK.s 			page 37


  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
 404              		.loc 5 56 3 view .LVU80
 405              	.LBB1927:
 406              		.loc 5 56 19 view .LVU81
 407              		.loc 5 56 44 is_stmt 0 view .LVU82
 408 0026 80EAE072 		eor	r2, r0, r0, asr #31
 409              	.LVL21:
 410              		.loc 5 56 44 view .LVU83
 411 002a A2EBE072 		sub	r2, r2, r0, asr #31
 412              	.LBE1927:
 413              	.LBE1926:
 414              		.loc 1 79 12 view .LVU84
 415 002e 40F6CD03 		movw	r3, #2253
 416 0032 9A42     		cmp	r2, r3
 417 0034 00F3E980 		bgt	.L32
  80:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
  81:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_BAD_TIMING;
  82:Src/foc.cpp   ****     }
  83:Src/foc.cpp   **** 
  84:Src/foc.cpp   ****     // TODO: improve efficiency in case PWM updates are requested at a higher
  85:Src/foc.cpp   ****     // rate than current sensor updates. In this case we can reuse mod_d and
  86:Src/foc.cpp   ****     // mod_q from a previous iteration.
  87:Src/foc.cpp   **** 
  88:Src/foc.cpp   ****     if (!Vdq_setpoint_.has_value()) {
 418              		.loc 1 88 5 is_stmt 1 view .LVU85
 419              	.LVL22:
 420              	.LBB1928:
 421              	.LBI1928:
 422              		.loc 2 917 22 view .LVU86
 423              	.LBB1929:
 424              	.LBI1929:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 425              		.loc 2 434 22 view .LVU87
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 426              		.loc 2 434 22 is_stmt 0 view .LVU88
 427              	.LBE1929:
 428              	.LBE1928:
 429              		.loc 1 88 5 view .LVU89
 430 0038 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 431 003c 0F46     		mov	r7, r1
 432 003e 4BB1     		cbz	r3, .L20
  89:Src/foc.cpp   ****         //return Motor::ERROR_UNKNOWN_VOLTAGE_COMMAND;
  90:Src/foc.cpp   ****     } else if (!phase_.has_value() || !phase_vel_.has_value()) {
 433              		.loc 1 90 12 is_stmt 1 view .LVU90
 434              	.LVL23:
 435              	.LBB1930:
 436              	.LBI1930:
 437              		.loc 2 917 22 view .LVU91
ARM GAS  /tmp/ccIBY9uK.s 			page 38


 438              	.LBB1931:
 439              	.LBI1931:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 440              		.loc 2 434 22 view .LVU92
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 441              		.loc 2 434 22 is_stmt 0 view .LVU93
 442              	.LBE1931:
 443              	.LBE1930:
 444              		.loc 1 90 36 view .LVU94
 445 0040 94F86830 		ldrb	r3, [r4, #104]	@ zero_extendqisi2
 446 0044 002B     		cmp	r3, #0
 447 0046 00F0E580 		beq	.L34
 448              	.LVL24:
 449              	.LBB1932:
 450              	.LBI1932:
 451              		.loc 2 917 22 is_stmt 1 view .LVU95
 452              	.LBB1933:
 453              	.LBI1933:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 454              		.loc 2 434 22 view .LVU96
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 455              		.loc 2 434 22 is_stmt 0 view .LVU97
 456              	.LBE1933:
 457              	.LBE1932:
 458              		.loc 1 90 36 view .LVU98
 459 004a 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 460 004e 002B     		cmp	r3, #0
 461 0050 00F0E080 		beq	.L34
 462              	.L20:
  91:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_PHASE_ESTIMATE;
  92:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
  93:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_VBUS_VOLTAGE;
  94:Src/foc.cpp   ****     }
  95:Src/foc.cpp   **** 
  96:Src/foc.cpp   ****     auto [Vd, Vq] = *Vdq_setpoint_;
 463              		.loc 1 96 5 is_stmt 1 view .LVU99
 464              	.LBB1934:
  97:Src/foc.cpp   ****     float phase = *phase_;
  98:Src/foc.cpp   ****     float phase_vel = *phase_vel_;
  99:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 100:Src/foc.cpp   **** 
 101:Src/foc.cpp   ****     std::optional<float2D> Idq;
 102:Src/foc.cpp   **** 
 103:Src/foc.cpp   ****     // Park transform
 104:Src/foc.cpp   ****     if (Ialpha_beta_measured_.has_value()) {
 105:Src/foc.cpp   ****         auto [Ialpha, Ibeta] = *Ialpha_beta_measured_;
 106:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 465              		.loc 1 106 46 is_stmt 0 view .LVU100
 466 0054 07EE900A 		vmov	s15, r0	@ int
 467              		.loc 1 106 95 view .LVU101
 468 0058 DFED836A 		vldr.32	s13, .L46
 469              	.LBE1934:
  97:Src/foc.cpp   ****     float phase = *phase_;
 470              		.loc 1 97 20 view .LVU102
 471 005c 94ED19AA 		vldr.32	s20, [r4, #100]
  98:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 472              		.loc 1 98 24 view .LVU103
ARM GAS  /tmp/ccIBY9uK.s 			page 39


 473 0060 D4ED1BCA 		vldr.32	s25, [r4, #108]
 474              	.LBB1938:
 105:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 475              		.loc 1 105 33 view .LVU104
 476 0064 94ED20CA 		vldr.32	s24, [r4, #128]
 477 0068 D4ED21BA 		vldr.32	s23, [r4, #132]
 478              	.LBE1938:
  99:Src/foc.cpp   **** 
 479              		.loc 1 99 27 view .LVU105
 480 006c 94ED1E9A 		vldr.32	s18, [r4, #120]
  96:Src/foc.cpp   ****     float phase = *phase_;
 481              		.loc 1 96 22 view .LVU106
 482 0070 D4ED16AA 		vldr.32	s21, [r4, #88]
 483              	.LVL25:
  96:Src/foc.cpp   ****     float phase = *phase_;
 484              		.loc 1 96 22 view .LVU107
 485 0074 94ED17BA 		vldr.32	s22, [r4, #92]
 486              	.LVL26:
  97:Src/foc.cpp   ****     float phase_vel = *phase_vel_;
 487              		.loc 1 97 5 is_stmt 1 view .LVU108
  98:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 488              		.loc 1 98 5 view .LVU109
  99:Src/foc.cpp   **** 
 489              		.loc 1 99 5 view .LVU110
 101:Src/foc.cpp   **** 
 490              		.loc 1 101 5 view .LVU111
 104:Src/foc.cpp   ****         auto [Ialpha, Ibeta] = *Ialpha_beta_measured_;
 491              		.loc 1 104 5 view .LVU112
 492              	.LBB1939:
 105:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 493              		.loc 1 105 9 view .LVU113
 494              		.loc 1 106 9 view .LVU114
 495              		.loc 1 106 46 is_stmt 0 view .LVU115
 496 0078 F8EEE77A 		vcvt.f32.s32	s15, s15
 497              		.loc 1 106 15 view .LVU116
 498 007c B0EE4A8A 		vmov.f32	s16, s20
 499              		.loc 1 106 95 view .LVU117
 500 0080 87EEA67A 		vdiv.f32	s14, s15, s13
 501              		.loc 1 106 15 view .LVU118
 502 0084 ACEE878A 		vfma.f32	s16, s25, s14
 503              	.LVL27:
 107:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 504              		.loc 1 107 9 is_stmt 1 view .LVU119
 505              		.loc 1 107 36 is_stmt 0 view .LVU120
 506 0088 B0EE480A 		vmov.f32	s0, s16
 507 008c FFF7FEFF 		bl	our_arm_cos_f32
 508              	.LVL28:
 509              		.loc 1 107 36 view .LVU121
 510 0090 F0EE408A 		vmov.f32	s17, s0
 108:Src/foc.cpp   ****         float s_I = our_arm_sin_f32(I_phase);
 511              		.loc 1 108 36 view .LVU122
 512 0094 B0EE480A 		vmov.f32	s0, s16
 513              	.LVL29:
 514              		.loc 1 108 9 is_stmt 1 view .LVU123
 515              		.loc 1 108 36 is_stmt 0 view .LVU124
 516 0098 FFF7FEFF 		bl	our_arm_sin_f32
 517              	.LVL30:
ARM GAS  /tmp/ccIBY9uK.s 			page 40


 109:Src/foc.cpp   ****         Idq = {
 110:Src/foc.cpp   ****             c_I * Ialpha + s_I * Ibeta,
 518              		.loc 1 110 32 view .LVU125
 519 009c 6BEE809A 		vmul.f32	s19, s23, s0
 111:Src/foc.cpp   ****             c_I * Ibeta - s_I * Ialpha
 520              		.loc 1 111 25 view .LVU126
 521 00a0 20EE4C8A 		vnmul.f32	s16, s0, s24
 522              	.LVL31:
 110:Src/foc.cpp   ****             c_I * Ibeta - s_I * Ialpha
 523              		.loc 1 110 26 view .LVU127
 524 00a4 ECEE289A 		vfma.f32	s19, s24, s17
 525              	.LBE1939:
 526              	.LBB1940:
 112:Src/foc.cpp   ****         };
 113:Src/foc.cpp   ****         Id_measured_ += I_measured_report_filter_k_ * (Idq->first - Id_measured_);
 114:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 115:Src/foc.cpp   ****     } else {
 116:Src/foc.cpp   ****         Id_measured_ = 0.0f;
 117:Src/foc.cpp   ****         Iq_measured_ = 0.0f;
 118:Src/foc.cpp   ****     }
 119:Src/foc.cpp   **** 
 120:Src/foc.cpp   **** 
 121:Src/foc.cpp   ****     float mod_to_V = (2.0f / 3.0f) * vbus_voltage;
 122:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 123:Src/foc.cpp   ****     float mod_d;
 124:Src/foc.cpp   ****     float mod_q;
 125:Src/foc.cpp   **** 
 126:Src/foc.cpp   ****     if (enable_current_control_) {
 527              		.loc 1 126 5 view .LVU128
 528 00a8 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 529              	.LBE1940:
 530              	.LBB1953:
 111:Src/foc.cpp   ****         };
 531              		.loc 1 111 25 view .LVU129
 532 00ac ABEEA88A 		vfma.f32	s16, s23, s17
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 533              		.loc 1 113 69 view .LVU130
 534 00b0 D4ED236A 		vldr.32	s13, [r4, #140]
 535              	.LVL32:
 109:Src/foc.cpp   ****             c_I * Ialpha + s_I * Ibeta,
 536              		.loc 1 109 9 is_stmt 1 view .LVU131
 537              	.LBB1935:
 538              	.LBI1935:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 539              		.loc 3 352 12 view .LVU132
 540              	.LBB1936:
 541              	.LBI1936:
 542              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
ARM GAS  /tmp/ccIBY9uK.s 			page 41


  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
ARM GAS  /tmp/ccIBY9uK.s 			page 42


  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 543              		.loc 6 76 5 view .LVU133
 544              		.loc 6 76 5 is_stmt 0 view .LVU134
 545              	.LBE1936:
 546              	.LBB1937:
 547              	.LBI1937:
 548              		.loc 6 76 5 is_stmt 1 view .LVU135
 549              		.loc 6 76 5 is_stmt 0 view .LVU136
 550              	.LBE1937:
 551              	.LBE1935:
 552              	.LBE1953:
 553              	.LBE1988:
 554              	.LBE1924:
 555              		.loc 4 175 3 is_stmt 1 view .LVU137
 556              	.LBB1995:
 557              	.LBB1989:
 558              	.LBB1954:
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 559              		.loc 1 113 9 view .LVU138
 114:Src/foc.cpp   ****     } else {
 560              		.loc 1 114 70 is_stmt 0 view .LVU139
 561 00b4 94ED247A 		vldr.32	s14, [r4, #144]
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 562              		.loc 1 113 25 view .LVU140
 563 00b8 D4ED057A 		vldr.32	s15, [r4, #20]
 564              	.LBE1954:
 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 565              		.loc 1 121 11 view .LVU141
 566 00bc DFED6B8A 		vldr.32	s17, .L46+4
 567              	.LVL33:
 568              	.LBB1955:
 114:Src/foc.cpp   ****     } else {
 569              		.loc 1 114 68 view .LVU142
 570 00c0 38EE476A 		vsub.f32	s12, s16, s14
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 571              		.loc 1 113 67 view .LVU143
 572 00c4 79EEE65A 		vsub.f32	s11, s19, s13
 114:Src/foc.cpp   ****     } else {
 573              		.loc 1 114 22 view .LVU144
 574 00c8 A7EE867A 		vfma.f32	s14, s15, s12
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 575              		.loc 1 113 22 view .LVU145
 576 00cc E7EEA56A 		vfma.f32	s13, s15, s11
 577              	.LBE1955:
 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 578              		.loc 1 121 11 view .LVU146
 579 00d0 69EE288A 		vmul.f32	s17, s18, s17
 122:Src/foc.cpp   ****     float mod_d;
ARM GAS  /tmp/ccIBY9uK.s 			page 43


 580              		.loc 1 122 11 view .LVU147
 581 00d4 B7EE006A 		vmov.f32	s12, #1.0e+0
 582 00d8 C6EE287A 		vdiv.f32	s15, s12, s17
 583              	.LBB1956:
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 584              		.loc 1 113 22 view .LVU148
 585 00dc C4ED236A 		vstr.32	s13, [r4, #140]
 114:Src/foc.cpp   ****     } else {
 586              		.loc 1 114 9 is_stmt 1 view .LVU149
 114:Src/foc.cpp   ****     } else {
 587              		.loc 1 114 22 is_stmt 0 view .LVU150
 588 00e0 84ED247A 		vstr.32	s14, [r4, #144]
 589              	.LVL34:
 114:Src/foc.cpp   ****     } else {
 590              		.loc 1 114 22 view .LVU151
 591              	.LBE1956:
 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 592              		.loc 1 121 5 is_stmt 1 view .LVU152
 122:Src/foc.cpp   ****     float mod_d;
 593              		.loc 1 122 5 view .LVU153
 123:Src/foc.cpp   ****     float mod_q;
 594              		.loc 1 123 5 view .LVU154
 124:Src/foc.cpp   **** 
 595              		.loc 1 124 5 view .LVU155
 596              		.loc 1 126 5 view .LVU156
 597              	.LBB1957:
 598 00e4 002B     		cmp	r3, #0
 599 00e6 4ED0     		beq	.L21
 600              	.LBB1941:
 127:Src/foc.cpp   ****         // Current control mode
 128:Src/foc.cpp   **** 
 129:Src/foc.cpp   ****         if (!pi_gains_.has_value()) {
 601              		.loc 1 129 9 view .LVU157
 602              	.LVL35:
 603              	.LBB1942:
 604              	.LBI1942:
 605              		.loc 2 917 22 view .LVU158
 606              	.LBB1943:
 607              	.LBI1943:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 608              		.loc 2 434 22 view .LVU159
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 609              		.loc 2 434 22 is_stmt 0 view .LVU160
 610              	.LBE1943:
 611              	.LBE1942:
 612              		.loc 1 129 9 view .LVU161
 613 00e8 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 614 00ea 002B     		cmp	r3, #0
 615 00ec 00F0A180 		beq	.L35
 130:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_GAINS;
 131:Src/foc.cpp   ****         } else if (!Idq.has_value()) {
 616              		.loc 1 131 16 is_stmt 1 view .LVU162
 132:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_MEASUREMENT;
 133:Src/foc.cpp   ****         } else if (!Idq_setpoint_.has_value()) {
 617              		.loc 1 133 16 view .LVU163
 618              	.LVL36:
 619              	.LBB1944:
ARM GAS  /tmp/ccIBY9uK.s 			page 44


 620              	.LBI1944:
 621              		.loc 2 917 22 view .LVU164
 622              	.LBB1945:
 623              	.LBI1945:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 624              		.loc 2 434 22 view .LVU165
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 625              		.loc 2 434 22 is_stmt 0 view .LVU166
 626              	.LBE1945:
 627              	.LBE1944:
 628              		.loc 1 133 16 view .LVU167
 629 00f0 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 630 00f4 002B     		cmp	r3, #0
 631 00f6 00F09980 		beq	.L36
 134:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_COMMAND;
 135:Src/foc.cpp   ****         }
 136:Src/foc.cpp   **** 
 137:Src/foc.cpp   ****         auto [p_gain, i_gain] = *pi_gains_;
 632              		.loc 1 137 9 is_stmt 1 view .LVU168
 138:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 139:Src/foc.cpp   ****         auto [Id_setpoint, Iq_setpoint] = *Idq_setpoint_;
 140:Src/foc.cpp   **** 
 141:Src/foc.cpp   ****         float Ierr_d = Id_setpoint - Id;
 142:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 633              		.loc 1 142 15 is_stmt 0 view .LVU169
 634 00fa D4ED14BA 		vldr.32	s23, [r4, #80]
 143:Src/foc.cpp   **** 
 144:Src/foc.cpp   ****         // Apply PI control (V{d,q}_setpoint act as feed-forward terms in this mode)
 145:Src/foc.cpp   ****         mod_d = V_to_mod * (Vd + v_current_control_integral_d_ + Ierr_d * p_gain);
 146:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 635              		.loc 1 146 34 view .LVU170
 636 00fe D4ED266A 		vldr.32	s13, [r4, #152]
 137:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 637              		.loc 1 137 34 view .LVU171
 638 0102 94ED026A 		vldr.32	s12, [r4, #8]
 639              	.LVL37:
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 640              		.loc 1 141 15 view .LVU172
 641 0106 94ED13CA 		vldr.32	s24, [r4, #76]
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 642              		.loc 1 145 34 view .LVU173
 643 010a 94ED257A 		vldr.32	s14, [r4, #148]
 137:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 644              		.loc 1 137 34 view .LVU174
 645 010e 94ED03DA 		vldr.32	s26, [r4, #12]
 646              	.LVL38:
 138:Src/foc.cpp   ****         auto [Id_setpoint, Iq_setpoint] = *Idq_setpoint_;
 647              		.loc 1 138 9 is_stmt 1 view .LVU175
 139:Src/foc.cpp   **** 
 648              		.loc 1 139 9 view .LVU176
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 649              		.loc 1 141 9 view .LVU177
 142:Src/foc.cpp   **** 
 650              		.loc 1 142 15 is_stmt 0 view .LVU178
 651 0112 7BEEC8BA 		vsub.f32	s23, s23, s16
 652              	.LVL39:
 653              		.loc 1 146 32 view .LVU179
ARM GAS  /tmp/ccIBY9uK.s 			page 45


 654 0116 3BEE26BA 		vadd.f32	s22, s22, s13
 655              	.LVL40:
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 656              		.loc 1 141 15 view .LVU180
 657 011a 3CEE69CA 		vsub.f32	s24, s24, s19
 658              	.LVL41:
 142:Src/foc.cpp   **** 
 659              		.loc 1 142 9 is_stmt 1 view .LVU181
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 660              		.loc 1 145 9 view .LVU182
 661              		.loc 1 146 64 is_stmt 0 view .LVU183
 662 011e A6EE2BBA 		vfma.f32	s22, s12, s23
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 663              		.loc 1 145 32 view .LVU184
 664 0122 7AEE87AA 		vadd.f32	s21, s21, s14
 665              	.LVL42:
 666              		.loc 1 146 15 view .LVU185
 667 0126 27EE8BBA 		vmul.f32	s22, s15, s22
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 668              		.loc 1 145 64 view .LVU186
 669 012a E6EE0CAA 		vfma.f32	s21, s12, s24
 147:Src/foc.cpp   **** 
 148:Src/foc.cpp   ****         // Vector modulation saturation, lock integrator if saturated
 149:Src/foc.cpp   ****         // TODO make maximum modulation configurable
 150:Src/foc.cpp   ****         float mod_scalefactor = 0.80f * sqrt3_by_2 * 1.0f / std::sqrt(mod_d * mod_d + mod_q * mod_q
 670              		.loc 1 150 93 view .LVU187
 671 012e 2BEE0B0A 		vmul.f32	s0, s22, s22
 672              	.LVL43:
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 673              		.loc 1 145 15 view .LVU188
 674 0132 67EEAAAA 		vmul.f32	s21, s15, s21
 675              	.LVL44:
 146:Src/foc.cpp   **** 
 676              		.loc 1 146 9 is_stmt 1 view .LVU189
 677              		.loc 1 150 9 view .LVU190
 678              		.loc 1 150 70 is_stmt 0 view .LVU191
 679 0136 AAEEAA0A 		vfma.f32	s0, s21, s21
 680              	.LVL45:
 681              	.LBB1946:
 682              	.LBI1946:
 683              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  /tmp/ccIBY9uK.s 			page 46


  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
ARM GAS  /tmp/ccIBY9uK.s 			page 47


  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
ARM GAS  /tmp/ccIBY9uK.s 			page 48


 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
ARM GAS  /tmp/ccIBY9uK.s 			page 49


 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
ARM GAS  /tmp/ccIBY9uK.s 			page 50


 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(long double __x)
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorl(__x); }
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     floor(_Tp __x)
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_floor(__x); }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fmod;
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(float __x, float __y)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(long double __x, long double __y)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::frexp;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(float __x, int* __exp)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
ARM GAS  /tmp/ccIBY9uK.s 			page 51


 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(long double __x, int* __exp)
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ldexp;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(float __x, int __exp)
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(long double __x, int __exp)
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(float __x)
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logf(__x); }
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(long double __x)
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logl(__x); }
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log(_Tp __x)
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log(__x); }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log10;
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(float __x)
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10f(__x); }
ARM GAS  /tmp/ccIBY9uK.s 			page 52


 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(long double __x)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10l(__x); }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log10(_Tp __x)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log10(__x); }
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::modf;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(float __x, float* __iptr)
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::pow;
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, float __y)
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, long double __y)
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #if __cplusplus < 201103L
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline double
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(double __x, int __i)
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, int __n)
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, int __n)
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     pow(_Tp __x, _Up __y)
ARM GAS  /tmp/ccIBY9uK.s 			page 53


 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sin;
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(float __x)
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinf(__x); }
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(long double __x)
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinl(__x); }
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sin(_Tp __x)
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sin(__x); }
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sinh;
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(float __x)
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(long double __x)
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sinh(_Tp __x)
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sinh(__x); }
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sqrt;
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sqrt(float __x)
 684              		.loc 7 463 3 is_stmt 1 view .LVU192
 685              	.LBB1947:
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sqrtf(__x); }
 686              		.loc 7 464 5 view .LVU193
 687 013a B5EE400A 		vcmp.f32	s0, #0
 688 013e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 689 0142 00F18880 		bmi	.L42
 690              		.loc 7 464 27 is_stmt 0 view .LVU194
 691 0146 B1EEC06A 		vsqrt.f32	s12, s0
ARM GAS  /tmp/ccIBY9uK.s 			page 54


 692              	.LVL46:
 693              	.L24:
 694              		.loc 7 464 27 view .LVU195
 695              	.LBE1947:
 696              	.LBE1946:
 697              		.loc 1 150 100 view .LVU196
 698 014a 9FED495A 		vldr.32	s10, .L46+8
 699 014e C5EE067A 		vdiv.f32	s15, s10, s12
 700              	.LVL47:
 151:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 701              		.loc 1 151 9 is_stmt 1 view .LVU197
 702 0152 F7EE005A 		vmov.f32	s11, #1.0e+0
 703              	.LVL48:
 704              		.loc 1 151 9 is_stmt 0 view .LVU198
 705 0156 F4EEE57A 		vcmpe.f32	s15, s11
 706 015a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 707 015e 6BD4     		bmi	.L45
 152:Src/foc.cpp   ****             mod_d *= mod_scalefactor;
 153:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 154:Src/foc.cpp   ****             // TODO make decayfactor configurable
 155:Src/foc.cpp   ****             v_current_control_integral_d_ *= 0.99f;
 156:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 157:Src/foc.cpp   ****         } else {
 158:Src/foc.cpp   ****             v_current_control_integral_d_ += Ierr_d * (i_gain * current_meas_period);
 708              		.loc 1 158 13 is_stmt 1 view .LVU199
 709              		.loc 1 158 63 is_stmt 0 view .LVU200
 710 0160 444B     		ldr	r3, .L46+12
 711 0162 D3ED007A 		vldr.32	s15, [r3]
 712              	.LVL49:
 713              		.loc 1 158 63 view .LVU201
 714 0166 6DEE277A 		vmul.f32	s15, s26, s15
 715              		.loc 1 158 43 view .LVU202
 716 016a ACEE277A 		vfma.f32	s14, s24, s15
 159:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 717              		.loc 1 159 43 view .LVU203
 718 016e EBEEA76A 		vfma.f32	s13, s23, s15
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 719              		.loc 1 158 43 view .LVU204
 720 0172 84ED257A 		vstr.32	s14, [r4, #148]
 721              		.loc 1 159 13 is_stmt 1 view .LVU205
 722              		.loc 1 159 43 is_stmt 0 view .LVU206
 723 0176 C4ED266A 		vstr.32	s13, [r4, #152]
 724 017a 08E0     		b	.L27
 725              	.LVL50:
 726              	.L31:
 727              		.loc 1 159 43 view .LVU207
 728              	.LBE1941:
 729              	.LBE1957:
 730              	.LBE1989:
 731              	.LBE1995:
  78:Src/foc.cpp   ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 732              		.loc 1 78 46 view .LVU208
 733 017c 4FF08060 		mov	r0, #67108864
 734              	.LVL51:
 735              	.L18:
 160:Src/foc.cpp   ****         }
 161:Src/foc.cpp   **** 
ARM GAS  /tmp/ccIBY9uK.s 			page 55


 162:Src/foc.cpp   ****     } else {
 163:Src/foc.cpp   ****         // Voltage control mode
 164:Src/foc.cpp   ****         mod_d = V_to_mod * Vd;
 165:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 166:Src/foc.cpp   ****     }
 167:Src/foc.cpp   **** 
 168:Src/foc.cpp   ****     // Inverse park transform
 169:Src/foc.cpp   ****     float pwm_phase = phase + phase_vel * ((float)(int32_t)(output_timestamp - ctrl_timestamp_) / (
 170:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 171:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 172:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 173:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 174:Src/foc.cpp   **** 
 175:Src/foc.cpp   ****     // Report final applied voltage in stationary frame (for sensorless estimator)
 176:Src/foc.cpp   ****     final_v_alpha_ = mod_to_V * mod_alpha;
 177:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 178:Src/foc.cpp   **** 
 179:Src/foc.cpp   ****     *mod_alpha_beta = {mod_alpha, mod_beta};
 180:Src/foc.cpp   **** 
 181:Src/foc.cpp   ****     if (Idq.has_value()) {
 182:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 183:Src/foc.cpp   ****         *ibus = mod_d * Id + mod_q * Iq;
 184:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 185:Src/foc.cpp   ****     }
 186:Src/foc.cpp   ****     
 187:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
 188:Src/foc.cpp   **** }
 736              		.loc 1 188 1 view .LVU209
 737 0180 BDEC0C8B 		vldm	sp!, {d8-d13}
 738              	.LCFI9:
 739              		.cfi_remember_state
 740              		.cfi_restore 90
 741              		.cfi_restore 91
 742              		.cfi_restore 88
 743              		.cfi_restore 89
 744              		.cfi_restore 86
 745              		.cfi_restore 87
 746              		.cfi_restore 84
 747              		.cfi_restore 85
 748              		.cfi_restore 82
 749              		.cfi_restore 83
 750              		.cfi_restore 80
 751              		.cfi_restore 81
 752              		.cfi_def_cfa_offset 24
 753 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 754              	.LVL52:
 755              	.L21:
 756              	.LCFI10:
 757              		.cfi_restore_state
 758              	.LBB1996:
 759              	.LBB1990:
 760              	.LBB1958:
 164:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 761              		.loc 1 164 9 is_stmt 1 view .LVU210
 164:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 762              		.loc 1 164 15 is_stmt 0 view .LVU211
 763 0186 6AEEA7AA 		vmul.f32	s21, s21, s15
ARM GAS  /tmp/ccIBY9uK.s 			page 56


 764              	.LVL53:
 165:Src/foc.cpp   ****     }
 765              		.loc 1 165 9 is_stmt 1 view .LVU212
 165:Src/foc.cpp   ****     }
 766              		.loc 1 165 15 is_stmt 0 view .LVU213
 767 018a 2BEE27BA 		vmul.f32	s22, s22, s15
 768              	.LVL54:
 769              	.L27:
 165:Src/foc.cpp   ****     }
 770              		.loc 1 165 15 view .LVU214
 771              	.LBE1958:
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 772              		.loc 1 169 5 is_stmt 1 view .LVU215
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 773              		.loc 1 169 78 is_stmt 0 view .LVU216
 774 018e 616C     		ldr	r1, [r4, #68]
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 775              		.loc 1 169 97 view .LVU217
 776 0190 DFED356A 		vldr.32	s13, .L46
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 777              		.loc 1 169 78 view .LVU218
 778 0194 7B1A     		subs	r3, r7, r1
 779 0196 07EE103A 		vmov	s14, r3	@ int
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 780              		.loc 1 169 44 view .LVU219
 781 019a B8EEC77A 		vcvt.f32.s32	s14, s14
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 782              		.loc 1 169 97 view .LVU220
 783 019e C7EE267A 		vdiv.f32	s15, s14, s13
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 784              		.loc 1 169 11 view .LVU221
 785 01a2 ACEEA7AA 		vfma.f32	s20, s25, s15
 786              	.LVL55:
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 787              		.loc 1 170 5 is_stmt 1 view .LVU222
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 788              		.loc 1 170 32 is_stmt 0 view .LVU223
 789 01a6 B0EE4A0A 		vmov.f32	s0, s20
 790 01aa FFF7FEFF 		bl	our_arm_cos_f32
 791              	.LVL56:
 792 01ae F0EE407A 		vmov.f32	s15, s0
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 793              		.loc 1 171 32 view .LVU224
 794 01b2 B0EE4A0A 		vmov.f32	s0, s20
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 795              		.loc 1 170 32 view .LVU225
 796 01b6 B0EE67AA 		vmov.f32	s20, s15
 797              	.LVL57:
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 798              		.loc 1 171 5 is_stmt 1 view .LVU226
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 799              		.loc 1 171 32 is_stmt 0 view .LVU227
 800 01ba FFF7FEFF 		bl	our_arm_sin_f32
 801              	.LVL58:
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 802              		.loc 1 172 35 view .LVU228
 803 01be 2BEE407A 		vnmul.f32	s14, s22, s0
ARM GAS  /tmp/ccIBY9uK.s 			page 57


 173:Src/foc.cpp   **** 
 804              		.loc 1 173 40 view .LVU229
 805 01c2 60EE2A7A 		vmul.f32	s15, s0, s21
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 806              		.loc 1 172 35 view .LVU230
 807 01c6 AAEE2A7A 		vfma.f32	s14, s20, s21
 808              	.LBB1959:
 809              	.LBB1960:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 810              		.loc 2 791 4 view .LVU231
 811 01ca 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 812              	.LVL59:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 813              		.loc 2 791 4 view .LVU232
 814              	.LBE1960:
 815              	.LBE1959:
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 816              		.loc 1 172 5 is_stmt 1 view .LVU233
 173:Src/foc.cpp   **** 
 817              		.loc 1 173 5 view .LVU234
 173:Src/foc.cpp   **** 
 818              		.loc 1 173 34 is_stmt 0 view .LVU235
 819 01cc EAEE0B7A 		vfma.f32	s15, s20, s22
 820              	.LVL60:
 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 821              		.loc 1 176 5 is_stmt 1 view .LVU236
 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 822              		.loc 1 176 31 is_stmt 0 view .LVU237
 823 01d0 68EE876A 		vmul.f32	s13, s17, s14
 177:Src/foc.cpp   **** 
 824              		.loc 1 177 30 view .LVU238
 825 01d4 68EEA78A 		vmul.f32	s17, s17, s15
 826              	.LVL61:
 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 827              		.loc 1 176 20 view .LVU239
 828 01d8 C4ED276A 		vstr.32	s13, [r4, #156]
 177:Src/foc.cpp   **** 
 829              		.loc 1 177 5 is_stmt 1 view .LVU240
 177:Src/foc.cpp   **** 
 830              		.loc 1 177 19 is_stmt 0 view .LVU241
 831 01dc C4ED288A 		vstr.32	s17, [r4, #160]
 179:Src/foc.cpp   **** 
 832              		.loc 1 179 5 is_stmt 1 view .LVU242
 833              	.LVL62:
 834              	.LBB1970:
 835              	.LBI1970:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 836              		.loc 3 352 12 view .LVU243
 837              	.LBB1971:
 838              	.LBI1971:
 839              		.loc 6 76 5 view .LVU244
 840              		.loc 6 76 5 is_stmt 0 view .LVU245
 841              	.LBE1971:
 842              	.LBB1972:
 843              	.LBI1972:
 844              		.loc 6 76 5 is_stmt 1 view .LVU246
 845              		.loc 6 76 5 is_stmt 0 view .LVU247
ARM GAS  /tmp/ccIBY9uK.s 			page 58


 846              	.LBE1972:
 847              	.LBE1970:
 848              	.LBB1973:
 849              	.LBI1959:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850              		.loc 2 789 2 is_stmt 1 view .LVU248
 851              	.LBB1967:
 852              	.LBB1961:
 853              	.LBI1961:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 854              		.loc 2 434 22 view .LVU249
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 855              		.loc 2 434 22 is_stmt 0 view .LVU250
 856              	.LBE1961:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 857              		.loc 2 791 4 view .LVU251
 858 01e0 EBB1     		cbz	r3, .L28
 859              	.LVL63:
 860              	.LBB1962:
 861              	.LBI1962:
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 862              		.loc 3 401 7 is_stmt 1 view .LVU252
 863              	.LBB1963:
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 864              		.loc 3 408 8 is_stmt 0 view .LVU253
 865 01e2 86ED007A 		vstr.32	s14, [r6]
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 866              		.loc 3 409 9 view .LVU254
 867 01e6 C6ED017A 		vstr.32	s15, [r6, #4]
 868              	.LVL64:
 869              	.L29:
 870              		.loc 3 409 9 view .LVU255
 871              	.LBE1963:
 872              	.LBE1962:
 873              	.LBE1967:
 874              	.LBE1973:
 181:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 875              		.loc 1 181 5 is_stmt 1 view .LVU256
 876              	.LBB1974:
 182:Src/foc.cpp   ****         *ibus = mod_d * Id + mod_q * Iq;
 877              		.loc 1 182 9 view .LVU257
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 878              		.loc 1 183 9 view .LVU258
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 879              		.loc 1 183 36 is_stmt 0 view .LVU259
 880 01ea 28EE0B8A 		vmul.f32	s16, s16, s22
 881              	.LVL65:
ARM GAS  /tmp/ccIBY9uK.s 			page 59


 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 882              		.loc 1 183 15 view .LVU260
 883 01ee 0123     		movs	r3, #1
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 884              		.loc 1 183 28 view .LVU261
 885 01f0 A9EEAA8A 		vfma.f32	s16, s19, s21
 886              	.LVL66:
 887              	.LBB1975:
 888              	.LBI1975:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 889              		.loc 2 701 2 is_stmt 1 view .LVU262
 890              	.LBB1976:
 891              	.LBI1976:
 892              		.loc 6 76 5 view .LVU263
 893              		.loc 6 76 5 is_stmt 0 view .LVU264
 894              	.LBE1976:
 895              	.LBB1977:
 896              	.LBI1977:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 897              		.loc 2 608 28 is_stmt 1 view .LVU265
 898              	.LBB1978:
 899              	.LBI1978:
 900              		.loc 6 76 5 view .LVU266
 901              		.loc 6 76 5 is_stmt 0 view .LVU267
 902              	.LBE1978:
 903              	.LBB1979:
 904              	.LBI1979:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 905              		.loc 2 301 42 is_stmt 1 view .LVU268
 906              	.LBB1980:
 907              	.LBI1980:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 908              		.loc 2 116 2 view .LVU269
 909              	.LBB1981:
 910              	.LBI1981:
 911              		.loc 6 76 5 view .LVU270
 912              		.loc 6 76 5 is_stmt 0 view .LVU271
 913              	.LBE1981:
 914              	.LBB1982:
 915              	.LBI1982:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 916              		.loc 2 204 6 is_stmt 1 view .LVU272
 917              	.LBB1983:
 918              	.LBI1983:
 919              		.loc 6 76 5 view .LVU273
 920              		.loc 6 76 5 is_stmt 0 view .LVU274
 921              	.LBE1983:
 922              	.LBE1982:
 923              	.LBE1980:
 924              	.LBE1979:
 925              	.LBE1977:
 926              	.LBE1975:
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 927              		.loc 1 183 15 view .LVU275
 928 01f4 2B71     		strb	r3, [r5, #4]
 184:Src/foc.cpp   ****     }
 929              		.loc 1 184 9 is_stmt 1 view .LVU276
ARM GAS  /tmp/ccIBY9uK.s 			page 60


 930              	.LBE1974:
 187:Src/foc.cpp   **** }
 931              		.loc 1 187 35 is_stmt 0 view .LVU277
 932 01f6 0020     		movs	r0, #0
 933              	.LBB1984:
 184:Src/foc.cpp   ****     }
 934              		.loc 1 184 31 view .LVU278
 935 01f8 29EE089A 		vmul.f32	s18, s18, s16
 936              	.LVL67:
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 937              		.loc 1 183 15 view .LVU279
 938 01fc 85ED008A 		vstr.32	s16, [r5]
 184:Src/foc.cpp   ****     }
 939              		.loc 1 184 16 view .LVU280
 940 0200 84ED2B9A 		vstr.32	s18, [r4, #172]
 941              	.LVL68:
 184:Src/foc.cpp   ****     }
 942              		.loc 1 184 16 view .LVU281
 943              	.LBE1984:
 187:Src/foc.cpp   **** }
 944              		.loc 1 187 5 is_stmt 1 view .LVU282
 945              	.LBE1990:
 946              	.LBE1996:
 947              		.loc 1 188 1 is_stmt 0 view .LVU283
 948 0204 BDEC0C8B 		vldm	sp!, {d8-d13}
 949              	.LCFI11:
 950              		.cfi_remember_state
 951              		.cfi_restore 90
 952              		.cfi_restore 91
 953              		.cfi_restore 88
 954              		.cfi_restore 89
 955              		.cfi_restore 86
 956              		.cfi_restore 87
 957              		.cfi_restore 84
 958              		.cfi_restore 85
 959              		.cfi_restore 82
 960              		.cfi_restore 83
 961              		.cfi_restore 80
 962              		.cfi_restore 81
 963              		.cfi_def_cfa_offset 24
 964              	.LVL69:
 965              		.loc 1 188 1 view .LVU284
 966 0208 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 967              	.LVL70:
 968              	.L32:
 969              	.LCFI12:
 970              		.cfi_restore_state
 971              		.loc 1 188 1 view .LVU285
 972 020a BDEC0C8B 		vldm	sp!, {d8-d13}
 973              	.LCFI13:
 974              		.cfi_remember_state
 975              		.cfi_restore 90
 976              		.cfi_restore 91
 977              		.cfi_restore 88
 978              		.cfi_restore 89
 979              		.cfi_restore 86
 980              		.cfi_restore 87
ARM GAS  /tmp/ccIBY9uK.s 			page 61


 981              		.cfi_restore 84
 982              		.cfi_restore 85
 983              		.cfi_restore 82
 984              		.cfi_restore 83
 985              		.cfi_restore 80
 986              		.cfi_restore 81
 987              		.cfi_def_cfa_offset 24
 988              	.LBB1997:
 989              	.LBB1991:
  81:Src/foc.cpp   ****     }
 990              		.loc 1 81 46 view .LVU286
 991 020e 4FF08070 		mov	r0, #16777216
 992              	.LBE1991:
 993              	.LBE1997:
 994              		.loc 1 188 1 view .LVU287
 995 0212 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 996              	.LVL71:
 997              	.L34:
 998              	.LCFI14:
 999              		.cfi_restore_state
 1000              		.loc 1 188 1 view .LVU288
 1001 0214 BDEC0C8B 		vldm	sp!, {d8-d13}
 1002              	.LCFI15:
 1003              		.cfi_remember_state
 1004              		.cfi_restore 90
 1005              		.cfi_restore 91
 1006              		.cfi_restore 88
 1007              		.cfi_restore 89
 1008              		.cfi_restore 86
 1009              		.cfi_restore 87
 1010              		.cfi_restore 84
 1011              		.cfi_restore 85
 1012              		.cfi_restore 82
 1013              		.cfi_restore 83
 1014              		.cfi_restore 80
 1015              		.cfi_restore 81
 1016              		.cfi_def_cfa_offset 24
 1017              	.LBB1998:
 1018              	.LBB1992:
  91:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
 1019              		.loc 1 91 46 view .LVU289
 1020 0218 4FF48010 		mov	r0, #1048576
 1021              	.LBE1992:
 1022              	.LBE1998:
 1023              		.loc 1 188 1 view .LVU290
 1024 021c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1025              	.LVL72:
 1026              	.L28:
 1027              	.LCFI16:
 1028              		.cfi_restore_state
 1029              	.LBB1999:
 1030              	.LBB1993:
 1031              	.LBB1985:
 1032              	.LBB1968:
 1033              	.LBB1964:
 1034              	.LBI1964:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
ARM GAS  /tmp/ccIBY9uK.s 			page 62


 1035              		.loc 2 416 2 is_stmt 1 view .LVU291
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1036              		.loc 2 416 2 is_stmt 0 view .LVU292
 1037              	.LBE1964:
 1038              	.LBE1968:
 1039              	.LBE1985:
 1040              	.LBE1993:
 1041              	.LBE1999:
 1042              		.loc 4 175 3 is_stmt 1 view .LVU293
 1043              	.LBB2000:
 1044              	.LBB1994:
 1045              	.LBB1986:
 1046              	.LBB1969:
 1047              	.LBB1966:
 1048              	.LBB1965:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 1049              		.loc 2 422 51 is_stmt 0 view .LVU294
 1050 021e 0123     		movs	r3, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 1051              		.loc 2 419 4 view .LVU295
 1052 0220 86ED007A 		vstr.32	s14, [r6]
 1053 0224 C6ED017A 		vstr.32	s15, [r6, #4]
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 1054              		.loc 2 422 51 view .LVU296
 1055 0228 3372     		strb	r3, [r6, #8]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1056              		.loc 2 423 2 view .LVU297
 1057 022a DEE7     		b	.L29
 1058              	.LVL73:
 1059              	.L36:
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1060              		.loc 2 423 2 view .LVU298
 1061              	.LBE1965:
 1062              	.LBE1966:
 1063              	.LBE1969:
 1064              	.LBE1986:
 1065              	.LBB1987:
 1066              	.LBB1952:
 134:Src/foc.cpp   ****         }
 1067              		.loc 1 134 50 view .LVU299
 1068 022c 4FF40010 		mov	r0, #2097152
 1069              	.LVL74:
 134:Src/foc.cpp   ****         }
 1070              		.loc 1 134 50 view .LVU300
 1071 0230 A6E7     		b	.L18
 1072              	.LVL75:
 1073              	.L35:
 130:Src/foc.cpp   ****         } else if (!Idq.has_value()) {
 1074              		.loc 1 130 50 view .LVU301
 1075 0232 4FF40020 		mov	r0, #524288
 1076 0236 A3E7     		b	.L18
 1077              	.LVL76:
 1078              	.L45:
 152:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 1079              		.loc 1 152 13 is_stmt 1 view .LVU302
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 1080              		.loc 1 155 43 is_stmt 0 view .LVU303
ARM GAS  /tmp/ccIBY9uK.s 			page 63


 1081 0238 9FED0F6A 		vldr.32	s12, .L46+16
 1082 023c 27EE067A 		vmul.f32	s14, s14, s12
 156:Src/foc.cpp   ****         } else {
 1083              		.loc 1 156 43 view .LVU304
 1084 0240 66EE866A 		vmul.f32	s13, s13, s12
 152:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 1085              		.loc 1 152 19 view .LVU305
 1086 0244 6AEEA7AA 		vmul.f32	s21, s21, s15
 1087              	.LVL77:
 153:Src/foc.cpp   ****             // TODO make decayfactor configurable
 1088              		.loc 1 153 13 is_stmt 1 view .LVU306
 153:Src/foc.cpp   ****             // TODO make decayfactor configurable
 1089              		.loc 1 153 19 is_stmt 0 view .LVU307
 1090 0248 2BEE27BA 		vmul.f32	s22, s22, s15
 1091              	.LVL78:
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 1092              		.loc 1 155 13 is_stmt 1 view .LVU308
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 1093              		.loc 1 155 43 is_stmt 0 view .LVU309
 1094 024c 84ED257A 		vstr.32	s14, [r4, #148]
 156:Src/foc.cpp   ****         } else {
 1095              		.loc 1 156 13 is_stmt 1 view .LVU310
 156:Src/foc.cpp   ****         } else {
 1096              		.loc 1 156 43 is_stmt 0 view .LVU311
 1097 0250 C4ED266A 		vstr.32	s13, [r4, #152]
 1098 0254 9BE7     		b	.L27
 1099              	.LVL79:
 1100              	.L42:
 1101              	.LBB1950:
 1102              	.LBB1948:
 1103              		.loc 7 464 27 view .LVU312
 1104 0256 FFF7FEFF 		bl	sqrtf
 1105              	.LVL80:
 1106              		.loc 7 464 27 view .LVU313
 1107              	.LBE1948:
 1108              	.LBE1950:
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 1109              		.loc 1 155 43 view .LVU314
 1110 025a 94ED257A 		vldr.32	s14, [r4, #148]
 156:Src/foc.cpp   ****         } else {
 1111              		.loc 1 156 43 view .LVU315
 1112 025e D4ED266A 		vldr.32	s13, [r4, #152]
 1113              	.LBB1951:
 1114              	.LBB1949:
 1115              		.loc 7 464 27 view .LVU316
 1116 0262 B0EE406A 		vmov.f32	s12, s0
 1117 0266 70E7     		b	.L24
 1118              	.L47:
 1119              		.align	2
 1120              	.L46:
 1121 0268 E81F224D 		.word	1294082024
 1122 026c ABAA2A3F 		.word	1059760811
 1123 0270 AC5C313F 		.word	1060199596
 1124 0274 00000000 		.word	current_meas_period
 1125 0278 A4707D3F 		.word	1065185444
 1126              	.LBE1949:
 1127              	.LBE1951:
ARM GAS  /tmp/ccIBY9uK.s 			page 64


 1128              	.LBE1952:
 1129              	.LBE1987:
 1130              	.LBE1994:
 1131              	.LBE2000:
 1132              		.cfi_endproc
 1133              	.LFE3471:
 1135              		.section	.text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm,"
 1136              		.align	1
 1137              		.p2align 2,,3
 1138              		.global	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu fpv4-sp-d16
 1144              	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:
 1145              	.LVL81:
 1146              	.LFB3427:
  11:Src/foc.cpp   **** 
 1147              		.loc 1 11 39 is_stmt 1 view -0
 1148              		.cfi_startproc
 1149              		@ args = 24, pretend = 8, frame = 32
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
  13:Src/foc.cpp   ****     
 1151              		.loc 1 13 5 view .LVU318
  11:Src/foc.cpp   **** 
 1152              		.loc 1 11 39 is_stmt 0 view .LVU319
 1153 0000 82B0     		sub	sp, sp, #8
 1154              	.LCFI17:
 1155              		.cfi_def_cfa_offset 8
 1156 0002 30B5     		push	{r4, r5, lr}
 1157              	.LCFI18:
 1158              		.cfi_def_cfa_offset 20
 1159              		.cfi_offset 4, -20
 1160              		.cfi_offset 5, -16
 1161              		.cfi_offset 14, -12
 1162 0004 89B0     		sub	sp, sp, #36
 1163              	.LCFI19:
 1164              		.cfi_def_cfa_offset 56
  11:Src/foc.cpp   **** 
 1165              		.loc 1 11 39 view .LVU320
 1166 0006 EE46     		mov	lr, sp
 1167              	.LBB2026:
 1168              	.LBB2027:
 1169              	.LBB2028:
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1170              		.loc 2 435 58 view .LVU321
 1171 0008 9DF84040 		ldrb	r4, [sp, #64]	@ zero_extendqisi2
 1172              	.LBE2028:
 1173              	.LBE2027:
 1174              	.LBE2026:
  11:Src/foc.cpp   **** 
 1175              		.loc 1 11 39 view .LVU322
 1176 000c 0D93     		str	r3, [sp, #52]
 1177 000e 8EE80600 		stm	lr, {r1, r2}
  13:Src/foc.cpp   ****     
 1178              		.loc 1 13 28 view .LVU323
 1179 0012 0022     		movs	r2, #0
ARM GAS  /tmp/ccIBY9uK.s 			page 65


 1180 0014 CDE90522 		strd	r2, r2, [sp, #20]
  11:Src/foc.cpp   **** 
 1181              		.loc 1 11 39 view .LVU324
 1182 0018 1199     		ldr	r1, [sp, #68]
  13:Src/foc.cpp   ****     
 1183              		.loc 1 13 28 view .LVU325
 1184 001a 0792     		str	r2, [sp, #28]
 1185              	.LVL82:
  15:Src/foc.cpp   ****         // Clarke transform
 1186              		.loc 1 15 5 is_stmt 1 view .LVU326
 1187              	.LBB2030:
 1188              	.LBI2026:
 1189              		.loc 2 917 22 view .LVU327
 1190              	.LBB2029:
 1191              	.LBI2027:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1192              		.loc 2 434 22 view .LVU328
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1193              		.loc 2 434 22 is_stmt 0 view .LVU329
 1194              	.LBE2029:
 1195              	.LBE2030:
  11:Src/foc.cpp   **** 
 1196              		.loc 1 11 39 view .LVU330
 1197 001c 8446     		mov	ip, r0
  15:Src/foc.cpp   ****         // Clarke transform
 1198              		.loc 1 15 5 view .LVU331
 1199 001e 7CB3     		cbz	r4, .L56
  17:Src/foc.cpp   ****             (*currents)[0],
 1200              		.loc 1 17 9 is_stmt 1 view .LVU332
  23:Src/foc.cpp   **** }
 1201              		.loc 1 23 69 is_stmt 0 view .LVU333
 1202 0020 DCF80030 		ldr	r3, [ip]
  19:Src/foc.cpp   ****         };
 1203              		.loc 1 19 44 view .LVU334
 1204 0024 9DED0F7A 		vldr.32	s14, [sp, #60]
 1205 0028 DDED0E7A 		vldr.32	s15, [sp, #56]
  23:Src/foc.cpp   **** }
 1206              		.loc 1 23 69 view .LVU335
 1207 002c DD68     		ldr	r5, [r3, #12]
 1208 002e 2A4B     		ldr	r3, .L61
  19:Src/foc.cpp   ****         };
 1209              		.loc 1 19 26 view .LVU336
 1210 0030 DFED2A6A 		vldr.32	s13, .L61+4
  19:Src/foc.cpp   ****         };
 1211              		.loc 1 19 44 view .LVU337
 1212 0034 77EEC77A 		vsub.f32	s15, s15, s14
 1213 0038 9D42     		cmp	r5, r3
 1214              	.LBB2031:
 1215              	.LBB2032:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 1216              		.loc 3 353 64 view .LVU338
 1217 003a 9DED0D7A 		vldr.32	s14, [sp, #52]
 1218              	.LBE2032:
 1219              	.LBE2031:
  19:Src/foc.cpp   ****         };
 1220              		.loc 1 19 26 view .LVU339
 1221 003e 67EEA67A 		vmul.f32	s15, s15, s13
ARM GAS  /tmp/ccIBY9uK.s 			page 66


 1222              	.LVL83:
 1223              	.LBB2036:
 1224              	.LBI2031:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1225              		.loc 3 352 12 is_stmt 1 view .LVU340
 1226              	.LBB2035:
 1227              	.LBB2033:
 1228              	.LBI2033:
 1229              		.loc 6 76 5 view .LVU341
 1230              		.loc 6 76 5 is_stmt 0 view .LVU342
 1231              	.LBE2033:
 1232              	.LBB2034:
 1233              	.LBI2034:
 1234              		.loc 6 76 5 is_stmt 1 view .LVU343
 1235              		.loc 6 76 5 is_stmt 0 view .LVU344
 1236              	.LBE2034:
 1237              	.LBE2035:
 1238              	.LBE2036:
 1239              	.LBB2037:
 1240              	.LBI2037:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 1241              		.loc 2 789 2 is_stmt 1 view .LVU345
 1242              	.LBB2038:
 1243              	.LBI2038:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1244              		.loc 2 416 2 view .LVU346
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1245              		.loc 2 416 2 is_stmt 0 view .LVU347
 1246              	.LBE2038:
 1247              	.LBE2037:
 1248              		.loc 4 175 3 is_stmt 1 view .LVU348
 1249              		.loc 4 175 3 is_stmt 0 view .LVU349
 1250 0042 4FF00102 		mov	r2, #1
  23:Src/foc.cpp   **** }
 1251              		.loc 1 23 5 is_stmt 1 view .LVU350
  23:Src/foc.cpp   **** }
 1252              		.loc 1 23 5 is_stmt 0 view .LVU351
 1253 0046 26D1     		bne	.L50
 1254              	.LVL84:
 1255              	.L60:
 1256              	.LBB2039:
 1257              	.LBB2040:
  65:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 1258              		.loc 1 65 18 view .LVU352
 1259 0048 CCF87410 		str	r1, [ip, #116]
 1260 004c 9EE80300 		ldm	lr, {r0, r1}
 1261              	.LVL85:
  66:Src/foc.cpp   ****     Ialpha_beta_measured_ = Ialpha_beta;
 1262              		.loc 1 66 28 view .LVU353
 1263 0050 0CF17803 		add	r3, ip, #120
 1264 0054 83E80300 		stm	r3, {r0, r1}
 1265              	.LBB2041:
 1266              	.LBB2042:
 1267              	.LBB2043:
 1268              	.LBB2044:
 1269              	.LBB2045:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
ARM GAS  /tmp/ccIBY9uK.s 			page 67


 1270              		.loc 2 167 9 view .LVU354
 1271 0058 9CF88830 		ldrb	r3, [ip, #136]	@ zero_extendqisi2
 1272 005c 03AA     		add	r2, sp, #12
 1273 005e 82E80300 		stm	r2, {r0, r1}
 1274              	.LVL86:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 1275              		.loc 2 167 9 view .LVU355
 1276              	.LBE2045:
 1277              	.LBE2044:
 1278              	.LBE2043:
 1279              	.LBE2042:
 1280              	.LBE2041:
 1281              	.LBE2040:
 1282              	.LBI2039:
  61:Src/foc.cpp   ****         std::optional<float> vbus_voltage, std::optional<float2D> Ialpha_beta,
 1283              		.loc 1 61 30 is_stmt 1 view .LVU356
 1284              	.LBB2069:
  65:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 1285              		.loc 1 65 5 view .LVU357
  66:Src/foc.cpp   ****     Ialpha_beta_measured_ = Ialpha_beta;
 1286              		.loc 1 66 5 view .LVU358
  67:Src/foc.cpp   **** 
 1287              		.loc 1 67 5 view .LVU359
 1288              	.LBB2066:
 1289              	.LBI2041:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 1290              		.loc 2 659 11 view .LVU360
 1291              	.LBB2063:
 1292              	.LBI2042:
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 1293              		.loc 2 628 23 view .LVU361
 1294              	.LBB2060:
 1295              	.LBI2043:
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 1296              		.loc 2 369 7 view .LVU362
 1297              	.LBB2057:
 1298              	.LBI2044:
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 1299              		.loc 2 165 7 view .LVU363
 1300              	.LBB2054:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 1301              		.loc 2 167 9 is_stmt 0 view .LVU364
 1302 0062 7BBB     		cbnz	r3, .L59
 1303              	.LVL87:
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 1304              		.loc 2 171 6 view .LVU365
 1305 0064 34B1     		cbz	r4, .L57
 1306              	.LVL88:
 1307              	.LBB2046:
 1308              	.LBI2046:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1309              		.loc 2 248 9 is_stmt 1 view .LVU366
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1310              		.loc 2 248 9 is_stmt 0 view .LVU367
 1311              	.LBE2046:
 1312              	.LBE2054:
 1313              	.LBE2057:
ARM GAS  /tmp/ccIBY9uK.s 			page 68


 1314              	.LBE2060:
 1315              	.LBE2063:
 1316              	.LBE2066:
 1317              	.LBE2069:
 1318              	.LBE2039:
 1319              		.loc 4 175 3 is_stmt 1 view .LVU368
 1320              	.LBB2072:
 1321              	.LBB2070:
 1322              	.LBB2067:
 1323              	.LBB2064:
 1324              	.LBB2061:
 1325              	.LBB2058:
 1326              	.LBB2055:
 1327              	.LBB2048:
 1328              	.LBB2047:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1329              		.loc 2 253 28 is_stmt 0 view .LVU369
 1330 0066 0123     		movs	r3, #1
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 1331              		.loc 2 251 11 view .LVU370
 1332 0068 8CED207A 		vstr.32	s14, [ip, #128]
 1333 006c CCED217A 		vstr.32	s15, [ip, #132]
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1334              		.loc 2 253 28 view .LVU371
 1335 0070 8CF88830 		strb	r3, [ip, #136]
 1336              	.LVL89:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1337              		.loc 2 253 28 view .LVU372
 1338              	.LBE2047:
 1339              	.LBE2048:
 1340              	.LBE2055:
 1341              	.LBE2058:
 1342              	.LBE2061:
 1343              	.LBE2064:
 1344              	.LBE2067:
  69:Src/foc.cpp   **** }
 1345              		.loc 1 69 5 is_stmt 1 view .LVU373
 1346              	.L57:
  69:Src/foc.cpp   **** }
 1347              		.loc 1 69 5 is_stmt 0 view .LVU374
 1348              	.LBE2070:
 1349              	.LBE2072:
  24:Src/foc.cpp   **** 
 1350              		.loc 1 24 1 view .LVU375
 1351 0074 0020     		movs	r0, #0
 1352 0076 09B0     		add	sp, sp, #36
 1353              	.LCFI20:
 1354              		.cfi_remember_state
 1355              		.cfi_def_cfa_offset 20
 1356              		@ sp needed
 1357 0078 BDE83040 		pop	{r4, r5, lr}
 1358              	.LCFI21:
 1359              		.cfi_restore 14
 1360              		.cfi_restore 5
 1361              		.cfi_restore 4
 1362              		.cfi_def_cfa_offset 8
 1363 007c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccIBY9uK.s 			page 69


 1364              	.LCFI22:
 1365              		.cfi_def_cfa_offset 0
 1366 007e 7047     		bx	lr
 1367              	.LVL90:
 1368              	.L56:
 1369              	.LCFI23:
 1370              		.cfi_restore_state
  23:Src/foc.cpp   **** }
 1371              		.loc 1 23 69 view .LVU376
 1372 0080 DCF80030 		ldr	r3, [ip]
  13:Src/foc.cpp   ****     
 1373              		.loc 1 13 28 view .LVU377
 1374 0084 DFED167A 		vldr.32	s15, .L61+8
  23:Src/foc.cpp   **** }
 1375              		.loc 1 23 69 view .LVU378
 1376 0088 DD68     		ldr	r5, [r3, #12]
 1377 008a 134B     		ldr	r3, .L61
 1378 008c 9D42     		cmp	r5, r3
  13:Src/foc.cpp   ****     
 1379              		.loc 1 13 28 view .LVU379
 1380 008e 2246     		mov	r2, r4
 1381 0090 B0EE677A 		vmov.f32	s14, s15
 1382              	.LVL91:
  23:Src/foc.cpp   **** }
 1383              		.loc 1 23 5 is_stmt 1 view .LVU380
  23:Src/foc.cpp   **** }
 1384              		.loc 1 23 5 is_stmt 0 view .LVU381
 1385 0094 D8D0     		beq	.L60
 1386              	.LVL92:
 1387              	.L50:
  23:Src/foc.cpp   **** }
 1388              		.loc 1 23 26 view .LVU382
 1389 0096 1091     		str	r1, [sp, #64]
 1390 0098 8DF81C20 		strb	r2, [sp, #28]
 1391 009c CDED067A 		vstr.32	s15, [sp, #24]
 1392 00a0 08A9     		add	r1, sp, #32
 1393 00a2 11E90300 		ldmdb	r1, {r0, r1}
 1394              	.LVL93:
  23:Src/foc.cpp   **** }
 1395              		.loc 1 23 26 view .LVU383
 1396 00a6 8DED057A 		vstr.32	s14, [sp, #20]
 1397 00aa 0EAA     		add	r2, sp, #56
 1398 00ac 059B     		ldr	r3, [sp, #20]
 1399 00ae 82E80300 		stm	r2, {r0, r1}
 1400 00b2 9EE80600 		ldm	lr, {r1, r2}
 1401 00b6 6046     		mov	r0, ip
 1402 00b8 AC46     		mov	ip, r5
 1403              	.LVL94:
  24:Src/foc.cpp   **** 
 1404              		.loc 1 24 1 view .LVU384
 1405 00ba 09B0     		add	sp, sp, #36
 1406              	.LCFI24:
 1407              		.cfi_remember_state
 1408              		.cfi_def_cfa_offset 20
 1409              		@ sp needed
 1410 00bc BDE83040 		pop	{r4, r5, lr}
 1411              	.LCFI25:
ARM GAS  /tmp/ccIBY9uK.s 			page 70


 1412              		.cfi_restore 14
 1413              		.cfi_restore 5
 1414              		.cfi_restore 4
 1415              		.cfi_def_cfa_offset 8
 1416 00c0 02B0     		add	sp, sp, #8
 1417              	.LCFI26:
 1418              		.cfi_def_cfa_offset 0
  23:Src/foc.cpp   **** }
 1419              		.loc 1 23 26 view .LVU385
 1420 00c2 6047     		bx	ip
 1421              	.LVL95:
 1422              	.L59:
 1423              	.LCFI27:
 1424              		.cfi_restore_state
 1425              	.LBB2073:
 1426              	.LBB2071:
 1427              	.LBB2068:
 1428              	.LBB2065:
 1429              	.LBB2062:
 1430              	.LBB2059:
 1431              	.LBB2056:
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 1432              		.loc 2 167 30 view .LVU386
 1433 00c4 24B1     		cbz	r4, .L52
 1434              	.LVL96:
 1435              	.LBB2049:
 1436              	.LBI2049:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 1437              		.loc 3 390 7 is_stmt 1 view .LVU387
 1438              	.LBB2050:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 1439              		.loc 3 395 8 is_stmt 0 view .LVU388
 1440 00c6 8CED207A 		vstr.32	s14, [ip, #128]
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 1441              		.loc 3 396 9 view .LVU389
 1442 00ca CCED217A 		vstr.32	s15, [ip, #132]
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 1443              		.loc 3 397 10 view .LVU390
 1444 00ce D1E7     		b	.L57
 1445              	.LVL97:
 1446              	.L52:
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 1447              		.loc 3 397 10 view .LVU391
 1448              	.LBE2050:
 1449              	.LBE2049:
 1450              	.LBB2051:
 1451              	.LBB2052:
 1452              	.LBI2052:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 1453              		.loc 2 257 7 is_stmt 1 view .LVU392
 1454              	.LBB2053:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 1455              		.loc 2 259 13 is_stmt 0 view .LVU393
 1456 00d0 8CF88840 		strb	r4, [ip, #136]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1457              		.loc 2 261 7 view .LVU394
 1458 00d4 CEE7     		b	.L57
ARM GAS  /tmp/ccIBY9uK.s 			page 71


 1459              	.L62:
 1460 00d6 00BF     		.align	2
 1461              	.L61:
 1462 00d8 00000000 		.word	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 1463 00dc 3ACD133F 		.word	1058262330
 1464 00e0 00000000 		.word	0
 1465              	.LBE2053:
 1466              	.LBE2052:
 1467              	.LBE2051:
 1468              	.LBE2056:
 1469              	.LBE2059:
 1470              	.LBE2062:
 1471              	.LBE2065:
 1472              	.LBE2068:
 1473              	.LBE2071:
 1474              	.LBE2073:
 1475              		.cfi_endproc
 1476              	.LFE3427:
 1478              		.section	.text._ZN23FieldOrientedController6updateEm,"ax",%progbits
 1479              		.align	1
 1480              		.p2align 2,,3
 1481              		.global	_ZN23FieldOrientedController6updateEm
 1482              		.syntax unified
 1483              		.thumb
 1484              		.thumb_func
 1485              		.fpu fpv4-sp-d16
 1487              	_ZN23FieldOrientedController6updateEm:
 1488              	.LVL98:
 1489              	.LFB3491:
 189:Src/foc.cpp   **** 
 190:Src/foc.cpp   **** void FieldOrientedController::update(uint32_t timestamp) {
 1490              		.loc 1 190 58 is_stmt 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 191:Src/foc.cpp   ****    uint32_t mask = cpu_enter_critical();
 1494              		.loc 1 191 4 view .LVU396
 1495              	.LBB2904:
 1496              	.LBI2904:
 1497              		.file 8 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
ARM GAS  /tmp/ccIBY9uK.s 			page 72


  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
  48:Inc/low_level.h **** }
  49:Inc/low_level.h **** 
  50:Inc/low_level.h **** // Initalisation
  51:Inc/low_level.h **** void start_adc_pwm();
  52:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  53:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  54:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  55:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  56:Inc/low_level.h **** void start_general_purpose_adc();
  57:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  58:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  60:Inc/low_level.h **** void pwm_in_init();
  61:Inc/low_level.h **** void start_analog_thread();
  62:Inc/low_level.h **** 
  63:Inc/low_level.h **** void update_brake_current();
  64:Inc/low_level.h **** 
  65:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 1498              		.loc 8 65 17 view .LVU397
 1499              	.LBB2905:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 1500              		.loc 8 66 5 view .LVU398
 1501              	.LBB2906:
 1502              	.LBI2906:
 1503              		.file 9 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /tmp/ccIBY9uK.s 			page 73


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /tmp/ccIBY9uK.s 			page 74


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
ARM GAS  /tmp/ccIBY9uK.s 			page 75


 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
ARM GAS  /tmp/ccIBY9uK.s 			page 76


 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
ARM GAS  /tmp/ccIBY9uK.s 			page 77


 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIBY9uK.s 			page 78


 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
ARM GAS  /tmp/ccIBY9uK.s 			page 79


 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccIBY9uK.s 			page 80


 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 1504              		.loc 9 449 31 view .LVU399
 1505              	.LBB2907:
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1506              		.loc 9 451 3 view .LVU400
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 1507              		.loc 9 453 3 view .LVU401
 1508              	.LBE2907:
ARM GAS  /tmp/ccIBY9uK.s 			page 81


 1509              	.LBE2906:
 1510              	.LBE2905:
 1511              	.LBE2904:
 190:Src/foc.cpp   ****    uint32_t mask = cpu_enter_critical();
 1512              		.loc 1 190 58 is_stmt 0 view .LVU402
 1513 0000 08B5     		push	{r3, lr}
 1514              	.LCFI28:
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 3, -8
 1517              		.cfi_offset 14, -4
 1518              	.LBB2913:
 1519              	.LBB2912:
 1520              	.LBB2909:
 1521              	.LBB2908:
 1522              		.loc 9 453 3 view .LVU403
 1523              		.syntax unified
 1524              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1525 0002 EFF3108C 		MRS ip, primask
 1526              	@ 0 "" 2
 1527              	.LVL99:
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1528              		.loc 9 454 3 is_stmt 1 view .LVU404
 1529              		.loc 9 454 3 is_stmt 0 view .LVU405
 1530              		.thumb
 1531              		.syntax unified
 1532              	.LBE2908:
 1533              	.LBE2909:
  67:Inc/low_level.h ****     __disable_irq();
 1534              		.loc 8 67 5 is_stmt 1 view .LVU406
 1535              	.LBB2910:
 1536              	.LBI2910:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1537              		.loc 9 207 27 view .LVU407
 1538              	.LBB2911:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1539              		.loc 9 209 3 view .LVU408
 1540              		.syntax unified
 1541              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1542 0006 72B6     		cpsid i
 1543              	@ 0 "" 2
 1544              		.thumb
 1545              		.syntax unified
 1546              	.LBE2911:
 1547              	.LBE2910:
  68:Inc/low_level.h ****     return primask;
 1548              		.loc 8 68 5 view .LVU409
 1549              	.LVL100:
 1550              		.loc 8 68 5 is_stmt 0 view .LVU410
 1551              	.LBE2912:
 1552              	.LBE2913:
 192:Src/foc.cpp   ****     {
 1553              		.loc 1 192 5 is_stmt 1 view .LVU411
 193:Src/foc.cpp   ****         ctrl_timestamp_ = timestamp;
 1554              		.loc 1 193 9 view .LVU412
 1555              	.LBB2914:
 1556              	.LBB2915:
 1557              	.LBB2916:
ARM GAS  /tmp/ccIBY9uK.s 			page 82


 1558              	.LBB2917:
 1559              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccIBY9uK.s 			page 83


  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
ARM GAS  /tmp/ccIBY9uK.s 			page 84


 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
ARM GAS  /tmp/ccIBY9uK.s 			page 85


 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
ARM GAS  /tmp/ccIBY9uK.s 			page 86


 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
ARM GAS  /tmp/ccIBY9uK.s 			page 87


 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
ARM GAS  /tmp/ccIBY9uK.s 			page 88


 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
ARM GAS  /tmp/ccIBY9uK.s 			page 89


 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
ARM GAS  /tmp/ccIBY9uK.s 			page 90


 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
ARM GAS  /tmp/ccIBY9uK.s 			page 91


 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccIBY9uK.s 			page 92


 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
ARM GAS  /tmp/ccIBY9uK.s 			page 93


 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
ARM GAS  /tmp/ccIBY9uK.s 			page 94


 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
ARM GAS  /tmp/ccIBY9uK.s 			page 95


 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
ARM GAS  /tmp/ccIBY9uK.s 			page 96


 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
ARM GAS  /tmp/ccIBY9uK.s 			page 97


 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
ARM GAS  /tmp/ccIBY9uK.s 			page 98


 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
ARM GAS  /tmp/ccIBY9uK.s 			page 99


 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
ARM GAS  /tmp/ccIBY9uK.s 			page 100


1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
ARM GAS  /tmp/ccIBY9uK.s 			page 101


1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
ARM GAS  /tmp/ccIBY9uK.s 			page 102


1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
ARM GAS  /tmp/ccIBY9uK.s 			page 103


1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
ARM GAS  /tmp/ccIBY9uK.s 			page 104


1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
ARM GAS  /tmp/ccIBY9uK.s 			page 105


1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
ARM GAS  /tmp/ccIBY9uK.s 			page 106


1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
ARM GAS  /tmp/ccIBY9uK.s 			page 107


1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
ARM GAS  /tmp/ccIBY9uK.s 			page 108


1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
ARM GAS  /tmp/ccIBY9uK.s 			page 109


1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __index_type = typename _Base::__index_type;
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->_M_index;
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
 1560              		.loc 10 1568 45 is_stmt 0 view .LVU413
 1561 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1562              	.LBE2917:
 1563              	.LBE2916:
 1564              	.LBE2915:
 1565              	.LBE2914:
 194:Src/foc.cpp   ****         enable_current_control_ = enable_current_control_src_;
 1566              		.loc 1 194 33 view .LVU414
 1567 000c 027E     		ldrb	r2, [r0, #24]	@ zero_extendqisi2
 193:Src/foc.cpp   ****         ctrl_timestamp_ = timestamp;
 1568              		.loc 1 193 25 view .LVU415
 1569 000e 4164     		str	r1, [r0, #68]
 1570              		.loc 1 194 9 is_stmt 1 view .LVU416
 1571              	.LBB2985:
 1572              	.LBB2956:
 1573              		.file 11 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
ARM GAS  /tmp/ccIBY9uK.s 			page 110


  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
  53:Inc/component.hpp ****         content_ = value;
  54:Inc/component.hpp ****         age_ = 0;
  55:Inc/component.hpp ****     }
  56:Inc/component.hpp **** 
  57:Inc/component.hpp ****     /**
  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
ARM GAS  /tmp/ccIBY9uK.s 			page 111


  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
 114:Inc/component.hpp ****  * The source can be one of:
 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 124:Inc/component.hpp **** public:
ARM GAS  /tmp/ccIBY9uK.s 			page 112


 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:Inc/component.hpp ****         content_ = input_port;
 127:Inc/component.hpp ****     }
 128:Inc/component.hpp **** 
 129:Inc/component.hpp ****     void connect_to(T* input_ptr) {
 130:Inc/component.hpp ****         content_ = input_ptr;
 131:Inc/component.hpp ****     }
 132:Inc/component.hpp **** 
 133:Inc/component.hpp ****     void disconnect() {
 134:Inc/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:Inc/component.hpp ****     }
 136:Inc/component.hpp **** 
 137:Inc/component.hpp ****     std::optional<T> present() {
 138:Inc/component.hpp ****         if (content_.index() == 2) {
 1574              		.loc 11 138 9 is_stmt 0 view .LVU417
 1575 0010 022B     		cmp	r3, #2
 1576              	.LBE2956:
 1577              	.LBE2985:
 1578              		.loc 1 194 33 view .LVU418
 1579 0012 80F84820 		strb	r2, [r0, #72]
 195:Src/foc.cpp   ****         Idq_setpoint_ = Idq_setpoint_src_.present();
 1580              		.loc 1 195 9 is_stmt 1 view .LVU419
 1581              	.LVL101:
 1582              	.LBB2986:
 1583              	.LBI2914:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 1584              		.loc 11 137 22 view .LVU420
 1585              	.LBB2957:
 1586              	.LBB2918:
 1587              	.LBI2916:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1588              		.loc 10 1562 24 view .LVU421
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1589              		.loc 10 1562 24 is_stmt 0 view .LVU422
 1590              	.LBE2918:
 1591              		.loc 11 138 9 view .LVU423
 1592 0016 00F08B80 		beq	.L116
 1593              	.LBB2919:
 139:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 140:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 141:Inc/component.hpp ****         } else if (content_.index() == 1) {
 1594              		.loc 11 141 16 view .LVU424
 1595 001a 012B     		cmp	r3, #1
 1596 001c 43D0     		beq	.L117
 1597              	.LVL102:
 1598              	.LBB2920:
 1599              	.LBI2920:
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       swap(variant& __rhs)
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__raw_idx_visit(
ARM GAS  /tmp/ccIBY9uK.s 			page 113


1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->index() == __rhs_index)
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    auto& __this_mem =
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      std::get<__rhs_index>(*this);
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using std::swap;
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    swap(__this_mem, __rhs_mem);
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs = std::move(*this);
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__tmp));
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__rhs_mem));
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs._M_reset();
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    __rhs = std::move(*this);
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    this->_M_reset();
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __rhs);
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Vp>
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr decltype(auto)
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Vp>
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void*
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Tp> \
ARM GAS  /tmp/ccIBY9uK.s 			page 114


1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr bool \
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      const variant<_Tp...>& __rhs);
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>& __v)
 1600              		.loc 10 1652 5 is_stmt 1 view .LVU425
 1601              	.LBB2921:
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__v.index() != _Np)
 1602              		.loc 10 1656 7 is_stmt 0 view .LVU426
 1603 001e 002B     		cmp	r3, #0
 1604 0020 40F0C280 		bne	.L79
 1605              	.LVL103:
 1606              		.loc 10 1656 7 view .LVU427
 1607              	.LBE2921:
 1608              	.LBE2920:
 1609              	.LBB2926:
 1610              	.LBI2926:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1611              		.loc 2 701 2 is_stmt 1 view .LVU428
 1612              	.LBB2927:
 1613              	.LBB2928:
 1614              	.LBI2928:
 1615              		.loc 6 76 5 view .LVU429
 1616              		.loc 6 76 5 is_stmt 0 view .LVU430
 1617              	.LBE2928:
 1618              	.LBB2929:
 1619              	.LBI2929:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 1620              		.loc 2 608 28 is_stmt 1 view .LVU431
 1621              	.LBB2930:
 1622              	.LBI2930:
 1623              		.loc 6 76 5 view .LVU432
 1624              		.loc 6 76 5 is_stmt 0 view .LVU433
 1625              	.LBE2930:
 1626              	.LBB2931:
 1627              	.LBI2931:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1628              		.loc 2 359 42 is_stmt 1 view .LVU434
 1629              	.LBB2932:
 1630              	.LBI2932:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 1631              		.loc 2 116 2 view .LVU435
ARM GAS  /tmp/ccIBY9uK.s 			page 115


 1632              	.LBB2933:
 1633              	.LBI2933:
 1634              		.loc 6 76 5 view .LVU436
 1635              		.loc 6 76 5 is_stmt 0 view .LVU437
 1636              	.LBE2933:
 1637              	.LBB2934:
 1638              	.LBI2934:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 1639              		.loc 2 204 6 is_stmt 1 view .LVU438
 1640              	.LBB2935:
 1641              	.LBB2936:
 1642              	.LBI2936:
 1643              		.loc 6 76 5 view .LVU439
 1644              		.loc 6 76 5 is_stmt 0 view .LVU440
 1645              	.LBE2936:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1646              		.loc 2 205 47 view .LVU441
 1647 0024 C369     		ldr	r3, [r0, #28]	@ float
 1648 0026 026A     		ldr	r2, [r0, #32]	@ float
 1649              	.LVL104:
 1650              	.L67:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1651              		.loc 2 205 47 view .LVU442
 1652              	.LBE2935:
 1653              	.LBE2934:
 1654              	.LBE2932:
 1655              	.LBE2931:
 1656              	.LBE2929:
 1657              	.LBE2927:
 1658              	.LBE2926:
 1659              	.LBE2919:
 1660              	.LBE2957:
 1661              	.LBE2986:
 1662              	.LBB2987:
 1663              	.LBI2987:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 1664              		.loc 2 659 11 is_stmt 1 view .LVU443
 1665              	.LBB2988:
 1666              	.LBI2988:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1667              		.loc 2 629 23 view .LVU444
 1668              	.LBB2989:
 1669              	.LBI2989:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 1670              		.loc 2 378 7 view .LVU445
 1671              	.LBB2990:
 1672              	.LBI2990:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 1673              		.loc 2 180 7 view .LVU446
 1674              	.LBB2991:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 1675              		.loc 2 184 2 is_stmt 0 view .LVU447
 1676 0028 90F85410 		ldrb	r1, [r0, #84]	@ zero_extendqisi2
 1677              	.LVL105:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 1678              		.loc 2 184 2 view .LVU448
 1679 002c 0029     		cmp	r1, #0
ARM GAS  /tmp/ccIBY9uK.s 			page 116


 1680 002e 43D1     		bne	.L118
 1681              	.LVL106:
 1682              	.L114:
 1683              	.LBB2992:
 1684              	.LBI2992:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1685              		.loc 2 248 9 is_stmt 1 view .LVU449
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1686              		.loc 2 248 9 is_stmt 0 view .LVU450
 1687              	.LBE2992:
 1688              	.LBE2991:
 1689              	.LBE2990:
 1690              	.LBE2989:
 1691              	.LBE2988:
 1692              	.LBE2987:
 1693              		.loc 4 175 3 is_stmt 1 view .LVU451
 1694              	.LBB3022:
 1695              	.LBB3017:
 1696              	.LBB3012:
 1697              	.LBB3007:
 1698              	.LBB3002:
 1699              	.LBB2994:
 1700              	.LBB2993:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1701              		.loc 2 253 28 is_stmt 0 view .LVU452
 1702 0030 0121     		movs	r1, #1
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 1703              		.loc 2 251 11 view .LVU453
 1704 0032 C364     		str	r3, [r0, #76]	@ float
 1705 0034 0265     		str	r2, [r0, #80]	@ float
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1706              		.loc 2 253 28 view .LVU454
 1707 0036 80F85410 		strb	r1, [r0, #84]
 1708              	.LVL107:
 1709              	.L87:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 1710              		.loc 2 253 28 view .LVU455
 1711              	.LBE2993:
 1712              	.LBE2994:
 1713              	.LBE3002:
 1714              	.LBE3007:
 1715              	.LBE3012:
 1716              	.LBE3017:
 1717              	.LBE3022:
 196:Src/foc.cpp   ****         Vdq_setpoint_ = Vdq_setpoint_src_.present();
 1718              		.loc 1 196 9 is_stmt 1 view .LVU456
 1719              	.LBB3023:
 1720              	.LBI3023:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 1721              		.loc 11 137 22 view .LVU457
 1722              	.LBB3024:
 1723              	.LBB3025:
 1724              	.LBI3025:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1725              		.loc 10 1562 24 view .LVU458
 1726              	.LBB3026:
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
ARM GAS  /tmp/ccIBY9uK.s 			page 117


 1727              		.loc 10 1568 45 is_stmt 0 view .LVU459
 1728 003a 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
 1729              	.LVL108:
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
 1730              		.loc 10 1568 45 view .LVU460
 1731              	.LBE3026:
 1732              	.LBE3025:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 1733              		.loc 11 138 9 view .LVU461
 1734 003e 022B     		cmp	r3, #2
 1735 0040 40D0     		beq	.L119
 1736              	.LVL109:
 1737              	.L72:
 1738              	.LBB3028:
 1739              		.loc 11 141 16 view .LVU462
 1740 0042 012B     		cmp	r3, #1
 1741 0044 00F08180 		beq	.L120
 1742              	.LVL110:
 1743              	.LBB3029:
 1744              	.LBI3029:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1745              		.loc 10 1652 5 is_stmt 1 view .LVU463
 1746              	.LBB3030:
 1747              		.loc 10 1656 7 is_stmt 0 view .LVU464
 1748 0048 002B     		cmp	r3, #0
 1749 004a 40F0AD80 		bne	.L79
 1750              	.LVL111:
 1751              		.loc 10 1656 7 view .LVU465
 1752              	.LBE3030:
 1753              	.LBE3029:
 1754              	.LBB3031:
 1755              	.LBI3031:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1756              		.loc 2 701 2 is_stmt 1 view .LVU466
 1757              	.LBB3032:
 1758              	.LBB3033:
 1759              	.LBI3033:
 1760              		.loc 6 76 5 view .LVU467
 1761              		.loc 6 76 5 is_stmt 0 view .LVU468
 1762              	.LBE3033:
 1763              	.LBB3034:
 1764              	.LBI3034:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 1765              		.loc 2 608 28 is_stmt 1 view .LVU469
 1766              	.LBB3035:
 1767              	.LBI3035:
 1768              		.loc 6 76 5 view .LVU470
 1769              		.loc 6 76 5 is_stmt 0 view .LVU471
 1770              	.LBE3035:
 1771              	.LBB3036:
 1772              	.LBI3036:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1773              		.loc 2 359 42 is_stmt 1 view .LVU472
 1774              	.LBB3037:
 1775              	.LBI3037:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 1776              		.loc 2 116 2 view .LVU473
ARM GAS  /tmp/ccIBY9uK.s 			page 118


 1777              	.LBB3038:
 1778              	.LBI3038:
 1779              		.loc 6 76 5 view .LVU474
 1780              		.loc 6 76 5 is_stmt 0 view .LVU475
 1781              	.LBE3038:
 1782              	.LBB3039:
 1783              	.LBI3039:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 1784              		.loc 2 204 6 is_stmt 1 view .LVU476
 1785              	.LBB3040:
 1786              	.LBB3041:
 1787              	.LBI3041:
 1788              		.loc 6 76 5 view .LVU477
 1789              		.loc 6 76 5 is_stmt 0 view .LVU478
 1790              	.LBE3041:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1791              		.loc 2 205 47 view .LVU479
 1792 004e 826A     		ldr	r2, [r0, #40]	@ float
 1793 0050 C36A     		ldr	r3, [r0, #44]	@ float
 1794              	.LVL112:
 1795              	.L75:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1796              		.loc 2 205 47 view .LVU480
 1797              	.LBE3040:
 1798              	.LBE3039:
 1799              	.LBE3037:
 1800              	.LBE3036:
 1801              	.LBE3034:
 1802              	.LBE3032:
 1803              	.LBE3031:
 1804              	.LBE3028:
 1805              	.LBE3024:
 1806              	.LBE3023:
 1807              	.LBB3087:
 1808              	.LBI3087:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 1809              		.loc 2 659 11 is_stmt 1 view .LVU481
 1810              	.LBB3088:
 1811              	.LBI3088:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1812              		.loc 2 629 23 view .LVU482
 1813              	.LBB3089:
 1814              	.LBI3089:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 1815              		.loc 2 378 7 view .LVU483
 1816              	.LBB3090:
 1817              	.LBI3090:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 1818              		.loc 2 180 7 view .LVU484
 1819              	.LBB3091:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 1820              		.loc 2 184 2 is_stmt 0 view .LVU485
 1821 0052 90F86010 		ldrb	r1, [r0, #96]	@ zero_extendqisi2
 1822 0056 0029     		cmp	r1, #0
 1823 0058 40D0     		beq	.L121
 1824              	.LVL113:
 1825              	.L89:
ARM GAS  /tmp/ccIBY9uK.s 			page 119


 1826              	.LBB3092:
 1827              	.LBI3092:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 1828              		.loc 3 401 7 is_stmt 1 view .LVU486
 1829              	.LBB3093:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 1830              		.loc 3 408 8 is_stmt 0 view .LVU487
 1831 005a 8265     		str	r2, [r0, #88]	@ float
 1832              		.loc 3 409 9 view .LVU488
 1833 005c C365     		str	r3, [r0, #92]	@ float
 1834              	.LVL114:
 1835              	.L80:
 1836              		.loc 3 409 9 view .LVU489
 1837              	.LBE3093:
 1838              	.LBE3092:
 1839              	.LBE3091:
 1840              	.LBE3090:
 1841              	.LBE3089:
 1842              	.LBE3088:
 1843              	.LBE3087:
 197:Src/foc.cpp   ****         phase_ = phase_src_.present();
 1844              		.loc 1 197 9 is_stmt 1 view .LVU490
 1845              	.LBB3128:
 1846              	.LBI3128:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 1847              		.loc 11 137 22 view .LVU491
 1848              	.LBB3129:
 1849              	.LBB3130:
 1850              	.LBI3130:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1851              		.loc 10 1562 24 view .LVU492
 1852              	.LBB3131:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 1853              		.loc 10 1566 17 is_stmt 0 view .LVU493
 1854 005e 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1855              	.LVL115:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 1856              		.loc 10 1566 17 view .LVU494
 1857              	.LBE3131:
 1858              	.LBE3130:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 1859              		.loc 11 138 9 view .LVU495
 1860 0062 022B     		cmp	r3, #2
 1861 0064 43D0     		beq	.L122
 1862              	.LVL116:
 1863              	.L81:
 1864              	.LBB3133:
 1865              		.loc 11 141 16 view .LVU496
 1866 0066 012B     		cmp	r3, #1
 1867 0068 00F08480 		beq	.L123
 1868              	.LVL117:
 1869              	.LBB3134:
 1870              	.LBI3134:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1871              		.loc 10 1652 5 is_stmt 1 view .LVU497
 1872              	.LBB3135:
 1873              		.loc 10 1656 7 is_stmt 0 view .LVU498
ARM GAS  /tmp/ccIBY9uK.s 			page 120


 1874 006c 002B     		cmp	r3, #0
 1875 006e 40F09B80 		bne	.L79
 1876              	.LVL118:
 1877              		.loc 10 1656 7 view .LVU499
 1878              	.LBE3135:
 1879              	.LBE3134:
 1880              	.LBB3136:
 1881              	.LBI3136:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1882              		.loc 2 701 2 is_stmt 1 view .LVU500
 1883              	.LBB3137:
 1884              	.LBB3138:
 1885              	.LBI3138:
 1886              		.loc 6 76 5 view .LVU501
 1887              		.loc 6 76 5 is_stmt 0 view .LVU502
 1888              	.LBE3138:
 1889              	.LBB3139:
 1890              	.LBI3139:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 1891              		.loc 2 608 28 is_stmt 1 view .LVU503
 1892              	.LBB3140:
 1893              	.LBI3140:
 1894              		.loc 6 76 5 view .LVU504
 1895              		.loc 6 76 5 is_stmt 0 view .LVU505
 1896              	.LBE3140:
 1897              	.LBB3141:
 1898              	.LBI3141:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1899              		.loc 2 301 42 is_stmt 1 view .LVU506
 1900              	.LBB3142:
 1901              	.LBI3142:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 1902              		.loc 2 116 2 view .LVU507
 1903              	.LBB3143:
 1904              	.LBB3144:
 1905              	.LBI3144:
 1906              		.loc 6 76 5 view .LVU508
 1907              		.loc 6 76 5 is_stmt 0 view .LVU509
 1908              	.LBE3144:
 1909              	.LBB3145:
 1910              	.LBI3145:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 1911              		.loc 2 204 6 is_stmt 1 view .LVU510
 1912              	.LBB3146:
 1913              	.LBB3147:
 1914              	.LBI3147:
 1915              		.loc 6 76 5 view .LVU511
 1916              		.loc 6 76 5 is_stmt 0 view .LVU512
 1917              	.LBE3147:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1918              		.loc 2 205 47 view .LVU513
 1919 0072 D0F834E0 		ldr	lr, [r0, #52]	@ float
 1920              	.LVL119:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 1921              		.loc 2 205 47 view .LVU514
 1922              	.LBE3146:
 1923              	.LBE3145:
ARM GAS  /tmp/ccIBY9uK.s 			page 121


 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 1924              		.loc 2 118 19 view .LVU515
 1925 0076 0122     		movs	r2, #1
 1926              	.LVL120:
 1927              	.L82:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 1928              		.loc 2 118 19 view .LVU516
 1929              	.LBE3143:
 1930              	.LBE3142:
 1931              	.LBE3141:
 1932              	.LBE3139:
 1933              	.LBE3137:
 1934              	.LBE3136:
 1935              	.LBE3133:
 1936              	.LBE3129:
 1937              	.LBE3128:
 1938              	.LBB3214:
 1939              	.LBB3215:
 1940              	.LBB3216:
 1941              	.LBB3217:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 1942              		.loc 10 1566 17 view .LVU517
 1943 0078 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1944              	.LBE3217:
 1945              	.LBE3216:
 1946              	.LBE3215:
 1947              	.LBE3214:
 1948              		.loc 1 197 37 view .LVU518
 1949 007c C0F864E0 		str	lr, [r0, #100]	@ float
 1950              	.LBB3288:
 1951              	.LBB3252:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 1952              		.loc 11 138 9 view .LVU519
 1953 0080 022B     		cmp	r3, #2
 1954              	.LBE3252:
 1955              	.LBE3288:
 1956              		.loc 1 197 37 view .LVU520
 1957 0082 80F86820 		strb	r2, [r0, #104]
 198:Src/foc.cpp   ****         phase_vel_ = phase_vel_src_.present();
 1958              		.loc 1 198 9 is_stmt 1 view .LVU521
 1959              	.LVL121:
 1960              	.LBB3289:
 1961              	.LBI3214:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 1962              		.loc 11 137 22 view .LVU522
 1963              	.LBB3253:
 1964              	.LBB3219:
 1965              	.LBI3216:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1966              		.loc 10 1562 24 view .LVU523
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 1967              		.loc 10 1562 24 is_stmt 0 view .LVU524
 1968              	.LBE3219:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 1969              		.loc 11 138 9 view .LVU525
 1970 0086 43D0     		beq	.L124
 1971              	.LVL122:
ARM GAS  /tmp/ccIBY9uK.s 			page 122


 1972              	.L84:
 1973              	.LBB3220:
 1974              		.loc 11 141 16 view .LVU526
 1975 0088 012B     		cmp	r3, #1
 1976 008a 68D0     		beq	.L125
 1977              	.LVL123:
 1978              	.LBB3221:
 1979              	.LBI3221:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1980              		.loc 10 1652 5 is_stmt 1 view .LVU527
 1981              	.LBB3222:
 1982              		.loc 10 1656 7 is_stmt 0 view .LVU528
 1983 008c 002B     		cmp	r3, #0
 1984 008e 40F08B80 		bne	.L79
 1985              	.LVL124:
 1986              		.loc 10 1656 7 view .LVU529
 1987              	.LBE3222:
 1988              	.LBE3221:
 1989              	.LBB3223:
 1990              	.LBI3223:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1991              		.loc 2 701 2 is_stmt 1 view .LVU530
 1992              	.LBB3224:
 1993              	.LBB3225:
 1994              	.LBI3225:
 1995              		.loc 6 76 5 view .LVU531
 1996              		.loc 6 76 5 is_stmt 0 view .LVU532
 1997              	.LBE3225:
 1998              	.LBB3226:
 1999              	.LBI3226:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2000              		.loc 2 608 28 is_stmt 1 view .LVU533
 2001              	.LBB3227:
 2002              	.LBI3227:
 2003              		.loc 6 76 5 view .LVU534
 2004              		.loc 6 76 5 is_stmt 0 view .LVU535
 2005              	.LBE3227:
 2006              	.LBB3228:
 2007              	.LBI3228:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2008              		.loc 2 301 42 is_stmt 1 view .LVU536
 2009              	.LBB3229:
 2010              	.LBI3229:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2011              		.loc 2 116 2 view .LVU537
 2012              	.LBB3230:
 2013              	.LBB3231:
 2014              	.LBI3231:
 2015              		.loc 6 76 5 view .LVU538
 2016              		.loc 6 76 5 is_stmt 0 view .LVU539
 2017              	.LBE3231:
 2018              	.LBB3232:
 2019              	.LBI3232:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2020              		.loc 2 204 6 is_stmt 1 view .LVU540
 2021              	.LBB3233:
 2022              	.LBB3234:
ARM GAS  /tmp/ccIBY9uK.s 			page 123


 2023              	.LBI3234:
 2024              		.loc 6 76 5 view .LVU541
 2025              		.loc 6 76 5 is_stmt 0 view .LVU542
 2026              	.LBE3234:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2027              		.loc 2 205 47 view .LVU543
 2028 0092 D0ED0F7A 		vldr.32	s15, [r0, #60]
 2029              	.LVL125:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2030              		.loc 2 205 47 view .LVU544
 2031              	.LBE3233:
 2032              	.LBE3232:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2033              		.loc 2 118 19 view .LVU545
 2034 0096 0123     		movs	r3, #1
 2035              	.LVL126:
 2036              	.L85:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2037              		.loc 2 118 19 view .LVU546
 2038              	.LBE3230:
 2039              	.LBE3229:
 2040              	.LBE3228:
 2041              	.LBE3226:
 2042              	.LBE3224:
 2043              	.LBE3223:
 2044              	.LBE3220:
 2045              	.LBE3253:
 2046              	.LBE3289:
 2047              		.loc 1 198 45 view .LVU547
 2048 0098 C0ED1B7A 		vstr.32	s15, [r0, #108]
 2049 009c 80F87030 		strb	r3, [r0, #112]
 199:Src/foc.cpp   ****     }
 200:Src/foc.cpp   ****     cpu_exit_critical(mask);
 2050              		.loc 1 200 5 is_stmt 1 view .LVU548
 2051              	.LVL127:
 2052              	.LBB3290:
 2053              	.LBI3290:
  69:Inc/low_level.h **** }
  70:Inc/low_level.h **** 
  71:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
 2054              		.loc 8 71 13 view .LVU549
 2055              	.LBE3290:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2056              		.loc 8 72 5 view .LVU550
 2057              	.LBB3301:
 2058              	.LBB3291:
 2059              	.LBI3291:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
ARM GAS  /tmp/ccIBY9uK.s 			page 124


 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 2060              		.loc 9 479 27 view .LVU551
 2061              	.LBB3292:
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 2062              		.loc 9 481 3 view .LVU552
 2063              		.syntax unified
 2064              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2065 00a0 8CF31088 		MSR primask, ip
 2066              	@ 0 "" 2
 2067              	.LVL128:
 2068              		.loc 9 481 3 is_stmt 0 view .LVU553
 2069              		.thumb
 2070              		.syntax unified
 2071              	.LBE3292:
 2072              	.LBE3291:
 2073              	.LBE3301:
 201:Src/foc.cpp   **** }
 2074              		.loc 1 201 1 view .LVU554
 2075 00a4 08BD     		pop	{r3, pc}
 2076              	.LVL129:
 2077              	.L117:
 2078              	.LBB3302:
 2079              	.LBB2958:
 2080              	.LBI2958:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2081              		.loc 11 137 22 is_stmt 1 view .LVU555
 2082              	.LBB2959:
 142:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 2083              		.loc 11 142 16 is_stmt 0 view .LVU556
 2084 00a6 C269     		ldr	r2, [r0, #28]
 2085              	.LVL130:
 143:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 2086              		.loc 11 143 58 view .LVU557
 2087 00a8 002A     		cmp	r2, #0
 2088 00aa 45D0     		beq	.L68
 2089              	.LVL131:
 2090              	.LBB2960:
 2091              	.LBI2960:
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&
ARM GAS  /tmp/ccIBY9uK.s 			page 125


 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&&
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&&
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) const&
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) &&
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void reset() noexcept { this->_M_reset(); }
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
ARM GAS  /tmp/ccIBY9uK.s 			page 126


 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __optional_relop_t =
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons between optional values.
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
ARM GAS  /tmp/ccIBY9uK.s 			page 127


1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with nullopt.
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr strong_ordering
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) <=> false; }
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #else
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
ARM GAS  /tmp/ccIBY9uK.s 			page 128


1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif // three-way-comparison
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with value type.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs == __rhs; }
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs == *__rhs; }
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs < *__rhs; }
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
ARM GAS  /tmp/ccIBY9uK.s 			page 129


1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs > __rhs; }
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Swap and creation functions.
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // 2748. swappable traits for optionals
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { __lhs.swap(__rhs); }
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr optional<decay_t<_Tp>>
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     make_optional(_Tp&& __t)
ARM GAS  /tmp/ccIBY9uK.s 			page 130


 2092              		.loc 2 1206 5 is_stmt 1 view .LVU558
 2093              	.LBB2961:
 2094              	.LBB2962:
 2095              	.LBI2962:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2096              		.loc 2 701 2 view .LVU559
 2097              	.LBB2963:
 2098              	.LBI2963:
 2099              		.loc 6 76 5 view .LVU560
 2100              		.loc 6 76 5 is_stmt 0 view .LVU561
 2101              	.LBE2963:
 2102              	.LBB2964:
 2103              	.LBI2964:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2104              		.loc 2 608 28 is_stmt 1 view .LVU562
 2105              	.LBB2965:
 2106              	.LBI2965:
 2107              		.loc 6 76 5 view .LVU563
 2108              		.loc 6 76 5 is_stmt 0 view .LVU564
 2109              	.LBE2965:
 2110              	.LBB2966:
 2111              	.LBI2966:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2112              		.loc 2 359 42 is_stmt 1 view .LVU565
 2113              	.LBB2967:
 2114              	.LBI2967:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2115              		.loc 2 116 2 view .LVU566
 2116              	.LBB2968:
 2117              	.LBI2968:
 2118              		.loc 6 76 5 view .LVU567
 2119              		.loc 6 76 5 is_stmt 0 view .LVU568
 2120              	.LBE2968:
 2121              	.LBB2969:
 2122              	.LBI2969:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2123              		.loc 2 204 6 is_stmt 1 view .LVU569
 2124              	.LBB2970:
 2125              	.LBB2971:
 2126              	.LBI2971:
 2127              		.loc 6 76 5 view .LVU570
 2128              		.loc 6 76 5 is_stmt 0 view .LVU571
 2129              	.LBE2971:
 2130              	.LBE2970:
 2131              	.LBE2969:
 2132              	.LBE2967:
 2133              	.LBE2966:
 2134              	.LBE2964:
 2135              	.LBE2962:
 2136              	.LBE2961:
 2137              	.LBE2960:
 2138              	.LBE2959:
 2139              	.LBE2958:
 2140              	.LBE3302:
 2141              	.LBB3303:
 2142              	.LBB3018:
 2143              	.LBB3013:
ARM GAS  /tmp/ccIBY9uK.s 			page 131


 2144              	.LBB3008:
 2145              	.LBB3003:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2146              		.loc 2 184 2 view .LVU572
 2147 00ac 90F85410 		ldrb	r1, [r0, #84]	@ zero_extendqisi2
 2148              	.LVL132:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2149              		.loc 2 184 2 view .LVU573
 2150              	.LBE3003:
 2151              	.LBE3008:
 2152              	.LBE3013:
 2153              	.LBE3018:
 2154              	.LBE3303:
 2155              	.LBB3304:
 2156              	.LBB2981:
 2157              	.LBB2980:
 2158              	.LBB2979:
 2159              	.LBB2978:
 2160              	.LBB2977:
 2161              	.LBB2976:
 2162              	.LBB2975:
 2163              	.LBB2974:
 2164              	.LBB2973:
 2165              	.LBB2972:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2166              		.loc 2 205 47 view .LVU574
 2167 00b0 1368     		ldr	r3, [r2]	@ float
 2168 00b2 5268     		ldr	r2, [r2, #4]	@ float
 2169              	.LVL133:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2170              		.loc 2 205 47 view .LVU575
 2171              	.LBE2972:
 2172              	.LBE2973:
 2173              	.LBE2974:
 2174              	.LBE2975:
 2175              	.LBE2976:
 2176              	.LBE2977:
 2177              	.LBE2978:
 2178              	.LBE2979:
 2179              	.LBE2980:
 2180              	.LBE2981:
 2181              	.LBE3304:
 2182              	.LBB3305:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 2183              		.loc 2 659 11 is_stmt 1 view .LVU576
 2184              	.LBB3019:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2185              		.loc 2 629 23 view .LVU577
 2186              	.LBB3014:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2187              		.loc 2 378 7 view .LVU578
 2188              	.LBB3009:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2189              		.loc 2 180 7 view .LVU579
 2190              	.LBB3004:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2191              		.loc 2 184 2 is_stmt 0 view .LVU580
ARM GAS  /tmp/ccIBY9uK.s 			page 132


 2192 00b4 0029     		cmp	r1, #0
 2193 00b6 BBD0     		beq	.L114
 2194              	.LVL134:
 2195              	.L118:
 2196              	.LBB2995:
 2197              	.LBI2995:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 2198              		.loc 3 401 7 is_stmt 1 view .LVU581
 2199              	.LBB2996:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 2200              		.loc 3 408 8 is_stmt 0 view .LVU582
 2201 00b8 C364     		str	r3, [r0, #76]	@ float
 2202              	.LBE2996:
 2203              	.LBE2995:
 2204              	.LBE3004:
 2205              	.LBE3009:
 2206              	.LBE3014:
 2207              	.LBE3019:
 2208              	.LBE3305:
 2209              	.LBB3306:
 2210              	.LBB3068:
 2211              	.LBB3042:
 2212              	.LBB3027:
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
 2213              		.loc 10 1568 45 view .LVU583
 2214 00ba 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
 2215              	.LBE3027:
 2216              	.LBE3042:
 2217              	.LBE3068:
 2218              	.LBE3306:
 2219              	.LBB3307:
 2220              	.LBB3020:
 2221              	.LBB3015:
 2222              	.LBB3010:
 2223              	.LBB3005:
 2224              	.LBB2998:
 2225              	.LBB2997:
 2226              		.loc 3 409 9 view .LVU584
 2227 00be 0265     		str	r2, [r0, #80]	@ float
 2228              	.LVL135:
 2229              		.loc 3 409 9 view .LVU585
 2230              	.LBE2997:
 2231              	.LBE2998:
 2232              	.LBE3005:
 2233              	.LBE3010:
 2234              	.LBE3015:
 2235              	.LBE3020:
 2236              	.LBE3307:
 196:Src/foc.cpp   ****         phase_ = phase_src_.present();
 2237              		.loc 1 196 9 is_stmt 1 view .LVU586
 2238              	.LBB3308:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2239              		.loc 11 137 22 view .LVU587
 2240              	.LBB3069:
 2241              	.LBB3043:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2242              		.loc 10 1562 24 view .LVU588
ARM GAS  /tmp/ccIBY9uK.s 			page 133


1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2243              		.loc 10 1562 24 is_stmt 0 view .LVU589
 2244              	.LBE3043:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2245              		.loc 11 138 9 view .LVU590
 2246 00c0 022B     		cmp	r3, #2
 2247 00c2 BED1     		bne	.L72
 2248              	.LVL136:
 2249              	.L119:
 2250              	.LBB3044:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2251              		.loc 11 139 28 view .LVU591
 2252 00c4 836A     		ldr	r3, [r0, #40]
 2253              	.LVL137:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 2254              		.loc 11 140 48 view .LVU592
 2255 00c6 002B     		cmp	r3, #0
 2256 00c8 41D0     		beq	.L76
 2257              	.LVL138:
 2258              	.LBB3045:
 2259              	.LBI3045:
  73:Inc/component.hpp ****         if (age_ == 0) {
 2260              		.loc 11 73 22 is_stmt 1 view .LVU593
 2261              	.LBB3046:
  74:Inc/component.hpp ****             return content_;
 2262              		.loc 11 74 9 is_stmt 0 view .LVU594
 2263 00ca 1A68     		ldr	r2, [r3]
 2264 00cc 002A     		cmp	r2, #0
 2265 00ce 3ED1     		bne	.L76
 2266              	.LVL139:
 2267              	.LBB3047:
 2268              	.LBI3047:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2269              		.loc 2 701 2 is_stmt 1 view .LVU595
 2270              	.LBB3048:
 2271              	.LBB3049:
 2272              	.LBI3049:
 2273              		.loc 6 76 5 view .LVU596
 2274              		.loc 6 76 5 is_stmt 0 view .LVU597
 2275              	.LBE3049:
 2276              	.LBB3050:
 2277              	.LBI3050:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2278              		.loc 2 608 28 is_stmt 1 view .LVU598
 2279              	.LBB3051:
 2280              	.LBI3051:
 2281              		.loc 6 76 5 view .LVU599
 2282              		.loc 6 76 5 is_stmt 0 view .LVU600
 2283              	.LBE3051:
 2284              	.LBB3052:
 2285              	.LBI3052:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2286              		.loc 2 359 42 is_stmt 1 view .LVU601
 2287              	.LBB3053:
 2288              	.LBI3053:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2289              		.loc 2 116 2 view .LVU602
ARM GAS  /tmp/ccIBY9uK.s 			page 134


 2290              	.LBB3054:
 2291              	.LBI3054:
 2292              		.loc 6 76 5 view .LVU603
 2293              		.loc 6 76 5 is_stmt 0 view .LVU604
 2294              	.LBE3054:
 2295              	.LBB3055:
 2296              	.LBI3055:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2297              		.loc 2 204 6 is_stmt 1 view .LVU605
 2298              	.LBB3056:
 2299              	.LBB3057:
 2300              	.LBI3057:
 2301              		.loc 6 76 5 view .LVU606
 2302              		.loc 6 76 5 is_stmt 0 view .LVU607
 2303              	.LBE3057:
 2304              	.LBE3056:
 2305              	.LBE3055:
 2306              	.LBE3053:
 2307              	.LBE3052:
 2308              	.LBE3050:
 2309              	.LBE3048:
 2310              	.LBE3047:
 2311              	.LBE3046:
 2312              	.LBE3045:
 2313              	.LBE3044:
 2314              	.LBE3069:
 2315              	.LBE3308:
 2316              	.LBB3309:
 2317              	.LBB3122:
 2318              	.LBB3116:
 2319              	.LBB3110:
 2320              	.LBB3104:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2321              		.loc 2 184 2 view .LVU608
 2322 00d0 90F86010 		ldrb	r1, [r0, #96]	@ zero_extendqisi2
 2323              	.LBE3104:
 2324              	.LBE3110:
 2325              	.LBE3116:
 2326              	.LBE3122:
 2327              	.LBE3309:
 2328              	.LBB3310:
 2329              	.LBB3070:
 2330              	.LBB3067:
 2331              	.LBB3066:
 2332              	.LBB3065:
 2333              	.LBB3064:
 2334              	.LBB3063:
 2335              	.LBB3062:
 2336              	.LBB3061:
 2337              	.LBB3060:
 2338              	.LBB3059:
 2339              	.LBB3058:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2340              		.loc 2 205 47 view .LVU609
 2341 00d4 5A68     		ldr	r2, [r3, #4]	@ float
 2342 00d6 9B68     		ldr	r3, [r3, #8]	@ float
 2343              	.LVL140:
ARM GAS  /tmp/ccIBY9uK.s 			page 135


 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2344              		.loc 2 205 47 view .LVU610
 2345              	.LBE3058:
 2346              	.LBE3059:
 2347              	.LBE3060:
 2348              	.LBE3061:
 2349              	.LBE3062:
 2350              	.LBE3063:
 2351              	.LBE3064:
 2352              	.LBE3065:
 2353              	.LBE3066:
 2354              	.LBE3067:
 2355              	.LBE3070:
 2356              	.LBE3310:
 2357              	.LBB3311:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 2358              		.loc 2 659 11 is_stmt 1 view .LVU611
 2359              	.LBB3123:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2360              		.loc 2 629 23 view .LVU612
 2361              	.LBB3117:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2362              		.loc 2 378 7 view .LVU613
 2363              	.LBB3111:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2364              		.loc 2 180 7 view .LVU614
 2365              	.LBB3105:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2366              		.loc 2 184 2 is_stmt 0 view .LVU615
 2367 00d8 0029     		cmp	r1, #0
 2368 00da BED1     		bne	.L89
 2369              	.LVL141:
 2370              	.L121:
 2371              	.LBB3094:
 2372              	.LBI3094:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 2373              		.loc 2 248 9 is_stmt 1 view .LVU616
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 2374              		.loc 2 248 9 is_stmt 0 view .LVU617
 2375              	.LBE3094:
 2376              	.LBE3105:
 2377              	.LBE3111:
 2378              	.LBE3117:
 2379              	.LBE3123:
 2380              	.LBE3311:
 2381              		.loc 4 175 3 is_stmt 1 view .LVU618
 2382              	.LBB3312:
 2383              	.LBB3124:
 2384              	.LBB3118:
 2385              	.LBB3112:
 2386              	.LBB3106:
 2387              	.LBB3098:
 2388              	.LBB3095:
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 2389              		.loc 2 251 11 is_stmt 0 view .LVU619
 2390 00dc C365     		str	r3, [r0, #92]	@ float
 2391              	.LBE3095:
ARM GAS  /tmp/ccIBY9uK.s 			page 136


 2392              	.LBE3098:
 2393              	.LBE3106:
 2394              	.LBE3112:
 2395              	.LBE3118:
 2396              	.LBE3124:
 2397              	.LBE3312:
 2398              	.LBB3313:
 2399              	.LBB3165:
 2400              	.LBB3162:
 2401              	.LBB3132:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2402              		.loc 10 1566 17 view .LVU620
 2403 00de 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 2404              	.LBE3132:
 2405              	.LBE3162:
 2406              	.LBE3165:
 2407              	.LBE3313:
 2408              	.LBB3314:
 2409              	.LBB3125:
 2410              	.LBB3119:
 2411              	.LBB3113:
 2412              	.LBB3107:
 2413              	.LBB3099:
 2414              	.LBB3096:
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 2415              		.loc 2 251 11 view .LVU621
 2416 00e2 8265     		str	r2, [r0, #88]	@ float
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 2417              		.loc 2 253 28 view .LVU622
 2418 00e4 0121     		movs	r1, #1
 2419              	.LBE3096:
 2420              	.LBE3099:
 2421              	.LBE3107:
 2422              	.LBE3113:
 2423              	.LBE3119:
 2424              	.LBE3125:
 2425              	.LBE3314:
 2426              	.LBB3315:
 2427              	.LBB3166:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2428              		.loc 11 138 9 view .LVU623
 2429 00e6 022B     		cmp	r3, #2
 2430              	.LBE3166:
 2431              	.LBE3315:
 2432              	.LBB3316:
 2433              	.LBB3126:
 2434              	.LBB3120:
 2435              	.LBB3114:
 2436              	.LBB3108:
 2437              	.LBB3100:
 2438              	.LBB3097:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 2439              		.loc 2 253 28 view .LVU624
 2440 00e8 80F86010 		strb	r1, [r0, #96]
 2441              	.LVL142:
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 2442              		.loc 2 253 28 view .LVU625
ARM GAS  /tmp/ccIBY9uK.s 			page 137


 2443              	.LBE3097:
 2444              	.LBE3100:
 2445              	.LBE3108:
 2446              	.LBE3114:
 2447              	.LBE3120:
 2448              	.LBE3126:
 2449              	.LBE3316:
 197:Src/foc.cpp   ****         phase_vel_ = phase_vel_src_.present();
 2450              		.loc 1 197 9 is_stmt 1 view .LVU626
 2451              	.LBB3317:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2452              		.loc 11 137 22 view .LVU627
 2453              	.LBB3167:
 2454              	.LBB3163:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2455              		.loc 10 1562 24 view .LVU628
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2456              		.loc 10 1562 24 is_stmt 0 view .LVU629
 2457              	.LBE3163:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2458              		.loc 11 138 9 view .LVU630
 2459 00ec BBD1     		bne	.L81
 2460              	.LVL143:
 2461              	.L122:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2462              		.loc 11 138 9 view .LVU631
 2463              	.LBE3167:
 2464              	.LBB3168:
 2465              	.LBI3168:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2466              		.loc 11 137 22 is_stmt 1 view .LVU632
 2467              	.LBB3169:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2468              		.loc 11 139 28 is_stmt 0 view .LVU633
 2469 00ee 426B     		ldr	r2, [r0, #52]
 2470              	.LVL144:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 2471              		.loc 11 140 48 view .LVU634
 2472 00f0 002A     		cmp	r2, #0
 2473 00f2 C1D0     		beq	.L82
 2474              	.LVL145:
 2475              	.LBB3170:
 2476              	.LBI3170:
  73:Inc/component.hpp ****         if (age_ == 0) {
 2477              		.loc 11 73 22 is_stmt 1 view .LVU635
 2478              	.LBB3171:
  74:Inc/component.hpp ****             return content_;
 2479              		.loc 11 74 9 is_stmt 0 view .LVU636
 2480 00f4 1368     		ldr	r3, [r2]
 2481 00f6 002B     		cmp	r3, #0
 2482 00f8 4AD1     		bne	.L95
 2483              	.LVL146:
 2484              	.LBB3172:
 2485              	.LBI3172:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2486              		.loc 2 701 2 is_stmt 1 view .LVU637
 2487              	.LBB3173:
ARM GAS  /tmp/ccIBY9uK.s 			page 138


 2488              	.LBB3174:
 2489              	.LBI3174:
 2490              		.loc 6 76 5 view .LVU638
 2491              		.loc 6 76 5 is_stmt 0 view .LVU639
 2492              	.LBE3174:
 2493              	.LBB3175:
 2494              	.LBI3175:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2495              		.loc 2 608 28 is_stmt 1 view .LVU640
 2496              	.LBB3176:
 2497              	.LBI3176:
 2498              		.loc 6 76 5 view .LVU641
 2499              		.loc 6 76 5 is_stmt 0 view .LVU642
 2500              	.LBE3176:
 2501              	.LBB3177:
 2502              	.LBI3177:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2503              		.loc 2 301 42 is_stmt 1 view .LVU643
 2504              	.LBB3178:
 2505              	.LBI3178:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2506              		.loc 2 116 2 view .LVU644
 2507              	.LBB3179:
 2508              	.LBB3180:
 2509              	.LBI3180:
 2510              		.loc 6 76 5 view .LVU645
 2511              		.loc 6 76 5 is_stmt 0 view .LVU646
 2512              	.LBE3180:
 2513              	.LBB3181:
 2514              	.LBI3181:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2515              		.loc 2 204 6 is_stmt 1 view .LVU647
 2516              	.LBB3182:
 2517              	.LBB3183:
 2518              	.LBI3183:
 2519              		.loc 6 76 5 view .LVU648
 2520              		.loc 6 76 5 is_stmt 0 view .LVU649
 2521              	.LBE3183:
 2522              	.LBE3182:
 2523              	.LBE3181:
 2524              	.LBE3179:
 2525              	.LBE3178:
 2526              	.LBE3177:
 2527              	.LBE3175:
 2528              	.LBE3173:
 2529              	.LBE3172:
 2530              	.LBE3171:
 2531              	.LBE3170:
 2532              	.LBE3169:
 2533              	.LBE3168:
 2534              	.LBE3317:
 2535              	.LBB3318:
 2536              	.LBB3254:
 2537              	.LBB3249:
 2538              	.LBB3218:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2539              		.loc 10 1566 17 view .LVU650
ARM GAS  /tmp/ccIBY9uK.s 			page 139


 2540 00fa 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2541              	.LBE3218:
 2542              	.LBE3249:
 2543              	.LBE3254:
 2544              	.LBE3318:
 2545              	.LBB3319:
 2546              	.LBB3210:
 2547              	.LBB3207:
 2548              	.LBB3200:
 2549              	.LBB3198:
 2550              	.LBB3196:
 2551              	.LBB3194:
 2552              	.LBB3192:
 2553              	.LBB3190:
 2554              	.LBB3188:
 2555              	.LBB3186:
 2556              	.LBB3185:
 2557              	.LBB3184:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2558              		.loc 2 205 47 view .LVU651
 2559 00fe D2F804E0 		ldr	lr, [r2, #4]	@ float
 2560              	.LVL147:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2561              		.loc 2 205 47 view .LVU652
 2562              	.LBE3184:
 2563              	.LBE3185:
 2564              	.LBE3186:
 2565              	.LBE3188:
 2566              	.LBE3190:
 2567              	.LBE3192:
 2568              	.LBE3194:
 2569              	.LBE3196:
 2570              	.LBE3198:
 2571              	.LBE3200:
 2572              	.LBE3207:
 2573              	.LBE3210:
 2574              	.LBE3319:
 197:Src/foc.cpp   ****         phase_vel_ = phase_vel_src_.present();
 2575              		.loc 1 197 37 view .LVU653
 2576 0102 C0F864E0 		str	lr, [r0, #100]	@ float
 2577              	.LBB3320:
 2578              	.LBB3211:
 2579              	.LBB3208:
 2580              	.LBB3201:
 2581              	.LBB3199:
 2582              	.LBB3197:
 2583              	.LBB3195:
 2584              	.LBB3193:
 2585              	.LBB3191:
 2586              	.LBB3189:
 2587              	.LBB3187:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2588              		.loc 2 118 19 view .LVU654
 2589 0106 0122     		movs	r2, #1
 2590              	.LVL148:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2591              		.loc 2 118 19 view .LVU655
ARM GAS  /tmp/ccIBY9uK.s 			page 140


 2592              	.LBE3187:
 2593              	.LBE3189:
 2594              	.LBE3191:
 2595              	.LBE3193:
 2596              	.LBE3195:
 2597              	.LBE3197:
 2598              	.LBE3199:
 2599              	.LBE3201:
 2600              	.LBE3208:
 2601              	.LBE3211:
 2602              	.LBE3320:
 2603              	.LBB3321:
 2604              	.LBB3255:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2605              		.loc 11 138 9 view .LVU656
 2606 0108 022B     		cmp	r3, #2
 2607              	.LBE3255:
 2608              	.LBE3321:
 197:Src/foc.cpp   ****         phase_vel_ = phase_vel_src_.present();
 2609              		.loc 1 197 37 view .LVU657
 2610 010a 80F86820 		strb	r2, [r0, #104]
 198:Src/foc.cpp   ****     }
 2611              		.loc 1 198 9 is_stmt 1 view .LVU658
 2612              	.LVL149:
 2613              	.LBB3322:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2614              		.loc 11 137 22 view .LVU659
 2615              	.LBB3256:
 2616              	.LBB3250:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2617              		.loc 10 1562 24 view .LVU660
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 2618              		.loc 10 1562 24 is_stmt 0 view .LVU661
 2619              	.LBE3250:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2620              		.loc 11 138 9 view .LVU662
 2621 010e BBD1     		bne	.L84
 2622              	.LVL150:
 2623              	.L124:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2624              		.loc 11 138 9 view .LVU663
 2625              	.LBE3256:
 2626              	.LBB3257:
 2627              	.LBI3257:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2628              		.loc 11 137 22 is_stmt 1 view .LVU664
 2629              	.LBB3258:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2630              		.loc 11 139 28 is_stmt 0 view .LVU665
 2631 0110 C36B     		ldr	r3, [r0, #60]
 2632              	.LVL151:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 2633              		.loc 11 140 48 view .LVU666
 2634 0112 002B     		cmp	r3, #0
 2635 0114 C0D0     		beq	.L85
 2636              	.LVL152:
 2637              	.LBB3259:
ARM GAS  /tmp/ccIBY9uK.s 			page 141


 2638              	.LBI3259:
  73:Inc/component.hpp ****         if (age_ == 0) {
 2639              		.loc 11 73 22 is_stmt 1 view .LVU667
 2640              	.LBB3260:
  74:Inc/component.hpp ****             return content_;
 2641              		.loc 11 74 9 is_stmt 0 view .LVU668
 2642 0116 1A68     		ldr	r2, [r3]
 2643 0118 002A     		cmp	r2, #0
 2644 011a 3BD1     		bne	.L98
 2645              	.LVL153:
 2646              	.LBB3261:
 2647              	.LBI3261:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2648              		.loc 2 701 2 is_stmt 1 view .LVU669
 2649              	.LBB3262:
 2650              	.LBB3263:
 2651              	.LBI3263:
 2652              		.loc 6 76 5 view .LVU670
 2653              		.loc 6 76 5 is_stmt 0 view .LVU671
 2654              	.LBE3263:
 2655              	.LBB3264:
 2656              	.LBI3264:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2657              		.loc 2 608 28 is_stmt 1 view .LVU672
 2658              	.LBB3265:
 2659              	.LBI3265:
 2660              		.loc 6 76 5 view .LVU673
 2661              		.loc 6 76 5 is_stmt 0 view .LVU674
 2662              	.LBE3265:
 2663              	.LBB3266:
 2664              	.LBI3266:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2665              		.loc 2 301 42 is_stmt 1 view .LVU675
 2666              	.LBB3267:
 2667              	.LBI3267:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2668              		.loc 2 116 2 view .LVU676
 2669              	.LBB3268:
 2670              	.LBB3269:
 2671              	.LBI3269:
 2672              		.loc 6 76 5 view .LVU677
 2673              		.loc 6 76 5 is_stmt 0 view .LVU678
 2674              	.LBE3269:
 2675              	.LBB3270:
 2676              	.LBI3270:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2677              		.loc 2 204 6 is_stmt 1 view .LVU679
 2678              	.LBB3271:
 2679              	.LBB3272:
 2680              	.LBI3272:
 2681              		.loc 6 76 5 view .LVU680
 2682              		.loc 6 76 5 is_stmt 0 view .LVU681
 2683              	.LBE3272:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2684              		.loc 2 205 47 view .LVU682
 2685 011c D3ED017A 		vldr.32	s15, [r3, #4]
 2686              	.LVL154:
ARM GAS  /tmp/ccIBY9uK.s 			page 142


 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2687              		.loc 2 205 47 view .LVU683
 2688              	.LBE3271:
 2689              	.LBE3270:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2690              		.loc 2 118 19 view .LVU684
 2691 0120 0123     		movs	r3, #1
 2692              	.LVL155:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 2693              		.loc 2 118 19 view .LVU685
 2694              	.LBE3268:
 2695              	.LBE3267:
 2696              	.LBE3266:
 2697              	.LBE3264:
 2698              	.LBE3262:
 2699              	.LBE3261:
 2700              	.LBE3260:
 2701              	.LBE3259:
 2702              	.LBE3258:
 2703              	.LBE3257:
 2704              	.LBE3322:
 198:Src/foc.cpp   ****     }
 2705              		.loc 1 198 45 view .LVU686
 2706 0122 C0ED1B7A 		vstr.32	s15, [r0, #108]
 2707 0126 80F87030 		strb	r3, [r0, #112]
 200:Src/foc.cpp   **** }
 2708              		.loc 1 200 5 is_stmt 1 view .LVU687
 2709              	.LVL156:
 2710              	.LBB3323:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2711              		.loc 8 71 13 view .LVU688
 2712              	.LBE3323:
 2713              		.loc 8 72 5 view .LVU689
 2714              	.LBB3324:
 2715              	.LBB3297:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2716              		.loc 9 479 27 view .LVU690
 2717              	.LBB3293:
 2718              		.loc 9 481 3 view .LVU691
 2719              		.syntax unified
 2720              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2721 012a 8CF31088 		MSR primask, ip
 2722              	@ 0 "" 2
 2723              	.LVL157:
 2724              		.loc 9 481 3 is_stmt 0 view .LVU692
 2725              		.thumb
 2726              		.syntax unified
 2727              	.LBE3293:
 2728              	.LBE3297:
 2729              	.LBE3324:
 2730              		.loc 1 201 1 view .LVU693
 2731 012e 08BD     		pop	{r3, pc}
 2732              	.LVL158:
 2733              	.L116:
 2734              	.LBB3325:
 2735              	.LBB2982:
 2736              	.LBB2938:
ARM GAS  /tmp/ccIBY9uK.s 			page 143


 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2737              		.loc 11 139 28 view .LVU694
 2738 0130 C269     		ldr	r2, [r0, #28]
 2739              	.LVL159:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 2740              		.loc 11 140 48 view .LVU695
 2741 0132 0AB1     		cbz	r2, .L68
 2742              	.LVL160:
 2743              	.LBB2939:
 2744              	.LBI2939:
  73:Inc/component.hpp ****         if (age_ == 0) {
 2745              		.loc 11 73 22 is_stmt 1 view .LVU696
 2746              	.LBB2940:
  74:Inc/component.hpp ****             return content_;
 2747              		.loc 11 74 9 is_stmt 0 view .LVU697
 2748 0134 1368     		ldr	r3, [r2]
 2749 0136 43B3     		cbz	r3, .L126
 2750              	.LVL161:
 2751              	.L68:
  74:Inc/component.hpp ****             return content_;
 2752              		.loc 11 74 9 view .LVU698
 2753              	.LBE2940:
 2754              	.LBE2939:
 2755              	.LBE2938:
 2756              	.LBE2982:
 2757              	.LBE3325:
 2758              	.LBB3326:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 2759              		.loc 2 659 11 is_stmt 1 view .LVU699
 2760              	.LBB3021:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2761              		.loc 2 629 23 view .LVU700
 2762              	.LBB3016:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2763              		.loc 2 378 7 view .LVU701
 2764              	.LBB3011:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2765              		.loc 2 180 7 view .LVU702
 2766              	.LBB3006:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2767              		.loc 2 184 2 is_stmt 0 view .LVU703
 2768 0138 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 2769 013c 002B     		cmp	r3, #0
 2770 013e 3FF47CAF 		beq	.L87
 2771              	.LVL162:
 2772              	.LBB2999:
 2773              	.LBB3000:
 2774              	.LBI3000:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 2775              		.loc 2 257 7 is_stmt 1 view .LVU704
 2776              	.LBB3001:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 2777              		.loc 2 259 13 is_stmt 0 view .LVU705
 2778 0142 0023     		movs	r3, #0
 2779 0144 80F85430 		strb	r3, [r0, #84]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2780              		.loc 2 261 7 view .LVU706
ARM GAS  /tmp/ccIBY9uK.s 			page 144


 2781 0148 77E7     		b	.L87
 2782              	.LVL163:
 2783              	.L120:
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2784              		.loc 2 261 7 view .LVU707
 2785              	.LBE3001:
 2786              	.LBE3000:
 2787              	.LBE2999:
 2788              	.LBE3006:
 2789              	.LBE3011:
 2790              	.LBE3016:
 2791              	.LBE3021:
 2792              	.LBE3326:
 2793              	.LBB3327:
 2794              	.LBB3071:
 2795              	.LBI3071:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 2796              		.loc 11 137 22 is_stmt 1 view .LVU708
 2797              	.LBB3072:
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 2798              		.loc 11 142 16 is_stmt 0 view .LVU709
 2799 014a 836A     		ldr	r3, [r0, #40]
 2800              	.LVL164:
 2801              		.loc 11 143 58 view .LVU710
 2802 014c D3B9     		cbnz	r3, .L127
 2803              	.LVL165:
 2804              	.L76:
 2805              		.loc 11 143 58 view .LVU711
 2806              	.LBE3072:
 2807              	.LBE3071:
 2808              	.LBE3327:
 2809              	.LBB3328:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 2810              		.loc 2 659 11 is_stmt 1 view .LVU712
 2811              	.LBB3127:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2812              		.loc 2 629 23 view .LVU713
 2813              	.LBB3121:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2814              		.loc 2 378 7 view .LVU714
 2815              	.LBB3115:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 2816              		.loc 2 180 7 view .LVU715
 2817              	.LBB3109:
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 2818              		.loc 2 184 2 is_stmt 0 view .LVU716
 2819 014e 90F86030 		ldrb	r3, [r0, #96]	@ zero_extendqisi2
 2820 0152 002B     		cmp	r3, #0
 2821 0154 83D0     		beq	.L80
 2822              	.LVL166:
 2823              	.LBB3101:
 2824              	.LBB3102:
 2825              	.LBI3102:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 2826              		.loc 2 257 7 is_stmt 1 view .LVU717
 2827              	.LBB3103:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
ARM GAS  /tmp/ccIBY9uK.s 			page 145


 2828              		.loc 2 259 13 is_stmt 0 view .LVU718
 2829 0156 0023     		movs	r3, #0
 2830 0158 80F86030 		strb	r3, [r0, #96]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2831              		.loc 2 261 7 view .LVU719
 2832 015c 7FE7     		b	.L80
 2833              	.LVL167:
 2834              	.L125:
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2835              		.loc 2 261 7 view .LVU720
 2836              	.LBE3103:
 2837              	.LBE3102:
 2838              	.LBE3101:
 2839              	.LBE3109:
 2840              	.LBE3115:
 2841              	.LBE3121:
 2842              	.LBE3127:
 2843              	.LBE3328:
 2844              	.LBB3329:
 2845              	.LBB3285:
 2846              	.LBB3251:
 2847              	.LBB3235:
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 2848              		.loc 11 142 16 view .LVU721
 2849 015e C26B     		ldr	r2, [r0, #60]
 2850              	.LVL168:
 2851              		.loc 11 143 58 view .LVU722
 2852 0160 02B3     		cbz	r2, .L99
 2853              	.LVL169:
 2854              	.LBB3236:
 2855              	.LBI3236:
 2856              		.loc 2 1206 5 is_stmt 1 view .LVU723
 2857              	.LBB3237:
 2858              	.LBB3238:
 2859              	.LBI3238:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2860              		.loc 2 701 2 view .LVU724
 2861              	.LBB3239:
 2862              	.LBI3239:
 2863              		.loc 6 76 5 view .LVU725
 2864              		.loc 6 76 5 is_stmt 0 view .LVU726
 2865              	.LBE3239:
 2866              	.LBB3240:
 2867              	.LBI3240:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2868              		.loc 2 608 28 is_stmt 1 view .LVU727
 2869              	.LBB3241:
 2870              	.LBI3241:
 2871              		.loc 6 76 5 view .LVU728
 2872              		.loc 6 76 5 is_stmt 0 view .LVU729
 2873              	.LBE3241:
 2874              	.LBB3242:
 2875              	.LBI3242:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2876              		.loc 2 301 42 is_stmt 1 view .LVU730
 2877              	.LBB3243:
 2878              	.LBI3243:
ARM GAS  /tmp/ccIBY9uK.s 			page 146


 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2879              		.loc 2 116 2 view .LVU731
 2880              	.LBB3244:
 2881              	.LBB3245:
 2882              	.LBI3245:
 2883              		.loc 6 76 5 view .LVU732
 2884              		.loc 6 76 5 is_stmt 0 view .LVU733
 2885              	.LBE3245:
 2886              	.LBB3246:
 2887              	.LBI3246:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2888              		.loc 2 204 6 is_stmt 1 view .LVU734
 2889              	.LBB3247:
 2890              	.LBB3248:
 2891              	.LBI3248:
 2892              		.loc 6 76 5 view .LVU735
 2893              		.loc 6 76 5 is_stmt 0 view .LVU736
 2894              	.LBE3248:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2895              		.loc 2 205 47 view .LVU737
 2896 0162 D2ED007A 		vldr.32	s15, [r2]
 2897              	.LVL170:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 2898              		.loc 2 205 47 view .LVU738
 2899              	.LBE3247:
 2900              	.LBE3246:
 2901              	.LBE3244:
 2902              	.LBE3243:
 2903              	.LBE3242:
 2904              	.LBE3240:
 2905              	.LBE3238:
 2906              	.LBE3237:
 2907              	.LBE3236:
 2908              	.LBE3235:
 2909              	.LBE3251:
 2910              	.LBE3285:
 2911              	.LBE3329:
 198:Src/foc.cpp   ****     }
 2912              		.loc 1 198 45 view .LVU739
 2913 0166 80F87030 		strb	r3, [r0, #112]
 200:Src/foc.cpp   **** }
 2914              		.loc 1 200 5 is_stmt 1 view .LVU740
 2915              	.LVL171:
 2916              	.LBB3330:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2917              		.loc 8 71 13 view .LVU741
 2918              	.LBE3330:
 2919              		.loc 8 72 5 view .LVU742
 2920              	.LBB3331:
 2921              	.LBB3298:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2922              		.loc 9 479 27 view .LVU743
 2923              	.LBB3294:
 2924              		.loc 9 481 3 view .LVU744
 2925              	.LBE3294:
 2926              	.LBE3298:
 2927              	.LBE3331:
ARM GAS  /tmp/ccIBY9uK.s 			page 147


 198:Src/foc.cpp   ****     }
 2928              		.loc 1 198 45 is_stmt 0 view .LVU745
 2929 016a C0ED1B7A 		vstr.32	s15, [r0, #108]
 2930              	.LBB3332:
 2931              	.LBB3299:
 2932              	.LBB3295:
 2933              		.loc 9 481 3 view .LVU746
 2934              		.syntax unified
 2935              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2936 016e 8CF31088 		MSR primask, ip
 2937              	@ 0 "" 2
 2938              	.LVL172:
 2939              		.loc 9 481 3 view .LVU747
 2940              		.thumb
 2941              		.syntax unified
 2942              	.LBE3295:
 2943              	.LBE3299:
 2944              	.LBE3332:
 2945              		.loc 1 201 1 view .LVU748
 2946 0172 08BD     		pop	{r3, pc}
 2947              	.L123:
 2948              	.LBB3333:
 2949              	.LBB3212:
 2950              	.LBB3164:
 2951              	.LBB3148:
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 2952              		.loc 11 142 16 view .LVU749
 2953 0174 426B     		ldr	r2, [r0, #52]
 2954              	.LVL173:
 2955              		.loc 11 143 58 view .LVU750
 2956 0176 002A     		cmp	r2, #0
 2957 0178 3FF47EAF 		beq	.L82
 2958              	.LVL174:
 2959              	.LBB3149:
 2960              	.LBI3149:
 2961              		.loc 2 1206 5 is_stmt 1 view .LVU751
 2962              	.LBB3150:
 2963              	.LBB3151:
 2964              	.LBI3151:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2965              		.loc 2 701 2 view .LVU752
 2966              	.LBB3152:
 2967              	.LBI3152:
 2968              		.loc 6 76 5 view .LVU753
 2969              		.loc 6 76 5 is_stmt 0 view .LVU754
 2970              	.LBE3152:
 2971              	.LBB3153:
 2972              	.LBI3153:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2973              		.loc 2 608 28 is_stmt 1 view .LVU755
 2974              	.LBB3154:
 2975              	.LBI3154:
 2976              		.loc 6 76 5 view .LVU756
 2977              		.loc 6 76 5 is_stmt 0 view .LVU757
 2978              	.LBE3154:
 2979              	.LBB3155:
 2980              	.LBI3155:
ARM GAS  /tmp/ccIBY9uK.s 			page 148


 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2981              		.loc 2 301 42 is_stmt 1 view .LVU758
 2982              	.LBB3156:
 2983              	.LBI3156:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2984              		.loc 2 116 2 view .LVU759
 2985              	.LBB3157:
 2986              	.LBB3158:
 2987              	.LBI3158:
 2988              		.loc 6 76 5 view .LVU760
 2989              		.loc 6 76 5 is_stmt 0 view .LVU761
 2990              	.LBE3158:
 2991              	.LBB3159:
 2992              	.LBI3159:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2993              		.loc 2 204 6 is_stmt 1 view .LVU762
 2994              	.LBB3160:
 2995              	.LBB3161:
 2996              	.LBI3161:
 2997              		.loc 6 76 5 view .LVU763
 2998              		.loc 6 76 5 is_stmt 0 view .LVU764
 2999              	.LBE3161:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3000              		.loc 2 205 47 view .LVU765
 3001 017c D2F800E0 		ldr	lr, [r2]	@ float
 3002              	.LVL175:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3003              		.loc 2 205 47 view .LVU766
 3004              	.LBE3160:
 3005              	.LBE3159:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 3006              		.loc 2 118 19 view .LVU767
 3007 0180 1A46     		mov	r2, r3
 3008              	.LVL176:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 3009              		.loc 2 118 19 view .LVU768
 3010              	.LBE3157:
 3011              	.LBE3156:
 3012              	.LBE3155:
 3013              	.LBE3153:
 3014              	.LBE3151:
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 3015              		.loc 2 1207 62 view .LVU769
 3016 0182 79E7     		b	.L82
 3017              	.LVL177:
 3018              	.L127:
 3019              		.loc 2 1207 62 view .LVU770
 3020              	.LBE3150:
 3021              	.LBE3149:
 3022              	.LBE3148:
 3023              	.LBE3164:
 3024              	.LBE3212:
 3025              	.LBE3333:
 3026              	.LBB3334:
 3027              	.LBB3086:
 3028              	.LBB3085:
 3029              	.LBB3073:
ARM GAS  /tmp/ccIBY9uK.s 			page 149


 3030              	.LBI3073:
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 3031              		.loc 2 1206 5 is_stmt 1 view .LVU771
 3032              	.LBB3074:
 3033              	.LBB3075:
 3034              	.LBI3075:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3035              		.loc 2 701 2 view .LVU772
 3036              	.LBB3076:
 3037              	.LBI3076:
 3038              		.loc 6 76 5 view .LVU773
 3039              		.loc 6 76 5 is_stmt 0 view .LVU774
 3040              	.LBE3076:
 3041              	.LBB3077:
 3042              	.LBI3077:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 3043              		.loc 2 608 28 is_stmt 1 view .LVU775
 3044              	.LBB3078:
 3045              	.LBI3078:
 3046              		.loc 6 76 5 view .LVU776
 3047              		.loc 6 76 5 is_stmt 0 view .LVU777
 3048              	.LBE3078:
 3049              	.LBB3079:
 3050              	.LBI3079:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3051              		.loc 2 359 42 is_stmt 1 view .LVU778
 3052              	.LBB3080:
 3053              	.LBI3080:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3054              		.loc 2 116 2 view .LVU779
 3055              	.LBB3081:
 3056              	.LBI3081:
 3057              		.loc 6 76 5 view .LVU780
 3058              		.loc 6 76 5 is_stmt 0 view .LVU781
 3059              	.LBE3081:
 3060              	.LBB3082:
 3061              	.LBI3082:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3062              		.loc 2 204 6 is_stmt 1 view .LVU782
 3063              	.LBB3083:
 3064              	.LBB3084:
 3065              	.LBI3084:
 3066              		.loc 6 76 5 view .LVU783
 3067              		.loc 6 76 5 is_stmt 0 view .LVU784
 3068              	.LBE3084:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3069              		.loc 2 205 47 view .LVU785
 3070 0184 1A68     		ldr	r2, [r3]	@ float
 3071 0186 5B68     		ldr	r3, [r3, #4]	@ float
 3072              	.LVL178:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3073              		.loc 2 205 47 view .LVU786
 3074              	.LBE3083:
 3075              	.LBE3082:
 3076              	.LBE3080:
 3077              	.LBE3079:
 3078              	.LBE3077:
ARM GAS  /tmp/ccIBY9uK.s 			page 150


 3079              	.LBE3075:
 3080              		.loc 2 1207 62 view .LVU787
 3081 0188 63E7     		b	.L75
 3082              	.LVL179:
 3083              	.L126:
 3084              		.loc 2 1207 62 view .LVU788
 3085              	.LBE3074:
 3086              	.LBE3073:
 3087              	.LBE3085:
 3088              	.LBE3086:
 3089              	.LBE3334:
 3090              	.LBB3335:
 3091              	.LBB2983:
 3092              	.LBB2954:
 3093              	.LBB2953:
 3094              	.LBB2952:
 3095              	.LBB2941:
 3096              	.LBI2941:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3097              		.loc 2 701 2 is_stmt 1 view .LVU789
 3098              	.LBB2942:
 3099              	.LBB2943:
 3100              	.LBI2943:
 3101              		.loc 6 76 5 view .LVU790
 3102              		.loc 6 76 5 is_stmt 0 view .LVU791
 3103              	.LBE2943:
 3104              	.LBB2944:
 3105              	.LBI2944:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 3106              		.loc 2 608 28 is_stmt 1 view .LVU792
 3107              	.LBB2945:
 3108              	.LBI2945:
 3109              		.loc 6 76 5 view .LVU793
 3110              		.loc 6 76 5 is_stmt 0 view .LVU794
 3111              	.LBE2945:
 3112              	.LBB2946:
 3113              	.LBI2946:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3114              		.loc 2 359 42 is_stmt 1 view .LVU795
 3115              	.LBB2947:
 3116              	.LBI2947:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3117              		.loc 2 116 2 view .LVU796
 3118              	.LBB2948:
 3119              	.LBI2948:
 3120              		.loc 6 76 5 view .LVU797
 3121              		.loc 6 76 5 is_stmt 0 view .LVU798
 3122              	.LBE2948:
 3123              	.LBB2949:
 3124              	.LBI2949:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3125              		.loc 2 204 6 is_stmt 1 view .LVU799
 3126              	.LBB2950:
 3127              	.LBB2951:
 3128              	.LBI2951:
 3129              		.loc 6 76 5 view .LVU800
 3130              		.loc 6 76 5 is_stmt 0 view .LVU801
ARM GAS  /tmp/ccIBY9uK.s 			page 151


 3131              	.LBE2951:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3132              		.loc 2 205 47 view .LVU802
 3133 018a 5368     		ldr	r3, [r2, #4]	@ float
 3134 018c 9268     		ldr	r2, [r2, #8]	@ float
 3135              	.LVL180:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3136              		.loc 2 205 47 view .LVU803
 3137              	.LBE2950:
 3138              	.LBE2949:
 3139              	.LBE2947:
 3140              	.LBE2946:
 3141              	.LBE2944:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3142              		.loc 2 702 51 view .LVU804
 3143 018e 4BE7     		b	.L67
 3144              	.LVL181:
 3145              	.L95:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3146              		.loc 2 702 51 view .LVU805
 3147              	.LBE2942:
 3148              	.LBE2941:
 3149              	.LBE2952:
 3150              	.LBE2953:
 3151              	.LBE2954:
 3152              	.LBE2983:
 3153              	.LBE3335:
 3154              	.LBB3336:
 3155              	.LBB3213:
 3156              	.LBB3209:
 3157              	.LBB3202:
 3158              	.LBB3203:
 3159              	.LBB3204:
 3160              	.LBB3205:
 3161              	.LBB3206:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3162              		.loc 2 111 7 view .LVU806
 3163 0190 0022     		movs	r2, #0
 3164              	.LVL182:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3165              		.loc 2 111 7 view .LVU807
 3166 0192 71E7     		b	.L82
 3167              	.LVL183:
 3168              	.L98:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3169              		.loc 2 111 7 view .LVU808
 3170              	.LBE3206:
 3171              	.LBE3205:
 3172              	.LBE3204:
 3173              	.LBE3203:
 3174              	.LBE3202:
 3175              	.LBE3209:
 3176              	.LBE3213:
 3177              	.LBE3336:
 3178              	.LBB3337:
 3179              	.LBB3286:
 3180              	.LBB3283:
ARM GAS  /tmp/ccIBY9uK.s 			page 152


 3181              	.LBB3273:
 3182              	.LBB3274:
 3183              	.LBB3275:
 3184              	.LBB3276:
 3185              	.LBB3277:
 3186 0194 0023     		movs	r3, #0
 3187              	.LVL184:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3188              		.loc 2 111 7 view .LVU809
 3189              	.LBE3277:
 3190              	.LBE3276:
 3191              	.LBE3275:
 3192              	.LBE3274:
 3193              	.LBE3273:
 3194              	.LBE3283:
 3195              	.LBE3286:
 3196              	.LBE3337:
 198:Src/foc.cpp   ****     }
 3197              		.loc 1 198 45 view .LVU810
 3198 0196 C0ED1B7A 		vstr.32	s15, [r0, #108]
 3199 019a 80F87030 		strb	r3, [r0, #112]
 200:Src/foc.cpp   **** }
 3200              		.loc 1 200 5 is_stmt 1 view .LVU811
 3201              	.LVL185:
 3202              	.LBB3338:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 3203              		.loc 8 71 13 view .LVU812
 3204              	.LBE3338:
 3205              		.loc 8 72 5 view .LVU813
 3206              	.LBB3339:
 3207              	.LBB3300:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3208              		.loc 9 479 27 view .LVU814
 3209              	.LBB3296:
 3210              		.loc 9 481 3 view .LVU815
 3211              		.syntax unified
 3212              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3213 019e 8CF31088 		MSR primask, ip
 3214              	@ 0 "" 2
 3215              	.LVL186:
 3216              		.loc 9 481 3 is_stmt 0 view .LVU816
 3217              		.thumb
 3218              		.syntax unified
 3219              	.LBE3296:
 3220              	.LBE3300:
 3221              	.LBE3339:
 3222              		.loc 1 201 1 view .LVU817
 3223 01a2 08BD     		pop	{r3, pc}
 3224              	.LVL187:
 3225              	.L99:
 3226              	.LBB3340:
 3227              	.LBB3287:
 3228              	.LBB3284:
 3229              	.LBB3282:
 3230              	.LBB3281:
 3231              	.LBB3280:
 3232              	.LBB3279:
ARM GAS  /tmp/ccIBY9uK.s 			page 153


 3233              	.LBB3278:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3234              		.loc 2 111 7 view .LVU818
 3235 01a4 1346     		mov	r3, r2
 3236 01a6 77E7     		b	.L85
 3237              	.LVL188:
 3238              	.L79:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3239              		.loc 2 111 7 view .LVU819
 3240              	.LBE3278:
 3241              	.LBE3279:
 3242              	.LBE3280:
 3243              	.LBE3281:
 3244              	.LBE3282:
 3245              	.LBE3284:
 3246              	.LBE3287:
 3247              	.LBE3340:
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
 3248              		.loc 10 1281 7 is_stmt 1 view .LVU820
 3249              	.LBB3341:
 3250              	.LBB2984:
 3251              	.LBB2955:
 3252              	.LBB2937:
 3253              	.LBB2925:
 3254              	.LBB2922:
 3255              	.LBB2923:
 3256              	.LBI2923:
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 3257              		.loc 10 1274 3 view .LVU821
 3258              	.LBB2924:
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3259              		.loc 10 1275 5 view .LVU822
 3260 01a8 FFF7FEFF 		bl	abort
 3261              	.LVL189:
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3262              		.loc 10 1275 5 is_stmt 0 view .LVU823
 3263              	.LBE2924:
 3264              	.LBE2923:
 3265              	.LBE2922:
 3266              	.LBE2925:
 3267              	.LBE2937:
 3268              	.LBE2955:
 3269              	.LBE2984:
 3270              	.LBE3341:
 3271              		.cfi_endproc
 3272              	.LFE3491:
 3274              		.section	.text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE,"ax",%progbits
 3275              		.align	1
 3276              		.p2align 2,,3
 3277              		.global	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 3278              		.syntax unified
 3279              		.thumb
 3280              		.thumb_func
 3281              		.fpu fpv4-sp-d16
 3283              	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:
 3284              	.LVL190:
 3285              	.LFB3459:
ARM GAS  /tmp/ccIBY9uK.s 			page 154


  28:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
 3286              		.loc 1 28 41 is_stmt 1 view -0
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 24
 3289              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
 3290              		.loc 1 28 41 is_stmt 0 view .LVU825
 3291 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3292              	.LCFI29:
 3293              		.cfi_def_cfa_offset 28
 3294              		.cfi_offset 4, -28
 3295              		.cfi_offset 5, -24
 3296              		.cfi_offset 6, -20
 3297              		.cfi_offset 7, -16
 3298              		.cfi_offset 8, -12
 3299              		.cfi_offset 9, -8
 3300              		.cfi_offset 14, -4
 3301 0004 1546     		mov	r5, r2
  29:Src/foc.cpp   ****     ODriveIntf::MotorIntf::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, 
 3302              		.loc 1 29 5 is_stmt 1 view .LVU826
  28:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
 3303              		.loc 1 28 41 is_stmt 0 view .LVU827
 3304 0006 2DED0C8B 		vpush.64	{d8, d9, d10, d11, d12, d13}
 3305              	.LCFI30:
 3306              		.cfi_def_cfa_offset 76
 3307              		.cfi_offset 80, -76
 3308              		.cfi_offset 81, -72
 3309              		.cfi_offset 82, -68
 3310              		.cfi_offset 83, -64
 3311              		.cfi_offset 84, -60
 3312              		.cfi_offset 85, -56
 3313              		.cfi_offset 86, -52
 3314              		.cfi_offset 87, -48
 3315              		.cfi_offset 88, -44
 3316              		.cfi_offset 89, -40
 3317              		.cfi_offset 90, -36
 3318              		.cfi_offset 91, -32
  30:Src/foc.cpp   ****     
 3319              		.loc 1 30 104 view .LVU828
 3320 000a 0268     		ldr	r2, [r0]
 3321              	.LVL191:
  30:Src/foc.cpp   ****     
 3322              		.loc 1 30 104 view .LVU829
 3323 000c B94E     		ldr	r6, .L162
 3324 000e D2F81080 		ldr	r8, [r2, #16]
  28:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
 3325              		.loc 1 28 41 view .LVU830
 3326 0012 87B0     		sub	sp, sp, #28
 3327              	.LCFI31:
 3328              		.cfi_def_cfa_offset 104
  29:Src/foc.cpp   ****     ODriveIntf::MotorIntf::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, 
 3329              		.loc 1 29 28 view .LVU831
 3330 0014 0022     		movs	r2, #0
 3331 0016 B045     		cmp	r8, r6
 3332 0018 CDE90322 		strd	r2, r2, [sp, #12]
 3333 001c 0592     		str	r2, [sp, #20]
  30:Src/foc.cpp   ****     
ARM GAS  /tmp/ccIBY9uK.s 			page 155


 3334              		.loc 1 30 5 is_stmt 1 view .LVU832
 3335 001e 40F0C280 		bne	.L129
 3336              	.LVL192:
 3337              	.LBB3544:
 3338              	.LBI3544:
  72:Src/foc.cpp   ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 3339              		.loc 1 72 30 view .LVU833
 3340              	.LBB3545:
  76:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
 3341              		.loc 1 76 5 view .LVU834
 3342              	.LBB3546:
 3343              	.LBI3546:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3344              		.loc 2 917 22 view .LVU835
 3345              	.LBB3547:
 3346              	.LBI3547:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3347              		.loc 2 434 22 view .LVU836
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3348              		.loc 2 434 22 is_stmt 0 view .LVU837
 3349 0022 9946     		mov	r9, r3
 3350              	.LBE3547:
 3351              	.LBE3546:
  76:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
 3352              		.loc 1 76 45 view .LVU838
 3353 0024 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 3354              	.LVL193:
  76:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
 3355              		.loc 1 76 45 view .LVU839
 3356 0028 0446     		mov	r4, r0
 3357 002a 002B     		cmp	r3, #0
 3358 002c 00F0B480 		beq	.L143
 3359              	.LVL194:
 3360              	.LBB3548:
 3361              	.LBI3548:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3362              		.loc 2 917 22 is_stmt 1 view .LVU840
 3363              	.LBB3549:
 3364              	.LBI3549:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3365              		.loc 2 434 22 view .LVU841
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3366              		.loc 2 434 22 is_stmt 0 view .LVU842
 3367              	.LBE3549:
 3368              	.LBE3548:
  76:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
 3369              		.loc 1 76 45 view .LVU843
 3370 0030 90F88830 		ldrb	r3, [r0, #136]	@ zero_extendqisi2
 3371 0034 002B     		cmp	r3, #0
 3372 0036 00F0AF80 		beq	.L143
 3373              	.LBB3550:
 3374              	.LBB3551:
  79:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
 3375              		.loc 1 79 43 view .LVU844
 3376 003a 436C     		ldr	r3, [r0, #68]
 3377 003c 426F     		ldr	r2, [r0, #116]
 3378 003e D21A     		subs	r2, r2, r3
ARM GAS  /tmp/ccIBY9uK.s 			page 156


 3379 0040 0F46     		mov	r7, r1
 3380              	.LVL195:
  79:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
 3381              		.loc 1 79 43 view .LVU845
 3382              	.LBE3551:
 3383              	.LBI3550:
  72:Src/foc.cpp   ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 3384              		.loc 1 72 30 is_stmt 1 view .LVU846
 3385              	.LBB3613:
  79:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
 3386              		.loc 1 79 12 view .LVU847
 3387              	.LBB3552:
 3388              	.LBI3552:
 3389              		.loc 5 56 3 view .LVU848
 3390              	.LBB3553:
 3391              		.loc 5 56 19 view .LVU849
 3392              		.loc 5 56 44 is_stmt 0 view .LVU850
 3393 0042 82EAE271 		eor	r1, r2, r2, asr #31
 3394              	.LVL196:
 3395              		.loc 5 56 44 view .LVU851
 3396 0046 A1EBE271 		sub	r1, r1, r2, asr #31
 3397              	.LBE3553:
 3398              	.LBE3552:
  79:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
 3399              		.loc 1 79 12 view .LVU852
 3400 004a 40F6CD03 		movw	r3, #2253
 3401 004e 9942     		cmp	r1, r3
 3402 0050 00F32481 		bgt	.L144
  88:Src/foc.cpp   ****         //return Motor::ERROR_UNKNOWN_VOLTAGE_COMMAND;
 3403              		.loc 1 88 5 is_stmt 1 view .LVU853
 3404              	.LVL197:
 3405              	.LBB3554:
 3406              	.LBI3554:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3407              		.loc 2 917 22 view .LVU854
 3408              	.LBB3555:
 3409              	.LBI3555:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3410              		.loc 2 434 22 view .LVU855
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3411              		.loc 2 434 22 is_stmt 0 view .LVU856
 3412              	.LBE3555:
 3413              	.LBE3554:
  88:Src/foc.cpp   ****         //return Motor::ERROR_UNKNOWN_VOLTAGE_COMMAND;
 3414              		.loc 1 88 5 view .LVU857
 3415 0054 90F86030 		ldrb	r3, [r0, #96]	@ zero_extendqisi2
 3416 0058 4BB1     		cbz	r3, .L131
  90:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_PHASE_ESTIMATE;
 3417              		.loc 1 90 12 is_stmt 1 view .LVU858
 3418              	.LVL198:
 3419              	.LBB3556:
 3420              	.LBI3556:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3421              		.loc 2 917 22 view .LVU859
 3422              	.LBB3557:
 3423              	.LBI3557:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
ARM GAS  /tmp/ccIBY9uK.s 			page 157


 3424              		.loc 2 434 22 view .LVU860
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3425              		.loc 2 434 22 is_stmt 0 view .LVU861
 3426              	.LBE3557:
 3427              	.LBE3556:
  90:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_PHASE_ESTIMATE;
 3428              		.loc 1 90 36 view .LVU862
 3429 005a 90F86830 		ldrb	r3, [r0, #104]	@ zero_extendqisi2
 3430 005e 002B     		cmp	r3, #0
 3431 0060 00F00A81 		beq	.L146
 3432              	.LVL199:
 3433              	.LBB3558:
 3434              	.LBI3558:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3435              		.loc 2 917 22 is_stmt 1 view .LVU863
 3436              	.LBB3559:
 3437              	.LBI3559:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3438              		.loc 2 434 22 view .LVU864
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3439              		.loc 2 434 22 is_stmt 0 view .LVU865
 3440              	.LBE3559:
 3441              	.LBE3558:
  90:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_PHASE_ESTIMATE;
 3442              		.loc 1 90 36 view .LVU866
 3443 0064 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3444 0068 002B     		cmp	r3, #0
 3445 006a 00F00581 		beq	.L146
 3446              	.L131:
  96:Src/foc.cpp   ****     float phase = *phase_;
 3447              		.loc 1 96 5 is_stmt 1 view .LVU867
 3448              	.LBB3560:
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3449              		.loc 1 106 46 is_stmt 0 view .LVU868
 3450 006e 07EE902A 		vmov	s15, r2	@ int
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3451              		.loc 1 106 95 view .LVU869
 3452 0072 DFEDA16A 		vldr.32	s13, .L162+4
 3453              	.LBE3560:
  97:Src/foc.cpp   ****     float phase_vel = *phase_vel_;
 3454              		.loc 1 97 20 view .LVU870
 3455 0076 94ED19AA 		vldr.32	s20, [r4, #100]
  98:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 3456              		.loc 1 98 24 view .LVU871
 3457 007a D4ED1BCA 		vldr.32	s25, [r4, #108]
 3458              	.LBB3564:
 105:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 3459              		.loc 1 105 33 view .LVU872
 3460 007e 94ED20CA 		vldr.32	s24, [r4, #128]
 3461 0082 D4ED21BA 		vldr.32	s23, [r4, #132]
 3462              	.LBE3564:
  99:Src/foc.cpp   **** 
 3463              		.loc 1 99 27 view .LVU873
 3464 0086 D4ED1E9A 		vldr.32	s19, [r4, #120]
  96:Src/foc.cpp   ****     float phase = *phase_;
 3465              		.loc 1 96 22 view .LVU874
 3466 008a D4ED16AA 		vldr.32	s21, [r4, #88]
ARM GAS  /tmp/ccIBY9uK.s 			page 158


 3467              	.LVL200:
  96:Src/foc.cpp   ****     float phase = *phase_;
 3468              		.loc 1 96 22 view .LVU875
 3469 008e 94ED17BA 		vldr.32	s22, [r4, #92]
 3470              	.LVL201:
  97:Src/foc.cpp   ****     float phase_vel = *phase_vel_;
 3471              		.loc 1 97 5 is_stmt 1 view .LVU876
  98:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 3472              		.loc 1 98 5 view .LVU877
  99:Src/foc.cpp   **** 
 3473              		.loc 1 99 5 view .LVU878
 101:Src/foc.cpp   **** 
 3474              		.loc 1 101 5 view .LVU879
 104:Src/foc.cpp   ****         auto [Ialpha, Ibeta] = *Ialpha_beta_measured_;
 3475              		.loc 1 104 5 view .LVU880
 3476              	.LBB3565:
 105:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 3477              		.loc 1 105 9 view .LVU881
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3478              		.loc 1 106 9 view .LVU882
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3479              		.loc 1 106 46 is_stmt 0 view .LVU883
 3480 0092 F8EEE77A 		vcvt.f32.s32	s15, s15
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3481              		.loc 1 106 15 view .LVU884
 3482 0096 B0EE4A8A 		vmov.f32	s16, s20
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3483              		.loc 1 106 95 view .LVU885
 3484 009a 87EEA67A 		vdiv.f32	s14, s15, s13
 106:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 3485              		.loc 1 106 15 view .LVU886
 3486 009e ACEE878A 		vfma.f32	s16, s25, s14
 3487              	.LVL202:
 107:Src/foc.cpp   ****         float s_I = our_arm_sin_f32(I_phase);
 3488              		.loc 1 107 9 is_stmt 1 view .LVU887
 107:Src/foc.cpp   ****         float s_I = our_arm_sin_f32(I_phase);
 3489              		.loc 1 107 36 is_stmt 0 view .LVU888
 3490 00a2 B0EE480A 		vmov.f32	s0, s16
 3491 00a6 FFF7FEFF 		bl	our_arm_cos_f32
 3492              	.LVL203:
 107:Src/foc.cpp   ****         float s_I = our_arm_sin_f32(I_phase);
 3493              		.loc 1 107 36 view .LVU889
 3494 00aa F0EE408A 		vmov.f32	s17, s0
 108:Src/foc.cpp   ****         Idq = {
 3495              		.loc 1 108 36 view .LVU890
 3496 00ae B0EE480A 		vmov.f32	s0, s16
 3497              	.LVL204:
 108:Src/foc.cpp   ****         Idq = {
 3498              		.loc 1 108 9 is_stmt 1 view .LVU891
 108:Src/foc.cpp   ****         Idq = {
 3499              		.loc 1 108 36 is_stmt 0 view .LVU892
 3500 00b2 FFF7FEFF 		bl	our_arm_sin_f32
 3501              	.LVL205:
 110:Src/foc.cpp   ****             c_I * Ibeta - s_I * Ialpha
 3502              		.loc 1 110 32 view .LVU893
 3503 00b6 2BEE809A 		vmul.f32	s18, s23, s0
 111:Src/foc.cpp   ****         };
ARM GAS  /tmp/ccIBY9uK.s 			page 159


 3504              		.loc 1 111 25 view .LVU894
 3505 00ba 20EE4C8A 		vnmul.f32	s16, s0, s24
 3506              	.LVL206:
 110:Src/foc.cpp   ****             c_I * Ibeta - s_I * Ialpha
 3507              		.loc 1 110 26 view .LVU895
 3508 00be ACEE289A 		vfma.f32	s18, s24, s17
 3509              	.LBE3565:
 3510              	.LBB3566:
 126:Src/foc.cpp   ****         // Current control mode
 3511              		.loc 1 126 5 view .LVU896
 3512 00c2 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 3513              	.LBE3566:
 3514              	.LBB3579:
 111:Src/foc.cpp   ****         };
 3515              		.loc 1 111 25 view .LVU897
 3516 00c6 ABEEA88A 		vfma.f32	s16, s23, s17
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3517              		.loc 1 113 69 view .LVU898
 3518 00ca 94ED237A 		vldr.32	s14, [r4, #140]
 3519              	.LVL207:
 109:Src/foc.cpp   ****             c_I * Ialpha + s_I * Ibeta,
 3520              		.loc 1 109 9 is_stmt 1 view .LVU899
 3521              	.LBB3561:
 3522              	.LBI3561:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 3523              		.loc 3 352 12 view .LVU900
 3524              	.LBB3562:
 3525              	.LBI3562:
 3526              		.loc 6 76 5 view .LVU901
 3527              		.loc 6 76 5 is_stmt 0 view .LVU902
 3528              	.LBE3562:
 3529              	.LBB3563:
 3530              	.LBI3563:
 3531              		.loc 6 76 5 is_stmt 1 view .LVU903
 3532              		.loc 6 76 5 is_stmt 0 view .LVU904
 3533              	.LBE3563:
 3534              	.LBE3561:
 3535              	.LBE3579:
 3536              	.LBE3613:
 3537              	.LBE3550:
 3538              	.LBE3545:
 3539              	.LBE3544:
 3540              		.loc 4 175 3 is_stmt 1 view .LVU905
 3541              	.LBB3632:
 3542              	.LBB3626:
 3543              	.LBB3620:
 3544              	.LBB3614:
 3545              	.LBB3580:
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3546              		.loc 1 113 9 view .LVU906
 114:Src/foc.cpp   ****     } else {
 3547              		.loc 1 114 70 is_stmt 0 view .LVU907
 3548 00ce D4ED247A 		vldr.32	s15, [r4, #144]
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3549              		.loc 1 113 25 view .LVU908
 3550 00d2 D4ED056A 		vldr.32	s13, [r4, #20]
 3551              	.LBE3580:
ARM GAS  /tmp/ccIBY9uK.s 			page 160


 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 3552              		.loc 1 121 11 view .LVU909
 3553 00d6 DFED898A 		vldr.32	s17, .L162+8
 3554              	.LVL208:
 3555              	.LBB3581:
 114:Src/foc.cpp   ****     } else {
 3556              		.loc 1 114 68 view .LVU910
 3557 00da 38EE676A 		vsub.f32	s12, s16, s15
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3558              		.loc 1 113 67 view .LVU911
 3559 00de 79EE475A 		vsub.f32	s11, s18, s14
 114:Src/foc.cpp   ****     } else {
 3560              		.loc 1 114 22 view .LVU912
 3561 00e2 E6EE867A 		vfma.f32	s15, s13, s12
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3562              		.loc 1 113 22 view .LVU913
 3563 00e6 A6EEA57A 		vfma.f32	s14, s13, s11
 3564              	.LBE3581:
 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 3565              		.loc 1 121 11 view .LVU914
 3566 00ea 69EEA88A 		vmul.f32	s17, s19, s17
 122:Src/foc.cpp   ****     float mod_d;
 3567              		.loc 1 122 11 view .LVU915
 3568 00ee B7EE006A 		vmov.f32	s12, #1.0e+0
 3569 00f2 C6EE286A 		vdiv.f32	s13, s12, s17
 3570              	.LBB3582:
 113:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 3571              		.loc 1 113 22 view .LVU916
 3572 00f6 84ED237A 		vstr.32	s14, [r4, #140]
 114:Src/foc.cpp   ****     } else {
 3573              		.loc 1 114 9 is_stmt 1 view .LVU917
 114:Src/foc.cpp   ****     } else {
 3574              		.loc 1 114 22 is_stmt 0 view .LVU918
 3575 00fa C4ED247A 		vstr.32	s15, [r4, #144]
 3576              	.LVL209:
 114:Src/foc.cpp   ****     } else {
 3577              		.loc 1 114 22 view .LVU919
 3578              	.LBE3582:
 121:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 3579              		.loc 1 121 5 is_stmt 1 view .LVU920
 122:Src/foc.cpp   ****     float mod_d;
 3580              		.loc 1 122 5 view .LVU921
 123:Src/foc.cpp   ****     float mod_q;
 3581              		.loc 1 123 5 view .LVU922
 124:Src/foc.cpp   **** 
 3582              		.loc 1 124 5 view .LVU923
 126:Src/foc.cpp   ****         // Current control mode
 3583              		.loc 1 126 5 view .LVU924
 3584              	.LBB3583:
 3585 00fe 002B     		cmp	r3, #0
 3586 0100 79D0     		beq	.L132
 3587              	.LBB3567:
 129:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_GAINS;
 3588              		.loc 1 129 9 view .LVU925
 3589              	.LVL210:
 3590              	.LBB3568:
 3591              	.LBI3568:
ARM GAS  /tmp/ccIBY9uK.s 			page 161


 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3592              		.loc 2 917 22 view .LVU926
 3593              	.LBB3569:
 3594              	.LBI3569:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3595              		.loc 2 434 22 view .LVU927
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3596              		.loc 2 434 22 is_stmt 0 view .LVU928
 3597              	.LBE3569:
 3598              	.LBE3568:
 129:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_GAINS;
 3599              		.loc 1 129 9 view .LVU929
 3600 0102 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 3601 0104 002B     		cmp	r3, #0
 3602 0106 00F0E880 		beq	.L147
 131:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_MEASUREMENT;
 3603              		.loc 1 131 16 is_stmt 1 view .LVU930
 133:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_COMMAND;
 3604              		.loc 1 133 16 view .LVU931
 3605              	.LVL211:
 3606              	.LBB3570:
 3607              	.LBI3570:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3608              		.loc 2 917 22 view .LVU932
 3609              	.LBB3571:
 3610              	.LBI3571:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3611              		.loc 2 434 22 view .LVU933
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3612              		.loc 2 434 22 is_stmt 0 view .LVU934
 3613              	.LBE3571:
 3614              	.LBE3570:
 133:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_COMMAND;
 3615              		.loc 1 133 16 view .LVU935
 3616 010a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 3617 010e 002B     		cmp	r3, #0
 3618 0110 00F0E080 		beq	.L148
 137:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 3619              		.loc 1 137 9 is_stmt 1 view .LVU936
 142:Src/foc.cpp   **** 
 3620              		.loc 1 142 15 is_stmt 0 view .LVU937
 3621 0114 D4ED14BA 		vldr.32	s23, [r4, #80]
 146:Src/foc.cpp   **** 
 3622              		.loc 1 146 34 view .LVU938
 3623 0118 94ED267A 		vldr.32	s14, [r4, #152]
 137:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 3624              		.loc 1 137 34 view .LVU939
 3625 011c 94ED026A 		vldr.32	s12, [r4, #8]
 3626              	.LVL212:
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 3627              		.loc 1 141 15 view .LVU940
 3628 0120 94ED13CA 		vldr.32	s24, [r4, #76]
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 3629              		.loc 1 145 34 view .LVU941
 3630 0124 D4ED257A 		vldr.32	s15, [r4, #148]
 137:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 3631              		.loc 1 137 34 view .LVU942
ARM GAS  /tmp/ccIBY9uK.s 			page 162


 3632 0128 94ED03DA 		vldr.32	s26, [r4, #12]
 3633              	.LVL213:
 138:Src/foc.cpp   ****         auto [Id_setpoint, Iq_setpoint] = *Idq_setpoint_;
 3634              		.loc 1 138 9 is_stmt 1 view .LVU943
 139:Src/foc.cpp   **** 
 3635              		.loc 1 139 9 view .LVU944
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 3636              		.loc 1 141 9 view .LVU945
 142:Src/foc.cpp   **** 
 3637              		.loc 1 142 15 is_stmt 0 view .LVU946
 3638 012c 7BEEC8BA 		vsub.f32	s23, s23, s16
 3639              	.LVL214:
 146:Src/foc.cpp   **** 
 3640              		.loc 1 146 32 view .LVU947
 3641 0130 3BEE07BA 		vadd.f32	s22, s22, s14
 3642              	.LVL215:
 141:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 3643              		.loc 1 141 15 view .LVU948
 3644 0134 3CEE49CA 		vsub.f32	s24, s24, s18
 3645              	.LVL216:
 142:Src/foc.cpp   **** 
 3646              		.loc 1 142 9 is_stmt 1 view .LVU949
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 3647              		.loc 1 145 9 view .LVU950
 146:Src/foc.cpp   **** 
 3648              		.loc 1 146 64 is_stmt 0 view .LVU951
 3649 0138 A6EE2BBA 		vfma.f32	s22, s12, s23
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 3650              		.loc 1 145 32 view .LVU952
 3651 013c 7AEEA7AA 		vadd.f32	s21, s21, s15
 3652              	.LVL217:
 146:Src/foc.cpp   **** 
 3653              		.loc 1 146 15 view .LVU953
 3654 0140 26EE8BBA 		vmul.f32	s22, s13, s22
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 3655              		.loc 1 145 64 view .LVU954
 3656 0144 E6EE0CAA 		vfma.f32	s21, s12, s24
 150:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 3657              		.loc 1 150 93 view .LVU955
 3658 0148 2BEE0B0A 		vmul.f32	s0, s22, s22
 3659              	.LVL218:
 145:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 3660              		.loc 1 145 15 view .LVU956
 3661 014c 66EEAAAA 		vmul.f32	s21, s13, s21
 3662              	.LVL219:
 146:Src/foc.cpp   **** 
 3663              		.loc 1 146 9 is_stmt 1 view .LVU957
 150:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 3664              		.loc 1 150 9 view .LVU958
 150:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 3665              		.loc 1 150 70 is_stmt 0 view .LVU959
 3666 0150 AAEEAA0A 		vfma.f32	s0, s21, s21
 3667              	.LVL220:
 3668              	.LBB3572:
 3669              	.LBI3572:
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sqrtf(__x); }
 3670              		.loc 7 463 3 is_stmt 1 view .LVU960
ARM GAS  /tmp/ccIBY9uK.s 			page 163


 3671              	.LBB3573:
 3672              		.loc 7 464 5 view .LVU961
 3673 0154 B5EE400A 		vcmp.f32	s0, #0
 3674 0158 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3675 015c 00F1C080 		bmi	.L158
 3676              		.loc 7 464 27 is_stmt 0 view .LVU962
 3677 0160 B1EEC06A 		vsqrt.f32	s12, s0
 3678              	.LVL221:
 3679              	.L135:
 3680              		.loc 7 464 27 view .LVU963
 3681              	.LBE3573:
 3682              	.LBE3572:
 150:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 3683              		.loc 1 150 100 view .LVU964
 3684 0164 9FED665A 		vldr.32	s10, .L162+12
 3685 0168 C5EE066A 		vdiv.f32	s13, s10, s12
 3686              	.LVL222:
 151:Src/foc.cpp   ****             mod_d *= mod_scalefactor;
 3687              		.loc 1 151 9 is_stmt 1 view .LVU965
 3688 016c F7EE005A 		vmov.f32	s11, #1.0e+0
 3689              	.LVL223:
 151:Src/foc.cpp   ****             mod_d *= mod_scalefactor;
 3690              		.loc 1 151 9 is_stmt 0 view .LVU966
 3691 0170 F4EEE56A 		vcmpe.f32	s13, s11
 3692 0174 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3693 0178 00F19D80 		bmi	.L161
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 3694              		.loc 1 158 13 is_stmt 1 view .LVU967
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 3695              		.loc 1 158 63 is_stmt 0 view .LVU968
 3696 017c 614B     		ldr	r3, .L162+16
 3697 017e D3ED006A 		vldr.32	s13, [r3]
 3698              	.LVL224:
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 3699              		.loc 1 158 63 view .LVU969
 3700 0182 6DEE266A 		vmul.f32	s13, s26, s13
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 3701              		.loc 1 158 43 view .LVU970
 3702 0186 ECEE267A 		vfma.f32	s15, s24, s13
 159:Src/foc.cpp   ****         }
 3703              		.loc 1 159 43 view .LVU971
 3704 018a ABEEA67A 		vfma.f32	s14, s23, s13
 158:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 3705              		.loc 1 158 43 view .LVU972
 3706 018e C4ED257A 		vstr.32	s15, [r4, #148]
 159:Src/foc.cpp   ****         }
 3707              		.loc 1 159 13 is_stmt 1 view .LVU973
 159:Src/foc.cpp   ****         }
 3708              		.loc 1 159 43 is_stmt 0 view .LVU974
 3709 0192 84ED267A 		vstr.32	s14, [r4, #152]
 3710 0196 32E0     		b	.L138
 3711              	.LVL225:
 3712              	.L143:
 159:Src/foc.cpp   ****         }
 3713              		.loc 1 159 43 view .LVU975
 3714              	.LBE3567:
 3715              	.LBE3583:
ARM GAS  /tmp/ccIBY9uK.s 			page 164


 3716              	.LBE3614:
 3717              	.LBE3620:
  78:Src/foc.cpp   ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 3718              		.loc 1 78 46 view .LVU976
 3719 0198 4FF08060 		mov	r0, #67108864
 3720              	.LVL226:
 3721              	.L128:
  78:Src/foc.cpp   ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 3722              		.loc 1 78 46 view .LVU977
 3723              	.LBE3626:
 3724              	.LBE3632:
  51:Src/foc.cpp   **** 
 3725              		.loc 1 51 1 view .LVU978
 3726 019c 07B0     		add	sp, sp, #28
 3727              	.LCFI32:
 3728              		.cfi_remember_state
 3729              		.cfi_def_cfa_offset 76
 3730              		@ sp needed
 3731 019e BDEC0C8B 		vldm	sp!, {d8-d13}
 3732              	.LCFI33:
 3733              		.cfi_restore 90
 3734              		.cfi_restore 91
 3735              		.cfi_restore 88
 3736              		.cfi_restore 89
 3737              		.cfi_restore 86
 3738              		.cfi_restore 87
 3739              		.cfi_restore 84
 3740              		.cfi_restore 85
 3741              		.cfi_restore 82
 3742              		.cfi_restore 83
 3743              		.cfi_restore 80
 3744              		.cfi_restore 81
 3745              		.cfi_def_cfa_offset 28
 3746 01a2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3747              	.LVL227:
 3748              	.L129:
 3749              	.LCFI34:
 3750              		.cfi_restore_state
  30:Src/foc.cpp   ****     
 3751              		.loc 1 30 64 view .LVU979
 3752 01a6 03AA     		add	r2, sp, #12
 3753 01a8 C047     		blx	r8
 3754              	.LVL228:
  32:Src/foc.cpp   ****         return status;
 3755              		.loc 1 32 5 is_stmt 1 view .LVU980
 3756 01aa 0028     		cmp	r0, #0
 3757 01ac F6D1     		bne	.L128
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3758              		.loc 1 34 12 view .LVU981
 3759              	.LVL229:
 3760              	.LBB3633:
 3761              	.LBI3633:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3762              		.loc 2 917 22 view .LVU982
 3763              	.LBB3634:
 3764              	.LBI3634:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
ARM GAS  /tmp/ccIBY9uK.s 			page 165


 3765              		.loc 2 434 22 view .LVU983
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3766              		.loc 2 434 22 is_stmt 0 view .LVU984
 3767              	.LBE3634:
 3768              	.LBE3633:
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3769              		.loc 1 34 77 view .LVU985
 3770 01ae 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 3771 01b2 002B     		cmp	r3, #0
 3772 01b4 63D0     		beq	.L151
 3773              	.LVL230:
 3774              	.L141:
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3775              		.loc 1 34 53 view .LVU986
 3776 01b6 9DED030A 		vldr.32	s0, [sp, #12]
 3777              	.LVL231:
 3778              		.file 12 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
ARM GAS  /tmp/ccIBY9uK.s 			page 166


  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
  90:Inc/utils.hpp ****     if (out < 0.0f)
  91:Inc/utils.hpp ****         out += y;
  92:Inc/utils.hpp ****     return out;
  93:Inc/utils.hpp **** }
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
ARM GAS  /tmp/ccIBY9uK.s 			page 167


  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 102:Inc/utils.hpp **** }
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 106:Inc/utils.hpp **** }
 107:Inc/utils.hpp **** 
 108:Inc/utils.hpp **** // Compute rising edge timings (0.0 - 1.0) as a function of alpha-beta
 109:Inc/utils.hpp **** // as per the magnitude invariant clarke transform
 110:Inc/utils.hpp **** // The magnitude of the alpha-beta vector may not be larger than sqrt(3)/2
 111:Inc/utils.hpp **** // Returns 0 on success, and -1 if the input was out of range
 112:Inc/utils.hpp **** int SVM(float alpha, float beta, float* tA, float* tB, float* tC);
 113:Inc/utils.hpp **** 
 114:Inc/utils.hpp **** float fast_atan2(float y, float x);
 115:Inc/utils.hpp **** float horner_fma(float x, const float *coeffs, size_t count);
 116:Inc/utils.hpp **** int mod(int dividend, int divisor);
 117:Inc/utils.hpp **** 
 118:Inc/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
 119:Inc/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
 120:Inc/utils.hpp **** int is_in_the_future(uint32_t time_ms);
 121:Inc/utils.hpp **** 
 122:Inc/utils.hpp **** uint32_t micros(void);
 123:Inc/utils.hpp **** void delay_us(uint32_t us);
 124:Inc/utils.hpp **** 
 125:Inc/utils.hpp **** float our_arm_sin_f32(float x);
 126:Inc/utils.hpp **** float our_arm_cos_f32(float x);
 127:Inc/utils.hpp **** uint8_t calcCRC(uint8_t * buffer, uint8_t length);
 128:Inc/utils.hpp **** int32_t fsgn(float num);
 129:Inc/utils.hpp **** int32_t saturation(int32_t num, int32_t min, int32_t max);
 130:Inc/utils.hpp **** typedef struct {
 131:Inc/utils.hpp ****     float w0;  // Notch frequency
 132:Inc/utils.hpp ****     float r;   // Notch width parameter
 133:Inc/utils.hpp ****     float a1, a2, b1, b2;  // Filter coefficients
 134:Inc/utils.hpp ****     float x1, x2, y1, y2;  // State variables
 135:Inc/utils.hpp **** } NotchFilter;
 136:Inc/utils.hpp **** void initNotchFilter(NotchFilter* filter, float frequency, float sampleRate, float bandwidth);
 137:Inc/utils.hpp **** float applyNotchFilter(NotchFilter* filter, float input);
 138:Inc/utils.hpp **** 
 139:Inc/utils.hpp **** void test_svm(float mod_q, float mod_d, float *theta, float *ta, float *tb, float *tc) ;
 140:Inc/utils.hpp **** void clark_park(float *iq, float *id, float theta, float ia, float ib);
 141:Inc/utils.hpp **** #ifdef __cplusplus
 142:Inc/utils.hpp **** }
 143:Inc/utils.hpp **** #endif
 144:Inc/utils.hpp **** 
 145:Inc/utils.hpp **** 
 146:Inc/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 147:Inc/utils.hpp **** inline bool is_nan(float x) {
 148:Inc/utils.hpp ****     return __builtin_isnan(x);
 3779              		.loc 12 148 5 is_stmt 1 view .LVU987
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3780              		.loc 1 34 44 is_stmt 0 view .LVU988
 3781 01ba B4EE400A 		vcmp.f32	s0, s0
 3782 01be F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3783 01c2 5CD6     		bvs	.L151
ARM GAS  /tmp/ccIBY9uK.s 			page 168


  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3784              		.loc 1 34 86 view .LVU989
 3785 01c4 DDED040A 		vldr.32	s1, [sp, #16]
 3786              	.LVL232:
 3787              		.loc 12 148 5 is_stmt 1 view .LVU990
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 3788              		.loc 1 34 77 is_stmt 0 view .LVU991
 3789 01c8 F4EE600A 		vcmp.f32	s1, s1
 3790 01cc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3791 01d0 55D6     		bvs	.L151
  38:Src/foc.cpp   ****     if (SVM(mod_alpha_beta->first, mod_alpha_beta->second, &tA, &tB, &tC) != 0)
 3792              		.loc 1 38 5 is_stmt 1 view .LVU992
  39:Src/foc.cpp   ****     {
 3793              		.loc 1 39 5 view .LVU993
  39:Src/foc.cpp   ****     {
 3794              		.loc 1 39 12 is_stmt 0 view .LVU994
 3795 01d2 02AA     		add	r2, sp, #8
 3796 01d4 01A9     		add	r1, sp, #4
 3797 01d6 6846     		mov	r0, sp
 3798 01d8 FFF7FEFF 		bl	SVM
 3799              	.LVL233:
  39:Src/foc.cpp   ****     {
 3800              		.loc 1 39 5 view .LVU995
 3801 01dc 0028     		cmp	r0, #0
 3802 01de 64D1     		bne	.L152
  46:Src/foc.cpp   ****     pwm_timings[1] = tB;
 3803              		.loc 1 46 5 is_stmt 1 view .LVU996
  46:Src/foc.cpp   ****     pwm_timings[1] = tB;
 3804              		.loc 1 46 20 is_stmt 0 view .LVU997
 3805 01e0 0099     		ldr	r1, [sp]	@ float
  47:Src/foc.cpp   ****     pwm_timings[2] = tC;
 3806              		.loc 1 47 20 view .LVU998
 3807 01e2 019A     		ldr	r2, [sp, #4]	@ float
  48:Src/foc.cpp   **** 
 3808              		.loc 1 48 20 view .LVU999
 3809 01e4 029B     		ldr	r3, [sp, #8]	@ float
  46:Src/foc.cpp   ****     pwm_timings[1] = tB;
 3810              		.loc 1 46 20 view .LVU1000
 3811 01e6 2960     		str	r1, [r5]	@ float
  47:Src/foc.cpp   ****     pwm_timings[2] = tC;
 3812              		.loc 1 47 5 is_stmt 1 view .LVU1001
  47:Src/foc.cpp   ****     pwm_timings[2] = tC;
 3813              		.loc 1 47 20 is_stmt 0 view .LVU1002
 3814 01e8 6A60     		str	r2, [r5, #4]	@ float
  48:Src/foc.cpp   **** 
 3815              		.loc 1 48 5 is_stmt 1 view .LVU1003
  48:Src/foc.cpp   **** 
 3816              		.loc 1 48 20 is_stmt 0 view .LVU1004
 3817 01ea AB60     		str	r3, [r5, #8]	@ float
  50:Src/foc.cpp   **** }
 3818              		.loc 1 50 5 is_stmt 1 view .LVU1005
  51:Src/foc.cpp   **** 
 3819              		.loc 1 51 1 is_stmt 0 view .LVU1006
 3820 01ec 07B0     		add	sp, sp, #28
 3821              	.LCFI35:
 3822              		.cfi_remember_state
 3823              		.cfi_def_cfa_offset 76
ARM GAS  /tmp/ccIBY9uK.s 			page 169


 3824              		@ sp needed
 3825 01ee BDEC0C8B 		vldm	sp!, {d8-d13}
 3826              	.LCFI36:
 3827              		.cfi_restore 90
 3828              		.cfi_restore 91
 3829              		.cfi_restore 88
 3830              		.cfi_restore 89
 3831              		.cfi_restore 86
 3832              		.cfi_restore 87
 3833              		.cfi_restore 84
 3834              		.cfi_restore 85
 3835              		.cfi_restore 82
 3836              		.cfi_restore 83
 3837              		.cfi_restore 80
 3838              		.cfi_restore 81
 3839              		.cfi_def_cfa_offset 28
 3840 01f2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3841              	.LVL234:
 3842              	.L132:
 3843              	.LCFI37:
 3844              		.cfi_restore_state
 3845              	.LBB3636:
 3846              	.LBB3627:
 3847              	.LBB3621:
 3848              	.LBB3615:
 3849              	.LBB3584:
 164:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 3850              		.loc 1 164 9 is_stmt 1 view .LVU1007
 164:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 3851              		.loc 1 164 15 is_stmt 0 view .LVU1008
 3852 01f6 6AEEA6AA 		vmul.f32	s21, s21, s13
 3853              	.LVL235:
 165:Src/foc.cpp   ****     }
 3854              		.loc 1 165 9 is_stmt 1 view .LVU1009
 165:Src/foc.cpp   ****     }
 3855              		.loc 1 165 15 is_stmt 0 view .LVU1010
 3856 01fa 2BEE26BA 		vmul.f32	s22, s22, s13
 3857              	.LVL236:
 3858              	.L138:
 165:Src/foc.cpp   ****     }
 3859              		.loc 1 165 15 view .LVU1011
 3860              	.LBE3584:
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3861              		.loc 1 169 5 is_stmt 1 view .LVU1012
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3862              		.loc 1 169 78 is_stmt 0 view .LVU1013
 3863 01fe 616C     		ldr	r1, [r4, #68]
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3864              		.loc 1 169 97 view .LVU1014
 3865 0200 DFED3D6A 		vldr.32	s13, .L162+4
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3866              		.loc 1 169 78 view .LVU1015
 3867 0204 7B1A     		subs	r3, r7, r1
 3868 0206 07EE903A 		vmov	s15, r3	@ int
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3869              		.loc 1 169 44 view .LVU1016
 3870 020a F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  /tmp/ccIBY9uK.s 			page 170


 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3871              		.loc 1 169 97 view .LVU1017
 3872 020e 87EEA67A 		vdiv.f32	s14, s15, s13
 169:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 3873              		.loc 1 169 11 view .LVU1018
 3874 0212 ACEE87AA 		vfma.f32	s20, s25, s14
 3875              	.LVL237:
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 3876              		.loc 1 170 5 is_stmt 1 view .LVU1019
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 3877              		.loc 1 170 32 is_stmt 0 view .LVU1020
 3878 0216 B0EE4A0A 		vmov.f32	s0, s20
 3879 021a FFF7FEFF 		bl	our_arm_cos_f32
 3880              	.LVL238:
 3881 021e F0EE407A 		vmov.f32	s15, s0
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 3882              		.loc 1 171 32 view .LVU1021
 3883 0222 B0EE4A0A 		vmov.f32	s0, s20
 170:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 3884              		.loc 1 170 32 view .LVU1022
 3885 0226 B0EE67AA 		vmov.f32	s20, s15
 3886              	.LVL239:
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 3887              		.loc 1 171 5 is_stmt 1 view .LVU1023
 171:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 3888              		.loc 1 171 32 is_stmt 0 view .LVU1024
 3889 022a FFF7FEFF 		bl	our_arm_sin_f32
 3890              	.LVL240:
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 3891              		.loc 1 172 35 view .LVU1025
 3892 022e 2BEE407A 		vnmul.f32	s14, s22, s0
 173:Src/foc.cpp   **** 
 3893              		.loc 1 173 40 view .LVU1026
 3894 0232 60EE2A7A 		vmul.f32	s15, s0, s21
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 3895              		.loc 1 172 35 view .LVU1027
 3896 0236 AAEE2A7A 		vfma.f32	s14, s20, s21
 3897              	.LBB3585:
 3898              	.LBB3586:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 3899              		.loc 2 791 4 view .LVU1028
 3900 023a 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 3901              	.LVL241:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 3902              		.loc 2 791 4 view .LVU1029
 3903              	.LBE3586:
 3904              	.LBE3585:
 172:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 3905              		.loc 1 172 5 is_stmt 1 view .LVU1030
 173:Src/foc.cpp   **** 
 3906              		.loc 1 173 5 view .LVU1031
 173:Src/foc.cpp   **** 
 3907              		.loc 1 173 34 is_stmt 0 view .LVU1032
 3908 023e EAEE0B7A 		vfma.f32	s15, s20, s22
 3909              	.LVL242:
 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 3910              		.loc 1 176 5 is_stmt 1 view .LVU1033
ARM GAS  /tmp/ccIBY9uK.s 			page 171


 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 3911              		.loc 1 176 31 is_stmt 0 view .LVU1034
 3912 0242 68EE876A 		vmul.f32	s13, s17, s14
 177:Src/foc.cpp   **** 
 3913              		.loc 1 177 30 view .LVU1035
 3914 0246 68EEA78A 		vmul.f32	s17, s17, s15
 3915              	.LVL243:
 176:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 3916              		.loc 1 176 20 view .LVU1036
 3917 024a C4ED276A 		vstr.32	s13, [r4, #156]
 177:Src/foc.cpp   **** 
 3918              		.loc 1 177 5 is_stmt 1 view .LVU1037
 177:Src/foc.cpp   **** 
 3919              		.loc 1 177 19 is_stmt 0 view .LVU1038
 3920 024e C4ED288A 		vstr.32	s17, [r4, #160]
 179:Src/foc.cpp   **** 
 3921              		.loc 1 179 5 is_stmt 1 view .LVU1039
 3922              	.LVL244:
 3923              	.LBB3596:
 3924              	.LBI3596:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 3925              		.loc 3 352 12 view .LVU1040
 3926              	.LBB3597:
 3927              	.LBI3597:
 3928              		.loc 6 76 5 view .LVU1041
 3929              		.loc 6 76 5 is_stmt 0 view .LVU1042
 3930              	.LBE3597:
 3931              	.LBB3598:
 3932              	.LBI3598:
 3933              		.loc 6 76 5 is_stmt 1 view .LVU1043
 3934              		.loc 6 76 5 is_stmt 0 view .LVU1044
 3935              	.LBE3598:
 3936              	.LBE3596:
 3937              	.LBB3599:
 3938              	.LBI3585:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 3939              		.loc 2 789 2 is_stmt 1 view .LVU1045
 3940              	.LBB3593:
 3941              	.LBB3587:
 3942              	.LBI3587:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3943              		.loc 2 434 22 view .LVU1046
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3944              		.loc 2 434 22 is_stmt 0 view .LVU1047
 3945              	.LBE3587:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 3946              		.loc 2 791 4 view .LVU1048
 3947 0252 DBB1     		cbz	r3, .L139
 3948              	.LVL245:
 3949              	.LBB3588:
 3950              	.LBI3588:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 3951              		.loc 3 401 7 is_stmt 1 view .LVU1049
 3952              	.LBB3589:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 3953              		.loc 3 408 8 is_stmt 0 view .LVU1050
 3954 0254 8DED037A 		vstr.32	s14, [sp, #12]
ARM GAS  /tmp/ccIBY9uK.s 			page 172


 3955              		.loc 3 409 9 view .LVU1051
 3956 0258 CDED047A 		vstr.32	s15, [sp, #16]
 3957              	.LVL246:
 3958              	.L140:
 3959              		.loc 3 409 9 view .LVU1052
 3960              	.LBE3589:
 3961              	.LBE3588:
 3962              	.LBE3593:
 3963              	.LBE3599:
 181:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 3964              		.loc 1 181 5 is_stmt 1 view .LVU1053
 3965              	.LBB3600:
 182:Src/foc.cpp   ****         *ibus = mod_d * Id + mod_q * Iq;
 3966              		.loc 1 182 9 view .LVU1054
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 3967              		.loc 1 183 9 view .LVU1055
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 3968              		.loc 1 183 36 is_stmt 0 view .LVU1056
 3969 025c 28EE0B8A 		vmul.f32	s16, s16, s22
 3970              	.LVL247:
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 3971              		.loc 1 183 15 view .LVU1057
 3972 0260 0123     		movs	r3, #1
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 3973              		.loc 1 183 28 view .LVU1058
 3974 0262 A9EE2A8A 		vfma.f32	s16, s18, s21
 3975              	.LVL248:
 3976              	.LBB3601:
 3977              	.LBI3601:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3978              		.loc 2 701 2 is_stmt 1 view .LVU1059
 3979              	.LBB3602:
 3980              	.LBI3602:
 3981              		.loc 6 76 5 view .LVU1060
 3982              		.loc 6 76 5 is_stmt 0 view .LVU1061
 3983              	.LBE3602:
 3984              	.LBB3603:
 3985              	.LBI3603:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 3986              		.loc 2 608 28 is_stmt 1 view .LVU1062
 3987              	.LBB3604:
 3988              	.LBI3604:
 3989              		.loc 6 76 5 view .LVU1063
 3990              		.loc 6 76 5 is_stmt 0 view .LVU1064
 3991              	.LBE3604:
 3992              	.LBB3605:
 3993              	.LBI3605:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3994              		.loc 2 301 42 is_stmt 1 view .LVU1065
 3995              	.LBB3606:
 3996              	.LBI3606:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3997              		.loc 2 116 2 view .LVU1066
 3998              	.LBB3607:
 3999              	.LBI3607:
 4000              		.loc 6 76 5 view .LVU1067
 4001              		.loc 6 76 5 is_stmt 0 view .LVU1068
ARM GAS  /tmp/ccIBY9uK.s 			page 173


 4002              	.LBE3607:
 4003              	.LBB3608:
 4004              	.LBI3608:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 4005              		.loc 2 204 6 is_stmt 1 view .LVU1069
 4006              	.LBB3609:
 4007              	.LBI3609:
 4008              		.loc 6 76 5 view .LVU1070
 4009              		.loc 6 76 5 is_stmt 0 view .LVU1071
 4010              	.LBE3609:
 4011              	.LBE3608:
 4012              	.LBE3606:
 4013              	.LBE3605:
 4014              	.LBE3603:
 4015              	.LBE3601:
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 4016              		.loc 1 183 15 view .LVU1072
 4017 0266 89F80430 		strb	r3, [r9, #4]
 184:Src/foc.cpp   ****     }
 4018              		.loc 1 184 9 is_stmt 1 view .LVU1073
 184:Src/foc.cpp   ****     }
 4019              		.loc 1 184 31 is_stmt 0 view .LVU1074
 4020 026a 69EE889A 		vmul.f32	s19, s19, s16
 4021              	.LVL249:
 183:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 4022              		.loc 1 183 15 view .LVU1075
 4023 026e 89ED008A 		vstr.32	s16, [r9]
 184:Src/foc.cpp   ****     }
 4024              		.loc 1 184 16 view .LVU1076
 4025 0272 C4ED2B9A 		vstr.32	s19, [r4, #172]
 4026              	.LVL250:
 184:Src/foc.cpp   ****     }
 4027              		.loc 1 184 16 view .LVU1077
 4028              	.LBE3600:
 187:Src/foc.cpp   **** }
 4029              		.loc 1 187 5 is_stmt 1 view .LVU1078
 187:Src/foc.cpp   **** }
 4030              		.loc 1 187 5 is_stmt 0 view .LVU1079
 4031              	.LBE3615:
 4032              	.LBE3621:
 4033              	.LBE3627:
 4034              	.LBE3636:
  32:Src/foc.cpp   ****         return status;
 4035              		.loc 1 32 5 is_stmt 1 view .LVU1080
  34:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 4036              		.loc 1 34 12 view .LVU1081
 4037              	.LBB3637:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 4038              		.loc 2 917 22 view .LVU1082
 4039              	.LBB3635:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4040              		.loc 2 434 22 view .LVU1083
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4041              		.loc 2 434 22 is_stmt 0 view .LVU1084
 4042 0276 9EE7     		b	.L141
 4043              	.LVL251:
 4044              	.L146:
ARM GAS  /tmp/ccIBY9uK.s 			page 174


 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4045              		.loc 2 434 22 view .LVU1085
 4046              	.LBE3635:
 4047              	.LBE3637:
 4048              	.LBB3638:
 4049              	.LBB3628:
 4050              	.LBB3622:
 4051              	.LBB3616:
  91:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
 4052              		.loc 1 91 46 view .LVU1086
 4053 0278 4FF48010 		mov	r0, #1048576
 4054              	.LVL252:
  91:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
 4055              		.loc 1 91 46 view .LVU1087
 4056 027c 8EE7     		b	.L128
 4057              	.LVL253:
 4058              	.L151:
  91:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
 4059              		.loc 1 91 46 view .LVU1088
 4060              	.LBE3616:
 4061              	.LBE3622:
 4062              	.LBE3628:
 4063              	.LBE3638:
  35:Src/foc.cpp   ****     }
 4064              		.loc 1 35 46 view .LVU1089
 4065 027e 4FF00050 		mov	r0, #536870912
  51:Src/foc.cpp   **** 
 4066              		.loc 1 51 1 view .LVU1090
 4067 0282 07B0     		add	sp, sp, #28
 4068              	.LCFI38:
 4069              		.cfi_remember_state
 4070              		.cfi_def_cfa_offset 76
 4071              		@ sp needed
 4072 0284 BDEC0C8B 		vldm	sp!, {d8-d13}
 4073              	.LCFI39:
 4074              		.cfi_restore 90
 4075              		.cfi_restore 91
 4076              		.cfi_restore 88
 4077              		.cfi_restore 89
 4078              		.cfi_restore 86
 4079              		.cfi_restore 87
 4080              		.cfi_restore 84
 4081              		.cfi_restore 85
 4082              		.cfi_restore 82
 4083              		.cfi_restore 83
 4084              		.cfi_restore 80
 4085              		.cfi_restore 81
 4086              		.cfi_def_cfa_offset 28
 4087 0288 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4088              	.LVL254:
 4089              	.L139:
 4090              	.LCFI40:
 4091              		.cfi_restore_state
 4092              	.LBB3639:
 4093              	.LBB3629:
 4094              	.LBB3623:
 4095              	.LBB3617:
ARM GAS  /tmp/ccIBY9uK.s 			page 175


 4096              	.LBB3610:
 4097              	.LBB3594:
 4098              	.LBB3590:
 4099              	.LBI3590:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4100              		.loc 2 416 2 is_stmt 1 view .LVU1091
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4101              		.loc 2 416 2 is_stmt 0 view .LVU1092
 4102              	.LBE3590:
 4103              	.LBE3594:
 4104              	.LBE3610:
 4105              	.LBE3617:
 4106              	.LBE3623:
 4107              	.LBE3629:
 4108              	.LBE3639:
 4109              		.loc 4 175 3 is_stmt 1 view .LVU1093
 4110              	.LBB3640:
 4111              	.LBB3630:
 4112              	.LBB3624:
 4113              	.LBB3618:
 4114              	.LBB3611:
 4115              	.LBB3595:
 4116              	.LBB3592:
 4117              	.LBB3591:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 4118              		.loc 2 422 51 is_stmt 0 view .LVU1094
 4119 028c 0123     		movs	r3, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 4120              		.loc 2 419 4 view .LVU1095
 4121 028e 8DED037A 		vstr.32	s14, [sp, #12]
 4122 0292 CDED047A 		vstr.32	s15, [sp, #16]
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 4123              		.loc 2 422 51 view .LVU1096
 4124 0296 8DF81430 		strb	r3, [sp, #20]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4125              		.loc 2 423 2 view .LVU1097
 4126 029a DFE7     		b	.L140
 4127              	.LVL255:
 4128              	.L144:
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4129              		.loc 2 423 2 view .LVU1098
 4130              	.LBE3591:
 4131              	.LBE3592:
 4132              	.LBE3595:
 4133              	.LBE3611:
  81:Src/foc.cpp   ****     }
 4134              		.loc 1 81 46 view .LVU1099
 4135 029c 4FF08070 		mov	r0, #16777216
 4136              	.LVL256:
  81:Src/foc.cpp   ****     }
 4137              		.loc 1 81 46 view .LVU1100
 4138              	.LBE3618:
 4139              	.LBE3624:
 4140              	.LBE3630:
 4141              	.LBE3640:
  51:Src/foc.cpp   **** 
 4142              		.loc 1 51 1 view .LVU1101
ARM GAS  /tmp/ccIBY9uK.s 			page 176


 4143 02a0 07B0     		add	sp, sp, #28
 4144              	.LCFI41:
 4145              		.cfi_remember_state
 4146              		.cfi_def_cfa_offset 76
 4147              		@ sp needed
 4148 02a2 BDEC0C8B 		vldm	sp!, {d8-d13}
 4149              	.LCFI42:
 4150              		.cfi_restore 90
 4151              		.cfi_restore 91
 4152              		.cfi_restore 88
 4153              		.cfi_restore 89
 4154              		.cfi_restore 86
 4155              		.cfi_restore 87
 4156              		.cfi_restore 84
 4157              		.cfi_restore 85
 4158              		.cfi_restore 82
 4159              		.cfi_restore 83
 4160              		.cfi_restore 80
 4161              		.cfi_restore 81
 4162              		.cfi_def_cfa_offset 28
 4163 02a6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4164              	.LVL257:
 4165              	.L152:
 4166              	.LCFI43:
 4167              		.cfi_restore_state
  41:Src/foc.cpp   ****     }
 4168              		.loc 1 41 46 view .LVU1102
 4169 02aa 8020     		movs	r0, #128
  51:Src/foc.cpp   **** 
 4170              		.loc 1 51 1 view .LVU1103
 4171 02ac 07B0     		add	sp, sp, #28
 4172              	.LCFI44:
 4173              		.cfi_remember_state
 4174              		.cfi_def_cfa_offset 76
 4175              		@ sp needed
 4176 02ae BDEC0C8B 		vldm	sp!, {d8-d13}
 4177              	.LCFI45:
 4178              		.cfi_restore 90
 4179              		.cfi_restore 91
 4180              		.cfi_restore 88
 4181              		.cfi_restore 89
 4182              		.cfi_restore 86
 4183              		.cfi_restore 87
 4184              		.cfi_restore 84
 4185              		.cfi_restore 85
 4186              		.cfi_restore 82
 4187              		.cfi_restore 83
 4188              		.cfi_restore 80
 4189              		.cfi_restore 81
 4190              		.cfi_def_cfa_offset 28
 4191 02b2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4192              	.LVL258:
 4193              	.L161:
 4194              	.LCFI46:
 4195              		.cfi_restore_state
 4196              	.LBB3641:
 4197              	.LBB3631:
ARM GAS  /tmp/ccIBY9uK.s 			page 177


 4198              	.LBB3625:
 4199              	.LBB3619:
 4200              	.LBB3612:
 4201              	.LBB3578:
 152:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 4202              		.loc 1 152 13 is_stmt 1 view .LVU1104
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 4203              		.loc 1 155 43 is_stmt 0 view .LVU1105
 4204 02b6 9FED146A 		vldr.32	s12, .L162+20
 4205 02ba 67EE867A 		vmul.f32	s15, s15, s12
 156:Src/foc.cpp   ****         } else {
 4206              		.loc 1 156 43 view .LVU1106
 4207 02be 27EE067A 		vmul.f32	s14, s14, s12
 152:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 4208              		.loc 1 152 19 view .LVU1107
 4209 02c2 6AEEA6AA 		vmul.f32	s21, s21, s13
 4210              	.LVL259:
 153:Src/foc.cpp   ****             // TODO make decayfactor configurable
 4211              		.loc 1 153 13 is_stmt 1 view .LVU1108
 153:Src/foc.cpp   ****             // TODO make decayfactor configurable
 4212              		.loc 1 153 19 is_stmt 0 view .LVU1109
 4213 02c6 2BEE26BA 		vmul.f32	s22, s22, s13
 4214              	.LVL260:
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 4215              		.loc 1 155 13 is_stmt 1 view .LVU1110
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 4216              		.loc 1 155 43 is_stmt 0 view .LVU1111
 4217 02ca C4ED257A 		vstr.32	s15, [r4, #148]
 156:Src/foc.cpp   ****         } else {
 4218              		.loc 1 156 13 is_stmt 1 view .LVU1112
 156:Src/foc.cpp   ****         } else {
 4219              		.loc 1 156 43 is_stmt 0 view .LVU1113
 4220 02ce 84ED267A 		vstr.32	s14, [r4, #152]
 4221 02d2 94E7     		b	.L138
 4222              	.LVL261:
 4223              	.L148:
 134:Src/foc.cpp   ****         }
 4224              		.loc 1 134 50 view .LVU1114
 4225 02d4 4FF40010 		mov	r0, #2097152
 4226 02d8 60E7     		b	.L128
 4227              	.L147:
 130:Src/foc.cpp   ****         } else if (!Idq.has_value()) {
 4228              		.loc 1 130 50 view .LVU1115
 4229 02da 4FF40020 		mov	r0, #524288
 4230 02de 5DE7     		b	.L128
 4231              	.LVL262:
 4232              	.L158:
 4233              	.LBB3576:
 4234              	.LBB3574:
 4235              		.loc 7 464 27 view .LVU1116
 4236 02e0 FFF7FEFF 		bl	sqrtf
 4237              	.LVL263:
 4238              		.loc 7 464 27 view .LVU1117
 4239              	.LBE3574:
 4240              	.LBE3576:
 155:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 4241              		.loc 1 155 43 view .LVU1118
ARM GAS  /tmp/ccIBY9uK.s 			page 178


 4242 02e4 D4ED257A 		vldr.32	s15, [r4, #148]
 156:Src/foc.cpp   ****         } else {
 4243              		.loc 1 156 43 view .LVU1119
 4244 02e8 94ED267A 		vldr.32	s14, [r4, #152]
 4245              	.LBB3577:
 4246              	.LBB3575:
 4247              		.loc 7 464 27 view .LVU1120
 4248 02ec B0EE406A 		vmov.f32	s12, s0
 4249 02f0 38E7     		b	.L135
 4250              	.L163:
 4251 02f2 00BF     		.align	2
 4252              	.L162:
 4253 02f4 00000000 		.word	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 4254 02f8 E81F224D 		.word	1294082024
 4255 02fc ABAA2A3F 		.word	1059760811
 4256 0300 AC5C313F 		.word	1060199596
 4257 0304 00000000 		.word	current_meas_period
 4258 0308 A4707D3F 		.word	1065185444
 4259              	.LBE3575:
 4260              	.LBE3577:
 4261              	.LBE3578:
 4262              	.LBE3612:
 4263              	.LBE3619:
 4264              	.LBE3625:
 4265              	.LBE3631:
 4266              	.LBE3641:
 4267              		.cfi_endproc
 4268              	.LFE3459:
 4270              		.section	.text._ZThn4_N23FieldOrientedController6updateEm,"ax",%progbits
 4271              		.align	1
 4272              		.p2align 2,,3
 4273              		.global	_ZThn4_N23FieldOrientedController6updateEm
 4274              		.syntax unified
 4275              		.thumb
 4276              		.thumb_func
 4277              		.fpu fpv4-sp-d16
 4279              	_ZThn4_N23FieldOrientedController6updateEm:
 4280              	.LFB3771:
 4281              		.cfi_startproc
 4282              		@ args = 0, pretend = 0, frame = 0
 4283              		@ frame_needed = 0, uses_anonymous_args = 0
 4284 0000 08B5     		push	{r3, lr}
 4285              	.LCFI47:
 4286              		.cfi_def_cfa_offset 8
 4287              		.cfi_offset 3, -8
 4288              		.cfi_offset 14, -4
 4289              		.syntax unified
 4290              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4291 0002 EFF3108C 		MRS ip, primask
 4292              	@ 0 "" 2
 4293              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4294 0006 72B6     		cpsid i
 4295              	@ 0 "" 2
 4296              		.thumb
 4297              		.syntax unified
 4298 0008 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 4299 000c 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccIBY9uK.s 			page 179


 4300 000e 0164     		str	r1, [r0, #64]
 4301 0010 022B     		cmp	r3, #2
 4302 0012 80F84420 		strb	r2, [r0, #68]
 4303 0016 00F08C80 		beq	.L217
 4304 001a 012B     		cmp	r3, #1
 4305 001c 43D0     		beq	.L218
 4306 001e 002B     		cmp	r3, #0
 4307 0020 40F0C380 		bne	.L180
 4308 0024 8269     		ldr	r2, [r0, #24]	@ float
 4309 0026 C369     		ldr	r3, [r0, #28]	@ float
 4310              	.L168:
 4311 0028 90F85010 		ldrb	r1, [r0, #80]	@ zero_extendqisi2
 4312 002c 0029     		cmp	r1, #0
 4313 002e 43D1     		bne	.L219
 4314              	.L215:
 4315 0030 0121     		movs	r1, #1
 4316 0032 8264     		str	r2, [r0, #72]	@ float
 4317 0034 C364     		str	r3, [r0, #76]	@ float
 4318 0036 80F85010 		strb	r1, [r0, #80]
 4319              	.L188:
 4320 003a 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 4321 003e 022B     		cmp	r3, #2
 4322 0040 40D0     		beq	.L220
 4323              	.L173:
 4324 0042 012B     		cmp	r3, #1
 4325 0044 00F08280 		beq	.L221
 4326 0048 002B     		cmp	r3, #0
 4327 004a 40F0AE80 		bne	.L180
 4328 004e 426A     		ldr	r2, [r0, #36]	@ float
 4329 0050 836A     		ldr	r3, [r0, #40]	@ float
 4330              	.L176:
 4331 0052 90F85C10 		ldrb	r1, [r0, #92]	@ zero_extendqisi2
 4332 0056 0029     		cmp	r1, #0
 4333 0058 40D0     		beq	.L222
 4334              	.L190:
 4335 005a 4265     		str	r2, [r0, #84]	@ float
 4336 005c 8365     		str	r3, [r0, #88]	@ float
 4337              	.L181:
 4338 005e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 4339 0062 022B     		cmp	r3, #2
 4340 0064 43D0     		beq	.L223
 4341              	.L182:
 4342 0066 012B     		cmp	r3, #1
 4343 0068 00F08580 		beq	.L224
 4344 006c 002B     		cmp	r3, #0
 4345 006e 40F09C80 		bne	.L180
 4346 0072 D0ED0C7A 		vldr.32	s15, [r0, #48]
 4347 0076 0122     		movs	r2, #1
 4348              	.L183:
 4349 0078 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4350 007c C0ED187A 		vstr.32	s15, [r0, #96]
 4351 0080 022B     		cmp	r3, #2
 4352 0082 80F86420 		strb	r2, [r0, #100]
 4353 0086 44D0     		beq	.L225
 4354              	.L185:
 4355 0088 012B     		cmp	r3, #1
 4356 008a 69D0     		beq	.L226
ARM GAS  /tmp/ccIBY9uK.s 			page 180


 4357 008c 002B     		cmp	r3, #0
 4358 008e 40F08C80 		bne	.L180
 4359 0092 D0F838E0 		ldr	lr, [r0, #56]	@ float
 4360 0096 0123     		movs	r3, #1
 4361              	.L186:
 4362 0098 C0F868E0 		str	lr, [r0, #104]	@ float
 4363 009c 80F86C30 		strb	r3, [r0, #108]
 4364              		.syntax unified
 4365              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4366 00a0 8CF31088 		MSR primask, ip
 4367              	@ 0 "" 2
 4368              		.thumb
 4369              		.syntax unified
 4370 00a4 08BD     		pop	{r3, pc}
 4371              	.L218:
 4372 00a6 8369     		ldr	r3, [r0, #24]
 4373 00a8 002B     		cmp	r3, #0
 4374 00aa 46D0     		beq	.L169
 4375 00ac 90F85010 		ldrb	r1, [r0, #80]	@ zero_extendqisi2
 4376 00b0 1A68     		ldr	r2, [r3]	@ float
 4377 00b2 5B68     		ldr	r3, [r3, #4]	@ float
 4378 00b4 0029     		cmp	r1, #0
 4379 00b6 BBD0     		beq	.L215
 4380              	.L219:
 4381 00b8 C364     		str	r3, [r0, #76]	@ float
 4382 00ba 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 4383 00be 8264     		str	r2, [r0, #72]	@ float
 4384 00c0 022B     		cmp	r3, #2
 4385 00c2 BED1     		bne	.L173
 4386              	.L220:
 4387 00c4 436A     		ldr	r3, [r0, #36]
 4388 00c6 002B     		cmp	r3, #0
 4389 00c8 42D0     		beq	.L177
 4390 00ca 1A68     		ldr	r2, [r3]
 4391 00cc 002A     		cmp	r2, #0
 4392 00ce 3FD1     		bne	.L177
 4393 00d0 90F85C10 		ldrb	r1, [r0, #92]	@ zero_extendqisi2
 4394 00d4 5A68     		ldr	r2, [r3, #4]	@ float
 4395 00d6 9B68     		ldr	r3, [r3, #8]	@ float
 4396 00d8 0029     		cmp	r1, #0
 4397 00da BED1     		bne	.L190
 4398              	.L222:
 4399 00dc 8365     		str	r3, [r0, #88]	@ float
 4400 00de 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 4401 00e2 4265     		str	r2, [r0, #84]	@ float
 4402 00e4 0121     		movs	r1, #1
 4403 00e6 022B     		cmp	r3, #2
 4404 00e8 80F85C10 		strb	r1, [r0, #92]
 4405 00ec BBD1     		bne	.L182
 4406              	.L223:
 4407 00ee 026B     		ldr	r2, [r0, #48]
 4408 00f0 002A     		cmp	r2, #0
 4409 00f2 C1D0     		beq	.L183
 4410 00f4 1368     		ldr	r3, [r2]
 4411 00f6 002B     		cmp	r3, #0
 4412 00f8 4BD1     		bne	.L196
 4413 00fa 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
ARM GAS  /tmp/ccIBY9uK.s 			page 181


 4414 00fe D2ED017A 		vldr.32	s15, [r2, #4]
 4415 0102 022B     		cmp	r3, #2
 4416 0104 4FF00102 		mov	r2, #1
 4417 0108 C0ED187A 		vstr.32	s15, [r0, #96]
 4418 010c 80F86420 		strb	r2, [r0, #100]
 4419 0110 BAD1     		bne	.L185
 4420              	.L225:
 4421 0112 836B     		ldr	r3, [r0, #56]
 4422 0114 002B     		cmp	r3, #0
 4423 0116 BFD0     		beq	.L186
 4424 0118 1A68     		ldr	r2, [r3]
 4425 011a 002A     		cmp	r2, #0
 4426 011c 3BD1     		bne	.L199
 4427 011e D3F804E0 		ldr	lr, [r3, #4]	@ float
 4428 0122 C0F868E0 		str	lr, [r0, #104]	@ float
 4429 0126 0123     		movs	r3, #1
 4430 0128 80F86C30 		strb	r3, [r0, #108]
 4431              		.syntax unified
 4432              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4433 012c 8CF31088 		MSR primask, ip
 4434              	@ 0 "" 2
 4435              		.thumb
 4436              		.syntax unified
 4437 0130 08BD     		pop	{r3, pc}
 4438              	.L217:
 4439 0132 8369     		ldr	r3, [r0, #24]
 4440 0134 0BB1     		cbz	r3, .L169
 4441 0136 1A68     		ldr	r2, [r3]
 4442 0138 42B3     		cbz	r2, .L227
 4443              	.L169:
 4444 013a 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 4445 013e 002B     		cmp	r3, #0
 4446 0140 3FF47BAF 		beq	.L188
 4447 0144 0023     		movs	r3, #0
 4448 0146 80F85030 		strb	r3, [r0, #80]
 4449 014a 76E7     		b	.L188
 4450              	.L221:
 4451 014c 436A     		ldr	r3, [r0, #36]
 4452 014e D3B9     		cbnz	r3, .L228
 4453              	.L177:
 4454 0150 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 4455 0154 002B     		cmp	r3, #0
 4456 0156 82D0     		beq	.L181
 4457 0158 0023     		movs	r3, #0
 4458 015a 80F85C30 		strb	r3, [r0, #92]
 4459 015e 7EE7     		b	.L181
 4460              	.L226:
 4461 0160 826B     		ldr	r2, [r0, #56]
 4462 0162 02B3     		cbz	r2, .L200
 4463 0164 D2F800E0 		ldr	lr, [r2]	@ float
 4464 0168 C0F868E0 		str	lr, [r0, #104]	@ float
 4465 016c 80F86C30 		strb	r3, [r0, #108]
 4466              		.syntax unified
 4467              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4468 0170 8CF31088 		MSR primask, ip
 4469              	@ 0 "" 2
 4470              		.thumb
ARM GAS  /tmp/ccIBY9uK.s 			page 182


 4471              		.syntax unified
 4472 0174 08BD     		pop	{r3, pc}
 4473              	.L224:
 4474 0176 026B     		ldr	r2, [r0, #48]
 4475 0178 002A     		cmp	r2, #0
 4476 017a 3FF47DAF 		beq	.L183
 4477 017e D2ED007A 		vldr.32	s15, [r2]
 4478 0182 1A46     		mov	r2, r3
 4479 0184 78E7     		b	.L183
 4480              	.L228:
 4481 0186 1A68     		ldr	r2, [r3]	@ float
 4482 0188 5B68     		ldr	r3, [r3, #4]	@ float
 4483 018a 62E7     		b	.L176
 4484              	.L227:
 4485 018c 5A68     		ldr	r2, [r3, #4]	@ float
 4486 018e 9B68     		ldr	r3, [r3, #8]	@ float
 4487 0190 4AE7     		b	.L168
 4488              	.L196:
 4489 0192 0022     		movs	r2, #0
 4490 0194 70E7     		b	.L183
 4491              	.L199:
 4492 0196 0023     		movs	r3, #0
 4493 0198 C0F868E0 		str	lr, [r0, #104]	@ float
 4494 019c 80F86C30 		strb	r3, [r0, #108]
 4495              		.syntax unified
 4496              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4497 01a0 8CF31088 		MSR primask, ip
 4498              	@ 0 "" 2
 4499              		.thumb
 4500              		.syntax unified
 4501 01a4 08BD     		pop	{r3, pc}
 4502              	.L200:
 4503 01a6 1346     		mov	r3, r2
 4504 01a8 76E7     		b	.L186
 4505              	.L180:
 4506 01aa FFF7FEFF 		bl	abort
 4507              		.cfi_endproc
 4508              	.LFE3771:
 4510              		.global	_ZTV24AlphaBetaFrameController
 4511              		.global	_ZTV23FieldOrientedController
 4512 01ae 00BF     		.section	.rodata._ZTV23FieldOrientedController,"a"
 4513              		.align	2
 4516              	_ZTV23FieldOrientedController:
 4517 0000 00000000 		.word	0
 4518 0004 00000000 		.word	0
 4519 0008 00000000 		.word	_ZN23FieldOrientedController5resetEv
 4520 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 4521 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 4522 0014 00000000 		.word	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 4523 0018 00000000 		.word	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 4524 001c 00000000 		.word	_ZN23FieldOrientedController6updateEm
 4525 0020 FCFFFFFF 		.word	-4
 4526 0024 00000000 		.word	0
 4527 0028 00000000 		.word	_ZThn4_N23FieldOrientedController6updateEm
 4528              		.section	.rodata._ZTV24AlphaBetaFrameController,"a"
 4529              		.align	2
 4532              	_ZTV24AlphaBetaFrameController:
ARM GAS  /tmp/ccIBY9uK.s 			page 183


 4533 0000 00000000 		.word	0
 4534 0004 00000000 		.word	0
 4535 0008 00000000 		.word	__cxa_pure_virtual
 4536 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 4537 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 4538 0014 00000000 		.word	__cxa_pure_virtual
 4539 0018 00000000 		.word	__cxa_pure_virtual
 4540              		.text
 4541              	.Letext0:
 4542              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 4543              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
 4544              		.file 15 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 4545              		.file 16 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 4546              		.file 17 "Inc/interfaces.hpp"
 4547              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 4548              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 4549              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 4550              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 4551              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 4552              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 4553              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 4554              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 4555              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 4556              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 4557              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 4558              		.file 29 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 4559              		.file 30 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 4560              		.file 31 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 4561              		.file 32 "Inc/foc.hpp"
 4562              		.file 33 "Inc/phase_control_law.hpp"
 4563              		.file 34 "Inc/main.h"
 4564              		.file 35 "<built-in>"
ARM GAS  /tmp/ccIBY9uK.s 			page 184


DEFINED SYMBOLS
                            *ABS*:0000000000000000 foc.cpp
     /tmp/ccIBY9uK.s:18     .text._ZN23FieldOrientedController5resetEv:0000000000000000 $t
     /tmp/ccIBY9uK.s:27     .text._ZN23FieldOrientedController5resetEv:0000000000000000 _ZN23FieldOrientedController5resetEv
     /tmp/ccIBY9uK.s:126    .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccIBY9uK.s:134    .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccIBY9uK.s:312    .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccIBY9uK.s:320    .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccIBY9uK.s:1121   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000268 $d
     /tmp/ccIBY9uK.s:1136   .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 $t
     /tmp/ccIBY9uK.s:1144   .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 _ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
     /tmp/ccIBY9uK.s:1462   .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:00000000000000d8 $d
     /tmp/ccIBY9uK.s:1479   .text._ZN23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccIBY9uK.s:1487   .text._ZN23FieldOrientedController6updateEm:0000000000000000 _ZN23FieldOrientedController6updateEm
     /tmp/ccIBY9uK.s:3275   .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 $t
     /tmp/ccIBY9uK.s:3283   .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 _ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
     /tmp/ccIBY9uK.s:4253   .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:00000000000002f4 $d
     /tmp/ccIBY9uK.s:4271   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccIBY9uK.s:4279   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 _ZThn4_N23FieldOrientedController6updateEm
     /tmp/ccIBY9uK.s:4532   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 _ZTV24AlphaBetaFrameController
     /tmp/ccIBY9uK.s:4516   .rodata._ZTV23FieldOrientedController:0000000000000000 _ZTV23FieldOrientedController
     /tmp/ccIBY9uK.s:4513   .rodata._ZTV23FieldOrientedController:0000000000000000 $d
     /tmp/ccIBY9uK.s:4529   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 $d

UNDEFINED SYMBOLS
our_arm_cos_f32
our_arm_sin_f32
sqrtf
current_meas_period
abort
SVM
__cxa_pure_virtual
