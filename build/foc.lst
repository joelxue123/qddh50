ARM GAS  /tmp/ccSXOI3d.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"foc.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
  18              		.align	1
  19              		.weak	_ZnwjPv
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZnwjPv:
  27              	.LFB658:
  28              		.file 1 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
ARM GAS  /tmp/ccSXOI3d.s 			page 2


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 3


  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccSXOI3d.s 			page 4


 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
  29              		.loc 1 175 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  45 0008 3960     		str	r1, [r7]
  46              		.loc 1 175 10
  47 000a 3B68     		ldr	r3, [r7]
  48              		.loc 1 175 15
  49 000c 1846     		mov	r0, r3
  50 000e 0C37     		adds	r7, r7, #12
  51              	.LCFI3:
  52              		.cfi_def_cfa_offset 4
  53 0010 BD46     		mov	sp, r7
  54              	.LCFI4:
ARM GAS  /tmp/ccSXOI3d.s 			page 5


  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0012 5DF8047B 		ldr	r7, [sp], #4
  58              	.LCFI5:
  59              		.cfi_restore 7
  60              		.cfi_def_cfa_offset 0
  61 0016 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE658:
  65              		.section	.text._ZSt27__throw_bad_optional_accessv,"axG",%progbits,_ZSt27__throw_bad_optional_acces
  66              		.align	1
  67              		.weak	_ZSt27__throw_bad_optional_accessv
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	_ZSt27__throw_bad_optional_accessv:
  74              	.LFB722:
  75              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
ARM GAS  /tmp/ccSXOI3d.s 			page 6


  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
ARM GAS  /tmp/ccSXOI3d.s 			page 7


  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
  76              		.loc 2 102 3
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              	.LCFI6:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 00AF     		add	r7, sp, #0
  86              	.LCFI7:
  87              		.cfi_def_cfa_register 7
  88              		.loc 2 102 5
  89 0004 FFF7FEFF 		bl	abort
  90              		.cfi_endproc
  91              	.LFE722:
  93              		.section	.text._ZSt26__throw_bad_variant_accessPKc,"axG",%progbits,_ZSt26__throw_bad_variant_acces
  94              		.align	1
  95              		.weak	_ZSt26__throw_bad_variant_accessPKc
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu fpv4-sp-d16
 101              	_ZSt26__throw_bad_variant_accessPKc:
 102              	.LFB944:
 103              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 8


  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
ARM GAS  /tmp/ccSXOI3d.s 			page 9


  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
ARM GAS  /tmp/ccSXOI3d.s 			page 10


 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 11


 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
ARM GAS  /tmp/ccSXOI3d.s 			page 12


 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
ARM GAS  /tmp/ccSXOI3d.s 			page 13


 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
ARM GAS  /tmp/ccSXOI3d.s 			page 14


 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
ARM GAS  /tmp/ccSXOI3d.s 			page 15


 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
ARM GAS  /tmp/ccSXOI3d.s 			page 16


 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
ARM GAS  /tmp/ccSXOI3d.s 			page 17


 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
ARM GAS  /tmp/ccSXOI3d.s 			page 18


 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
ARM GAS  /tmp/ccSXOI3d.s 			page 19


 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
ARM GAS  /tmp/ccSXOI3d.s 			page 20


 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
ARM GAS  /tmp/ccSXOI3d.s 			page 21


 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
ARM GAS  /tmp/ccSXOI3d.s 			page 22


 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
ARM GAS  /tmp/ccSXOI3d.s 			page 23


 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
ARM GAS  /tmp/ccSXOI3d.s 			page 24


 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
ARM GAS  /tmp/ccSXOI3d.s 			page 25


 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 26


1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
ARM GAS  /tmp/ccSXOI3d.s 			page 27


1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 28


1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
ARM GAS  /tmp/ccSXOI3d.s 			page 29


1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 104              		.loc 3 1275 3
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccSXOI3d.s 			page 30


 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0000 80B5     		push	{r7, lr}
 109              	.LCFI8:
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 82B0     		sub	sp, sp, #8
 114              	.LCFI9:
 115              		.cfi_def_cfa_offset 16
 116 0004 00AF     		add	r7, sp, #0
 117              	.LCFI10:
 118              		.cfi_def_cfa_register 7
 119 0006 7860     		str	r0, [r7, #4]
 120              		.loc 3 1275 5
 121 0008 FFF7FEFF 		bl	abort
 122              		.cfi_endproc
 123              	.LFE944:
 125              		.section	.rodata
 126              		.align	2
 127              	.LC0:
 128 0000 7374643A 		.ascii	"std::get: variant is valueless\000"
 128      3A676574 
 128      3A207661 
 128      7269616E 
 128      74206973 
 129 001f 00       		.align	2
 130              	.LC1:
 131 0020 7374643A 		.ascii	"std::get: wrong index for variant\000"
 131      3A676574 
 131      3A207772 
 131      6F6E6720 
 131      696E6465 
 132              		.section	.text._ZSt26__throw_bad_variant_accessb,"axG",%progbits,_ZSt26__throw_bad_variant_accessb
 133              		.align	1
 134              		.weak	_ZSt26__throw_bad_variant_accessb
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	_ZSt26__throw_bad_variant_accessb:
 141              	.LFB945:
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
 142              		.loc 3 1279 3
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              	.LCFI11:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0002 82B0     		sub	sp, sp, #8
 152              	.LCFI12:
 153              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccSXOI3d.s 			page 31


 154 0004 00AF     		add	r7, sp, #0
 155              	.LCFI13:
 156              		.cfi_def_cfa_register 7
 157 0006 0346     		mov	r3, r0
 158 0008 FB71     		strb	r3, [r7, #7]
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
 159              		.loc 3 1280 5
 160 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 161 000c 002B     		cmp	r3, #0
 162 000e 03D0     		beq	.L6
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 163              		.loc 3 1281 33 discriminator 1
 164 0010 0548     		ldr	r0, .L9
 165 0012 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 166              		.loc 3 1284 3 discriminator 1
 167 0016 02E0     		b	.L8
 168              	.L6:
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 169              		.loc 3 1283 33
 170 0018 0448     		ldr	r0, .L9+4
 171 001a FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 172              	.L8:
 173              		.loc 3 1284 3
 174 001e 00BF     		nop
 175 0020 0837     		adds	r7, r7, #8
 176              	.LCFI14:
 177              		.cfi_def_cfa_offset 8
 178 0022 BD46     		mov	sp, r7
 179              	.LCFI15:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0024 80BD     		pop	{r7, pc}
 183              	.L10:
 184 0026 00BF     		.align	2
 185              	.L9:
 186 0028 00000000 		.word	.LC0
 187 002c 20000000 		.word	.LC1
 188              		.cfi_endproc
 189              	.LFE945:
 191              		.section	.text.cpu_enter_critical,"axG",%progbits,cpu_enter_critical,comdat
 192              		.align	1
 193              		.weak	cpu_enter_critical
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	cpu_enter_critical:
 200              	.LFB1326:
 201              		.file 4 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 32


   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
  48:Inc/low_level.h **** }
  49:Inc/low_level.h **** 
  50:Inc/low_level.h **** // Initalisation
  51:Inc/low_level.h **** void start_adc_pwm();
  52:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  53:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  54:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  55:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  56:Inc/low_level.h **** void start_general_purpose_adc();
  57:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  58:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  60:Inc/low_level.h **** void pwm_in_init();
  61:Inc/low_level.h **** void start_analog_thread();
  62:Inc/low_level.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 33


  63:Inc/low_level.h **** void update_brake_current();
  64:Inc/low_level.h **** 
  65:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 202              		.loc 4 65 38
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 8
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 0000 80B4     		push	{r7}
 208              	.LCFI16:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 7, -4
 211 0002 83B0     		sub	sp, sp, #12
 212              	.LCFI17:
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI18:
 216              		.cfi_def_cfa_register 7
 217              	.LBB8:
 218              	.LBB9:
 219              		.file 5 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/ccSXOI3d.s 			page 34


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccSXOI3d.s 			page 35


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 36


 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  /tmp/ccSXOI3d.s 			page 37


 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccSXOI3d.s 			page 38


 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 39


 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccSXOI3d.s 			page 40


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
ARM GAS  /tmp/ccSXOI3d.s 			page 41


 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 220              		.loc 5 453 3
 221              		.syntax unified
 222              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 223 0006 EFF31083 		MRS r3, primask
 224              	@ 0 "" 2
 225              		.thumb
 226              		.syntax unified
 227 000a 3B60     		str	r3, [r7]
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 228              		.loc 5 454 16
 229 000c 3B68     		ldr	r3, [r7]
 230              	.LBE9:
 231              	.LBE8:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 232              		.loc 4 66 37
 233 000e 7B60     		str	r3, [r7, #4]
 234              	.LBB10:
 235              	.LBB11:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 236              		.loc 5 209 3
 237              		.syntax unified
 238              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 239 0010 72B6     		cpsid i
 240              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241              		.loc 5 210 1
 242              		.thumb
 243              		.syntax unified
 244 0012 00BF     		nop
 245              	.LBE11:
 246              	.LBE10:
  67:Inc/low_level.h ****     __disable_irq();
  68:Inc/low_level.h ****     return primask;
 247              		.loc 4 68 12
 248 0014 7B68     		ldr	r3, [r7, #4]
  69:Inc/low_level.h **** }
 249              		.loc 4 69 1
 250 0016 1846     		mov	r0, r3
 251 0018 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccSXOI3d.s 			page 42


 252              	.LCFI19:
 253              		.cfi_def_cfa_offset 4
 254 001a BD46     		mov	sp, r7
 255              	.LCFI20:
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 001c 5DF8047B 		ldr	r7, [sp], #4
 259              	.LCFI21:
 260              		.cfi_restore 7
 261              		.cfi_def_cfa_offset 0
 262 0020 7047     		bx	lr
 263              		.cfi_endproc
 264              	.LFE1326:
 266              		.section	.text.cpu_exit_critical,"axG",%progbits,cpu_exit_critical,comdat
 267              		.align	1
 268              		.weak	cpu_exit_critical
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	cpu_exit_critical:
 275              	.LFB1327:
  70:Inc/low_level.h **** 
  71:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
 276              		.loc 4 71 55
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 16
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 0000 80B4     		push	{r7}
 282              	.LCFI22:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 7, -4
 285 0002 85B0     		sub	sp, sp, #20
 286              	.LCFI23:
 287              		.cfi_def_cfa_offset 24
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI24:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 292 0008 7B68     		ldr	r3, [r7, #4]
 293 000a FB60     		str	r3, [r7, #12]
 294              	.LBB12:
 295              	.LBB13:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 43


 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 296              		.loc 5 481 3
 297 000c FB68     		ldr	r3, [r7, #12]
 298              		.syntax unified
 299              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 300 000e 83F31088 		MSR primask, r3
 301              	@ 0 "" 2
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 302              		.loc 5 482 1
 303              		.thumb
 304              		.syntax unified
 305 0012 00BF     		nop
 306              	.LBE13:
 307              	.LBE12:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
  73:Inc/low_level.h **** }
 308              		.loc 4 73 1
 309 0014 00BF     		nop
 310 0016 1437     		adds	r7, r7, #20
 311              	.LCFI25:
 312              		.cfi_def_cfa_offset 4
 313 0018 BD46     		mov	sp, r7
 314              	.LCFI26:
 315              		.cfi_def_cfa_register 13
 316              		@ sp needed
 317 001a 5DF8047B 		ldr	r7, [sp], #4
 318              	.LCFI27:
 319              		.cfi_restore 7
 320              		.cfi_def_cfa_offset 0
 321 001e 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE1327:
 325              		.section	.text._ZSt3absl,"axG",%progbits,_ZSt3absl,comdat
 326              		.align	1
 327              		.weak	_ZSt3absl
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	_ZSt3absl:
 334              	.LFB1328:
 335              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 44


   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
 336              		.loc 6 56 17
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccSXOI3d.s 			page 45


 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 80B4     		push	{r7}
 342              	.LCFI28:
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 7, -4
 345 0002 83B0     		sub	sp, sp, #12
 346              	.LCFI29:
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              	.LCFI30:
 350              		.cfi_def_cfa_register 7
 351 0006 7860     		str	r0, [r7, #4]
 352              		.loc 6 56 44
 353 0008 7B68     		ldr	r3, [r7, #4]
 354 000a 002B     		cmp	r3, #0
 355 000c B8BF     		it	lt
 356 000e 5B42     		rsblt	r3, r3, #0
 357              		.loc 6 56 47
 358 0010 1846     		mov	r0, r3
 359 0012 0C37     		adds	r7, r7, #12
 360              	.LCFI31:
 361              		.cfi_def_cfa_offset 4
 362 0014 BD46     		mov	sp, r7
 363              	.LCFI32:
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 0016 5DF8047B 		ldr	r7, [sp], #4
 367              	.LCFI33:
 368              		.cfi_restore 7
 369              		.cfi_def_cfa_offset 0
 370 001a 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE1328:
 374              		.section	.text._ZSt4sqrtf,"axG",%progbits,_ZSt4sqrtf,comdat
 375              		.align	1
 376              		.weak	_ZSt4sqrtf
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	_ZSt4sqrtf:
 383              	.LFB1389:
 384              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  /tmp/ccSXOI3d.s 			page 46


  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
ARM GAS  /tmp/ccSXOI3d.s 			page 47


  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 48


 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
ARM GAS  /tmp/ccSXOI3d.s 			page 49


 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
ARM GAS  /tmp/ccSXOI3d.s 			page 50


 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(long double __x)
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorl(__x); }
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     floor(_Tp __x)
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_floor(__x); }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fmod;
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(float __x, float __y)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(long double __x, long double __y)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::frexp;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  /tmp/ccSXOI3d.s 			page 51


 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(float __x, int* __exp)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(long double __x, int* __exp)
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ldexp;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(float __x, int __exp)
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(long double __x, int __exp)
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(float __x)
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logf(__x); }
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(long double __x)
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logl(__x); }
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log(_Tp __x)
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log(__x); }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log10;
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  /tmp/ccSXOI3d.s 			page 52


 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(float __x)
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10f(__x); }
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(long double __x)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10l(__x); }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log10(_Tp __x)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log10(__x); }
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::modf;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(float __x, float* __iptr)
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::pow;
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, float __y)
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, long double __y)
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #if __cplusplus < 201103L
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline double
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(double __x, int __i)
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, int __n)
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, int __n)
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
ARM GAS  /tmp/ccSXOI3d.s 			page 53


 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sin;
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(float __x)
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinf(__x); }
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(long double __x)
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinl(__x); }
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sin(_Tp __x)
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sin(__x); }
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sinh;
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(float __x)
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(long double __x)
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sinh(_Tp __x)
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sinh(__x); }
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sqrt;
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sqrt(float __x)
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sqrtf(__x); }
 385              		.loc 7 464 3
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccSXOI3d.s 			page 54


 390              	.LCFI34:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              	.LCFI35:
 396              		.cfi_def_cfa_offset 16
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI36:
 399              		.cfi_def_cfa_register 7
 400 0006 87ED010A 		vstr.32	s0, [r7, #4]
 401              		.loc 7 464 27
 402 000a 97ED010A 		vldr.32	s0, [r7, #4]
 403 000e FFF7FEFF 		bl	sqrtf
 404 0012 F0EE407A 		vmov.f32	s15, s0
 405              		.loc 7 464 34
 406 0016 B0EE670A 		vmov.f32	s0, s15
 407 001a 0837     		adds	r7, r7, #8
 408              	.LCFI37:
 409              		.cfi_def_cfa_offset 8
 410 001c BD46     		mov	sp, r7
 411              	.LCFI38:
 412              		.cfi_def_cfa_register 13
 413              		@ sp needed
 414 001e 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE1389:
 418              		.section	.rodata._ZL12one_by_sqrt3,"a"
 419              		.align	2
 422              	_ZL12one_by_sqrt3:
 423 0000 3ACD133F 		.word	1058262330
 424              		.section	.rodata._ZL12two_by_sqrt3,"a"
 425              		.align	2
 428              	_ZL12two_by_sqrt3:
 429 0000 3ACD933F 		.word	1066650938
 430              		.section	.rodata._ZL10sqrt3_by_2,"a"
 431              		.align	2
 434              	_ZL10sqrt3_by_2:
 435 0000 D7B35D3F 		.word	1063105495
 436              		.section	.text._Z6is_nanf,"axG",%progbits,_Z6is_nanf,comdat
 437              		.align	1
 438              		.weak	_Z6is_nanf
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	_Z6is_nanf:
 445              	.LFB1886:
 446              		.file 8 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
ARM GAS  /tmp/ccSXOI3d.s 			page 55


   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 56


  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
  90:Inc/utils.hpp ****     if (out < 0.0f)
  91:Inc/utils.hpp ****         out += y;
  92:Inc/utils.hpp ****     return out;
  93:Inc/utils.hpp **** }
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 102:Inc/utils.hpp **** }
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 106:Inc/utils.hpp **** }
 107:Inc/utils.hpp **** 
 108:Inc/utils.hpp **** // Compute rising edge timings (0.0 - 1.0) as a function of alpha-beta
 109:Inc/utils.hpp **** // as per the magnitude invariant clarke transform
 110:Inc/utils.hpp **** // The magnitude of the alpha-beta vector may not be larger than sqrt(3)/2
 111:Inc/utils.hpp **** // Returns 0 on success, and -1 if the input was out of range
 112:Inc/utils.hpp **** int SVM(float alpha, float beta, float* tA, float* tB, float* tC);
 113:Inc/utils.hpp **** 
 114:Inc/utils.hpp **** float fast_atan2(float y, float x);
 115:Inc/utils.hpp **** float horner_fma(float x, const float *coeffs, size_t count);
 116:Inc/utils.hpp **** int mod(int dividend, int divisor);
 117:Inc/utils.hpp **** 
 118:Inc/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
 119:Inc/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
 120:Inc/utils.hpp **** int is_in_the_future(uint32_t time_ms);
 121:Inc/utils.hpp **** 
 122:Inc/utils.hpp **** uint32_t micros(void);
ARM GAS  /tmp/ccSXOI3d.s 			page 57


 123:Inc/utils.hpp **** void delay_us(uint32_t us);
 124:Inc/utils.hpp **** 
 125:Inc/utils.hpp **** float our_arm_sin_f32(float x);
 126:Inc/utils.hpp **** float our_arm_cos_f32(float x);
 127:Inc/utils.hpp **** uint8_t calcCRC(uint8_t * buffer, uint8_t length);
 128:Inc/utils.hpp **** int32_t fsgn(float num);
 129:Inc/utils.hpp **** int32_t saturation(int32_t num, int32_t min, int32_t max);
 130:Inc/utils.hpp **** typedef struct {
 131:Inc/utils.hpp ****     float w0;  // Notch frequency
 132:Inc/utils.hpp ****     float r;   // Notch width parameter
 133:Inc/utils.hpp ****     float a1, a2, b1, b2;  // Filter coefficients
 134:Inc/utils.hpp ****     float x1, x2, y1, y2;  // State variables
 135:Inc/utils.hpp **** } NotchFilter;
 136:Inc/utils.hpp **** void initNotchFilter(NotchFilter* filter, float frequency, float sampleRate, float bandwidth);
 137:Inc/utils.hpp **** float applyNotchFilter(NotchFilter* filter, float input);
 138:Inc/utils.hpp **** 
 139:Inc/utils.hpp **** void test_svm(float mod_q, float mod_d, float *theta, float *ta, float *tb, float *tc) ;
 140:Inc/utils.hpp **** 
 141:Inc/utils.hpp **** #ifdef __cplusplus
 142:Inc/utils.hpp **** }
 143:Inc/utils.hpp **** #endif
 144:Inc/utils.hpp **** 
 145:Inc/utils.hpp **** 
 146:Inc/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 147:Inc/utils.hpp **** inline bool is_nan(float x) {
 447              		.loc 8 147 29
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              	.LCFI39:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 0002 83B0     		sub	sp, sp, #12
 457              	.LCFI40:
 458              		.cfi_def_cfa_offset 16
 459 0004 00AF     		add	r7, sp, #0
 460              	.LCFI41:
 461              		.cfi_def_cfa_register 7
 462 0006 87ED010A 		vstr.32	s0, [r7, #4]
 148:Inc/utils.hpp ****     return __builtin_isnan(x);
 463              		.loc 8 148 27
 464 000a 97ED017A 		vldr.32	s14, [r7, #4]
 465 000e D7ED017A 		vldr.32	s15, [r7, #4]
 466 0012 B4EE677A 		vcmp.f32	s14, s15
 467 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 468 001a 6CBF     		ite	vs
 469 001c 0123     		movvs	r3, #1
 470 001e 0023     		movvc	r3, #0
 471 0020 DBB2     		uxtb	r3, r3
 472              		.loc 8 148 29
 473 0022 002B     		cmp	r3, #0
 474 0024 14BF     		ite	ne
 475 0026 0123     		movne	r3, #1
 476 0028 0023     		moveq	r3, #0
 477 002a DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccSXOI3d.s 			page 58


 149:Inc/utils.hpp **** }
 478              		.loc 8 149 1
 479 002c 1846     		mov	r0, r3
 480 002e 0C37     		adds	r7, r7, #12
 481              	.LCFI42:
 482              		.cfi_def_cfa_offset 4
 483 0030 BD46     		mov	sp, r7
 484              	.LCFI43:
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 0032 5DF8047B 		ldr	r7, [sp], #4
 488              	.LCFI44:
 489              		.cfi_restore 7
 490              		.cfi_def_cfa_offset 0
 491 0036 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE1886:
 495              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
 496              		.align	2
 499              	_ZL16OFFSET_TAB_CCMRx:
 500 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
 500      04040404 
 500      3838
 501              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
 502              		.align	2
 505              	_ZL14SHIFT_TAB_OCxx:
 506 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
 506      00000800 
 506      0008
 507              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
 508              		.align	2
 511              	_ZL14SHIFT_TAB_ICxx:
 512 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
 512      00000800 
 512      0000
 513              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
 514              		.align	2
 517              	_ZL14SHIFT_TAB_CCxP:
 518 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
 518      080A0C0E 
 518      1014
 519              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
 520              		.align	2
 523              	_ZL14SHIFT_TAB_OISx:
 524 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
 524      04050607 
 524      080A
 525              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
 526              		.align	2
 529              	_ZL19USART_PRESCALER_TAB:
 530 0000 01000000 		.word	1
 531 0004 02000000 		.word	2
 532 0008 04000000 		.word	4
 533 000c 06000000 		.word	6
 534 0010 08000000 		.word	8
 535 0014 0A000000 		.word	10
 536 0018 0C000000 		.word	12
ARM GAS  /tmp/ccSXOI3d.s 			page 59


 537 001c 10000000 		.word	16
 538 0020 20000000 		.word	32
 539 0024 40000000 		.word	64
 540 0028 80000000 		.word	128
 541 002c 00010000 		.word	256
 542              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
 543              		.align	2
 546              	_ZL18CHANNEL_OFFSET_TAB:
 547 0000 081C3044 		.ascii	"\010\0340DXl"
 547      586C
 548              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev,"axG",%progbits,_Z
 549              		.align	1
 550              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 554              		.fpu fpv4-sp-d16
 556              	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:
 557              	.LFB3433:
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
ARM GAS  /tmp/ccSXOI3d.s 			page 60


 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
ARM GAS  /tmp/ccSXOI3d.s 			page 61


 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 558              		.loc 2 200 14
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 80B4     		push	{r7}
 564              	.LCFI45:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              	.LCFI46:
 569              		.cfi_def_cfa_offset 16
 570 0004 00AF     		add	r7, sp, #0
 571              	.LCFI47:
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574              		.loc 2 200 49
 575 0008 7B68     		ldr	r3, [r7, #4]
 576 000a 1846     		mov	r0, r3
 577 000c 0C37     		adds	r7, r7, #12
 578              	.LCFI48:
 579              		.cfi_def_cfa_offset 4
 580 000e BD46     		mov	sp, r7
 581              	.LCFI49:
 582              		.cfi_def_cfa_register 13
 583              		@ sp needed
 584 0010 5DF8047B 		ldr	r7, [sp], #4
 585              	.LCFI50:
 586              		.cfi_restore 7
 587              		.cfi_def_cfa_offset 0
 588 0014 7047     		bx	lr
 589              		.cfi_endproc
 590              	.LFE3433:
 592              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev,"axG",%progbits,_ZNSt22_Optional_pay
 593              		.align	1
 594              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:
 601              	.LFB3434:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 602              		.loc 2 111 7
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI51:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 82B0     		sub	sp, sp, #8
 612              	.LCFI52:
ARM GAS  /tmp/ccSXOI3d.s 			page 62


 613              		.cfi_def_cfa_offset 16
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI53:
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 618              	.LBB14:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 619              		.loc 2 111 7
 620 0008 7B68     		ldr	r3, [r7, #4]
 621 000a 1846     		mov	r0, r3
 622 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
 623 0010 7B68     		ldr	r3, [r7, #4]
 624 0012 0022     		movs	r2, #0
 625 0014 1A72     		strb	r2, [r3, #8]
 626              	.LBE14:
 627 0016 7B68     		ldr	r3, [r7, #4]
 628 0018 1846     		mov	r0, r3
 629 001a 0837     		adds	r7, r7, #8
 630              	.LCFI54:
 631              		.cfi_def_cfa_offset 8
 632 001c BD46     		mov	sp, r7
 633              	.LCFI55:
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 001e 80BD     		pop	{r7, pc}
 637              		.cfi_endproc
 638              	.LFE3434:
 640              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev
 641              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev,_ZNSt22_Optional_payload_baseISt4pairIff
 642              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev,"axG",%progbits,_ZNSt17_Optio
 643              		.align	1
 644              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv4-sp-d16
 650              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:
 651              	.LFB3436:
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
ARM GAS  /tmp/ccSXOI3d.s 			page 63


 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
ARM GAS  /tmp/ccSXOI3d.s 			page 64


 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
ARM GAS  /tmp/ccSXOI3d.s 			page 65


 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 652              		.loc 2 361 7
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 80B5     		push	{r7, lr}
 657              	.LCFI56:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 82B0     		sub	sp, sp, #8
 662              	.LCFI57:
 663              		.cfi_def_cfa_offset 16
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI58:
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 668              	.LBB15:
 669              		.loc 2 361 7
 670 0008 7B68     		ldr	r3, [r7, #4]
 671 000a 1846     		mov	r0, r3
 672 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
 673              	.LBE15:
 674 0010 7B68     		ldr	r3, [r7, #4]
 675 0012 1846     		mov	r0, r3
 676 0014 0837     		adds	r7, r7, #8
 677              	.LCFI59:
 678              		.cfi_def_cfa_offset 8
 679 0016 BD46     		mov	sp, r7
 680              	.LCFI60:
ARM GAS  /tmp/ccSXOI3d.s 			page 66


 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 0018 80BD     		pop	{r7, pc}
 684              		.cfi_endproc
 685              	.LFE3436:
 687              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
 688              		.thumb_set _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev,_ZNSt17_Optional_payloadISt4pairI
 689              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev,"axG",%progbits,_ZNSt14_Optional_bas
 690              		.align	1
 691              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv4-sp-d16
 697              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:
 698              	.LFB3438:
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
ARM GAS  /tmp/ccSXOI3d.s 			page 67


 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
ARM GAS  /tmp/ccSXOI3d.s 			page 68


 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 69


 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
ARM GAS  /tmp/ccSXOI3d.s 			page 70


 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 699              		.loc 2 603 17
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703 0000 80B5     		push	{r7, lr}
 704              	.LCFI61:
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 0002 82B0     		sub	sp, sp, #8
 709              	.LCFI62:
 710              		.cfi_def_cfa_offset 16
 711 0004 00AF     		add	r7, sp, #0
 712              	.LCFI63:
 713              		.cfi_def_cfa_register 7
 714 0006 7860     		str	r0, [r7, #4]
 715              	.LBB16:
 716              		.loc 2 603 17
 717 0008 7B68     		ldr	r3, [r7, #4]
 718 000a 1846     		mov	r0, r3
 719 000c FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
 720              	.LBE16:
 721 0010 7B68     		ldr	r3, [r7, #4]
 722 0012 1846     		mov	r0, r3
 723 0014 0837     		adds	r7, r7, #8
 724              	.LCFI64:
 725              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccSXOI3d.s 			page 71


 726 0016 BD46     		mov	sp, r7
 727              	.LCFI65:
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 0018 80BD     		pop	{r7, pc}
 731              		.cfi_endproc
 732              	.LFE3438:
 734              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev
 735              		.thumb_set _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev,_ZNSt14_Optional_baseISt4pairIffELb1ELb1
 736              		.section	.text._ZNSt5arrayIfLj3EEixEj,"axG",%progbits,_ZNSt5arrayIfLj3EEixEj,comdat
 737              		.align	1
 738              		.weak	_ZNSt5arrayIfLj3EEixEj
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu fpv4-sp-d16
 744              	_ZNSt5arrayIfLj3EEixEj:
 745              	.LFB3442:
 746              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <array> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** /** @file include/array
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #ifndef _GLIBCXX_ARRAY
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #define _GLIBCXX_ARRAY 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** # include <bits/c++0x_warning.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #else
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <utility>
ARM GAS  /tmp/ccSXOI3d.s 			page 72


  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/stl_algobase.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/range_access.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** {
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct __array_traits
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp _Type[_Nm];
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp&
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp*
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ptr(const _Type& __t) noexcept
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp*>(__t); }
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  template<typename _Tp>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    struct __array_traits<_Tp, 0>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    {
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      struct _Type { };
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_swappable;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_nothrow_swappable;
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp&
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return *static_cast<_Tp*>(nullptr); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp*
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ptr(const _Type&) noexcept
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return nullptr; }
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @ingroup sequences
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#67">sequence</a>.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Sets support random access iterators.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Nm  Number of elements.
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   */
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct array
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
ARM GAS  /tmp/ccSXOI3d.s 			page 73


  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp 	    			      value_type;
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*			      pointer;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*                       const_pointer;
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type&                   	      reference;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type&             	      const_reference;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*          		      iterator;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*			      const_iterator;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::size_t                    	      size_type;
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Support for zero-sized arrays mandatory.
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typename _AT_Type::_Type                         _M_elems;
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // No explicit construct/copy/destroy for aggregate type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // DR 776.
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       fill(const value_type& __u)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::fill_n(begin(), size(), __u); }
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       swap(array& __other)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Iterators.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() noexcept
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data()); }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() const noexcept
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() noexcept
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data() + _Nm); }
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() const noexcept
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() noexcept
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(end()); }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() const noexcept
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() noexcept
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(begin()); }
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 74


 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() const noexcept
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cbegin() const noexcept
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cend() const noexcept
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crbegin() const noexcept
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crend() const noexcept
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Capacity.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       size() const noexcept { return _Nm; }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       max_size() const noexcept { return _Nm; }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX_NODISCARD constexpr bool
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       empty() const noexcept { return size() == 0; }
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Element access.
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       operator[](size_type __n) noexcept
 747              		.loc 9 185 7
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 8
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751 0000 80B5     		push	{r7, lr}
 752              	.LCFI66:
 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 7, -8
 755              		.cfi_offset 14, -4
 756 0002 82B0     		sub	sp, sp, #8
 757              	.LCFI67:
 758              		.cfi_def_cfa_offset 16
 759 0004 00AF     		add	r7, sp, #0
 760              	.LCFI68:
 761              		.cfi_def_cfa_register 7
 762 0006 7860     		str	r0, [r7, #4]
 763 0008 3960     		str	r1, [r7]
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 764              		.loc 9 186 33
 765 000a 7B68     		ldr	r3, [r7, #4]
 766              		.loc 9 186 32
 767 000c 3968     		ldr	r1, [r7]
 768 000e 1846     		mov	r0, r3
 769 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj
ARM GAS  /tmp/ccSXOI3d.s 			page 75


 770 0014 0346     		mov	r3, r0
 771              		.loc 9 186 49
 772 0016 1846     		mov	r0, r3
 773 0018 0837     		adds	r7, r7, #8
 774              	.LCFI69:
 775              		.cfi_def_cfa_offset 8
 776 001a BD46     		mov	sp, r7
 777              	.LCFI70:
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 001c 80BD     		pop	{r7, pc}
 781              		.cfi_endproc
 782              	.LFE3442:
 784              		.section	.text._ZNRSt8optionalISt5arrayIfLj3EEEdeEv,"axG",%progbits,_ZNRSt8optionalISt5arrayIfLj3E
 785              		.align	1
 786              		.weak	_ZNRSt8optionalISt5arrayIfLj3EEEdeEv
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	_ZNRSt8optionalISt5arrayIfLj3EEEdeEv:
 793              	.LFB3443:
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
ARM GAS  /tmp/ccSXOI3d.s 			page 76


 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
ARM GAS  /tmp/ccSXOI3d.s 			page 77


 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
ARM GAS  /tmp/ccSXOI3d.s 			page 78


 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, _Args&&... __args)
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp,
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  initializer_list<_Up>&,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  _Args&&...>> = false>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       optional&
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(nullopt_t) noexcept
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_reset();
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp>
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(_Up&& __u)
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (this->_M_is_engaged())
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(const optional<_Up>& __u)
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
ARM GAS  /tmp/ccSXOI3d.s 			page 79


 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = *__u;
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(*__u);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(optional<_Up>&& __u)
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = std::move(*__u);
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(std::move(*__u));
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(_Args&&... __args)
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 				       _Args&&...>, _Tp&>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 80


 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Swap.
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       swap(optional& __other)
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using std::swap;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (this->_M_is_engaged())
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_destruct();
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (__other._M_is_engaged())
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_destruct();
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Observers.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp*
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->() const
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp*
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->()
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&
 794              		.loc 2 903 7
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798 0000 80B5     		push	{r7, lr}
 799              	.LCFI71:
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 82B0     		sub	sp, sp, #8
 804              	.LCFI72:
 805              		.cfi_def_cfa_offset 16
 806 0004 00AF     		add	r7, sp, #0
 807              	.LCFI73:
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 810              		.loc 2 904 28
 811 0008 7868     		ldr	r0, [r7, #4]
 812 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
ARM GAS  /tmp/ccSXOI3d.s 			page 81


 813 000e 0346     		mov	r3, r0
 814              		.loc 2 904 32
 815 0010 1846     		mov	r0, r3
 816 0012 0837     		adds	r7, r7, #8
 817              	.LCFI74:
 818              		.cfi_def_cfa_offset 8
 819 0014 BD46     		mov	sp, r7
 820              	.LCFI75:
 821              		.cfi_def_cfa_register 13
 822              		@ sp needed
 823 0016 80BD     		pop	{r7, pc}
 824              		.cfi_endproc
 825              	.LFE3443:
 827              		.section	.text._ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 828              		.align	1
 829              		.weak	_ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.fpu fpv4-sp-d16
 835              	_ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:
 836              	.LFB3444:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 837              		.loc 2 439 7
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 8
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841 0000 80B5     		push	{r7, lr}
 842              	.LCFI76:
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              	.LCFI77:
 848              		.cfi_def_cfa_offset 16
 849 0004 00AF     		add	r7, sp, #0
 850              	.LCFI78:
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 853              		.loc 2 442 51
 854 0008 7B68     		ldr	r3, [r7, #4]
 855 000a 1846     		mov	r0, r3
 856 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv
 857 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 858              		.loc 2 443 7
 859 0012 1846     		mov	r0, r3
 860 0014 0837     		adds	r7, r7, #8
 861              	.LCFI79:
 862              		.cfi_def_cfa_offset 8
 863 0016 BD46     		mov	sp, r7
 864              	.LCFI80:
 865              		.cfi_def_cfa_register 13
 866              		@ sp needed
 867 0018 80BD     		pop	{r7, pc}
 868              		.cfi_endproc
ARM GAS  /tmp/ccSXOI3d.s 			page 82


 869              	.LFE3444:
 871              		.section	.text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv,"axG",%progbits,_ZNSt22_Opt
 872              		.align	1
 873              		.weak	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu fpv4-sp-d16
 879              	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv:
 880              	.LFB3445:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 881              		.loc 2 268 7
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 8
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886 0000 80B4     		push	{r7}
 887              	.LCFI81:
 888              		.cfi_def_cfa_offset 4
 889              		.cfi_offset 7, -4
 890 0002 83B0     		sub	sp, sp, #12
 891              	.LCFI82:
 892              		.cfi_def_cfa_offset 16
 893 0004 00AF     		add	r7, sp, #0
 894              	.LCFI83:
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 897              		.loc 2 269 33
 898 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 899              		.loc 2 269 43
 900 000a 1846     		mov	r0, r3
 901 000c 0C37     		adds	r7, r7, #12
 902              	.LCFI84:
 903              		.cfi_def_cfa_offset 4
 904 000e BD46     		mov	sp, r7
 905              	.LCFI85:
 906              		.cfi_def_cfa_register 13
 907              		@ sp needed
 908 0010 5DF8047B 		ldr	r7, [sp], #4
 909              	.LCFI86:
 910              		.cfi_restore 7
 911              		.cfi_def_cfa_offset 0
 912 0014 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE3445:
 916              		.section	.text._ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj,"axG",%progbits,_ZNSt14__array_traitsIf
 917              		.align	1
 918              		.weak	_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj:
 925              	.LFB3446:
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp&>(__t[__n]); }
ARM GAS  /tmp/ccSXOI3d.s 			page 83


 926              		.loc 9 55 7
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 8
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931 0000 80B4     		push	{r7}
 932              	.LCFI87:
 933              		.cfi_def_cfa_offset 4
 934              		.cfi_offset 7, -4
 935 0002 83B0     		sub	sp, sp, #12
 936              	.LCFI88:
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              	.LCFI89:
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 942 0008 3960     		str	r1, [r7]
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 943              		.loc 9 56 41
 944 000a 3B68     		ldr	r3, [r7]
 945 000c 9B00     		lsls	r3, r3, #2
 946 000e 7A68     		ldr	r2, [r7, #4]
 947 0010 1344     		add	r3, r3, r2
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 948              		.loc 9 56 44
 949 0012 1846     		mov	r0, r3
 950 0014 0C37     		adds	r7, r7, #12
 951              	.LCFI90:
 952              		.cfi_def_cfa_offset 4
 953 0016 BD46     		mov	sp, r7
 954              	.LCFI91:
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 0018 5DF8047B 		ldr	r7, [sp], #4
 958              	.LCFI92:
 959              		.cfi_restore 7
 960              		.cfi_def_cfa_offset 0
 961 001c 7047     		bx	lr
 962              		.cfi_endproc
 963              	.LFE3446:
 965              		.section	.text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm,"
 966              		.align	1
 967              		.global	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:
 974              	.LFB3426:
 975              		.file 10 "Src/foc.cpp"
   1:Src/foc.cpp   **** 
   2:Src/foc.cpp   **** #include "interfaces.hpp"
   3:Src/foc.cpp   **** #include "foc.hpp"
   4:Src/foc.cpp   **** #include "low_level.h"
   5:Src/foc.cpp   **** #include "utils.hpp"
   6:Src/foc.cpp   **** #include "main.h"
   7:Src/foc.cpp   **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 84


   8:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error AlphaBetaFrameController::on_measurement(
   9:Src/foc.cpp   ****             std::optional<float> vbus_voltage,
  10:Src/foc.cpp   ****             std::optional<std::array<float, 3>> currents,
  11:Src/foc.cpp   ****             uint32_t input_timestamp) {
 976              		.loc 10 11 39
 977              		.cfi_startproc
 978              		@ args = 24, pretend = 8, frame = 40
 979              		@ frame_needed = 1, uses_anonymous_args = 0
 980 0000 82B0     		sub	sp, sp, #8
 981              	.LCFI93:
 982              		.cfi_def_cfa_offset 8
 983 0002 90B5     		push	{r4, r7, lr}
 984              	.LCFI94:
 985              		.cfi_def_cfa_offset 20
 986              		.cfi_offset 4, -20
 987              		.cfi_offset 7, -16
 988              		.cfi_offset 14, -12
 989 0004 2DED028B 		vpush.64	{d8}
 990              	.LCFI95:
 991              		.cfi_def_cfa_offset 28
 992              		.cfi_offset 80, -28
 993              		.cfi_offset 81, -24
 994 0008 8FB0     		sub	sp, sp, #60
 995              	.LCFI96:
 996              		.cfi_def_cfa_offset 88
 997 000a 04AF     		add	r7, sp, #16
 998              	.LCFI97:
 999              		.cfi_def_cfa 7, 72
 1000 000c F860     		str	r0, [r7, #12]
 1001 000e 381D     		adds	r0, r7, #4
 1002 0010 80E80600 		stm	r0, {r1, r2}
 1003 0014 7B64     		str	r3, [r7, #68]
  12:Src/foc.cpp   **** 
  13:Src/foc.cpp   ****     std::optional<float2D> Ialpha_beta;
 1004              		.loc 10 13 28
 1005 0016 07F11003 		add	r3, r7, #16
 1006 001a 0022     		movs	r2, #0
 1007 001c 1A60     		str	r2, [r3]
 1008 001e 5A60     		str	r2, [r3, #4]
 1009 0020 9A60     		str	r2, [r3, #8]
  14:Src/foc.cpp   ****     
  15:Src/foc.cpp   ****     if (currents.has_value()) {
 1010              		.loc 10 15 27
 1011 0022 07F14403 		add	r3, r7, #68
 1012 0026 1846     		mov	r0, r3
 1013 0028 FFF7FEFF 		bl	_ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv
 1014 002c 0346     		mov	r3, r0
 1015              		.loc 10 15 5
 1016 002e 002B     		cmp	r3, #0
 1017 0030 3CD0     		beq	.L40
  16:Src/foc.cpp   ****         // Clarke transform
  17:Src/foc.cpp   ****         Ialpha_beta = {
  18:Src/foc.cpp   ****             (*currents)[0],
 1018              		.loc 10 18 15
 1019 0032 07F14403 		add	r3, r7, #68
 1020 0036 1846     		mov	r0, r3
 1021 0038 FFF7FEFF 		bl	_ZNRSt8optionalISt5arrayIfLj3EEEdeEv
ARM GAS  /tmp/ccSXOI3d.s 			page 85


 1022 003c 0346     		mov	r3, r0
 1023              		.loc 10 18 26
 1024 003e 0021     		movs	r1, #0
 1025 0040 1846     		mov	r0, r3
 1026 0042 FFF7FEFF 		bl	_ZNSt5arrayIfLj3EEixEj
 1027 0046 0446     		mov	r4, r0
  19:Src/foc.cpp   ****             one_by_sqrt3 * ((*currents)[1] - (*currents)[2])
 1028              		.loc 10 19 31
 1029 0048 07F14403 		add	r3, r7, #68
 1030 004c 1846     		mov	r0, r3
 1031 004e FFF7FEFF 		bl	_ZNRSt8optionalISt5arrayIfLj3EEEdeEv
 1032 0052 0346     		mov	r3, r0
 1033              		.loc 10 19 42
 1034 0054 0121     		movs	r1, #1
 1035 0056 1846     		mov	r0, r3
 1036 0058 FFF7FEFF 		bl	_ZNSt5arrayIfLj3EEixEj
 1037 005c 0346     		mov	r3, r0
 1038              		.loc 10 19 44
 1039 005e 93ED008A 		vldr.32	s16, [r3]
 1040              		.loc 10 19 48
 1041 0062 07F14403 		add	r3, r7, #68
 1042 0066 1846     		mov	r0, r3
 1043 0068 FFF7FEFF 		bl	_ZNRSt8optionalISt5arrayIfLj3EEEdeEv
 1044 006c 0346     		mov	r3, r0
 1045              		.loc 10 19 59
 1046 006e 0221     		movs	r1, #2
 1047 0070 1846     		mov	r0, r3
 1048 0072 FFF7FEFF 		bl	_ZNSt5arrayIfLj3EEixEj
 1049 0076 0346     		mov	r3, r0
 1050              		.loc 10 19 44
 1051 0078 D3ED007A 		vldr.32	s15, [r3]
 1052 007c 78EE677A 		vsub.f32	s15, s16, s15
 1053              		.loc 10 19 26
 1054 0080 9FED187A 		vldr.32	s14, .L42
 1055 0084 67EE877A 		vmul.f32	s15, s15, s14
 1056 0088 C7ED097A 		vstr.32	s15, [r7, #36]
  20:Src/foc.cpp   ****         };
 1057              		.loc 10 20 9
 1058 008c 07F12402 		add	r2, r7, #36
 1059 0090 07F11C03 		add	r3, r7, #28
 1060 0094 2146     		mov	r1, r4
 1061 0096 1846     		mov	r0, r3
 1062 0098 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
 1063 009c 07F11C02 		add	r2, r7, #28
 1064 00a0 07F11003 		add	r3, r7, #16
 1065 00a4 1146     		mov	r1, r2
 1066 00a6 1846     		mov	r0, r3
 1067 00a8 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 1068              	.L40:
  21:Src/foc.cpp   ****     }
  22:Src/foc.cpp   ****     
  23:Src/foc.cpp   ****     return on_measurement(vbus_voltage, Ialpha_beta, input_timestamp);
 1069              		.loc 10 23 69
 1070 00ac FB68     		ldr	r3, [r7, #12]
 1071 00ae 1B68     		ldr	r3, [r3]
 1072 00b0 0C33     		adds	r3, r3, #12
 1073 00b2 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/ccSXOI3d.s 			page 86


 1074              		.loc 10 23 26
 1075 00b4 7B6D     		ldr	r3, [r7, #84]
 1076 00b6 0293     		str	r3, [sp, #8]
 1077 00b8 6A46     		mov	r2, sp
 1078 00ba 07F11403 		add	r3, r7, #20
 1079 00be 93E80300 		ldm	r3, {r0, r1}
 1080 00c2 82E80300 		stm	r2, {r0, r1}
 1081 00c6 3B69     		ldr	r3, [r7, #16]
 1082 00c8 3A1D     		adds	r2, r7, #4
 1083 00ca 06CA     		ldm	r2, {r1, r2}
 1084 00cc F868     		ldr	r0, [r7, #12]
 1085 00ce A047     		blx	r4
 1086              	.LVL0:
 1087 00d0 0346     		mov	r3, r0
  24:Src/foc.cpp   **** }
 1088              		.loc 10 24 1
 1089 00d2 1846     		mov	r0, r3
 1090 00d4 2C37     		adds	r7, r7, #44
 1091              	.LCFI98:
 1092              		.cfi_def_cfa_offset 28
 1093 00d6 BD46     		mov	sp, r7
 1094              	.LCFI99:
 1095              		.cfi_def_cfa_register 13
 1096              		@ sp needed
 1097 00d8 BDEC028B 		vldm	sp!, {d8}
 1098              	.LCFI100:
 1099              		.cfi_restore 80
 1100              		.cfi_restore 81
 1101              		.cfi_def_cfa_offset 20
 1102 00dc BDE89040 		pop	{r4, r7, lr}
 1103              	.LCFI101:
 1104              		.cfi_restore 14
 1105              		.cfi_restore 7
 1106              		.cfi_restore 4
 1107              		.cfi_def_cfa_offset 8
 1108 00e0 02B0     		add	sp, sp, #8
 1109              	.LCFI102:
 1110              		.cfi_def_cfa_offset 0
 1111 00e2 7047     		bx	lr
 1112              	.L43:
 1113              		.align	2
 1114              	.L42:
 1115 00e4 3ACD133F 		.word	1058262330
 1116              		.cfi_endproc
 1117              	.LFE3426:
 1119              		.section	.text._ZNKSt8optionalISt4pairIffEE9has_valueEv,"axG",%progbits,_ZNKSt8optionalISt4pairIff
 1120              		.align	1
 1121              		.weak	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	_ZNKSt8optionalISt4pairIffEE9has_valueEv:
 1128              	.LFB3457:
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&&
ARM GAS  /tmp/ccSXOI3d.s 			page 87


 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&&
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr explicit operator bool() const noexcept
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool has_value() const noexcept
 1129              		.loc 2 917 22
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 8
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              	.LCFI103:
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 82B0     		sub	sp, sp, #8
 1139              	.LCFI104:
 1140              		.cfi_def_cfa_offset 16
 1141 0004 00AF     		add	r7, sp, #0
 1142              	.LCFI105:
 1143              		.cfi_def_cfa_register 7
 1144 0006 7860     		str	r0, [r7, #4]
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 1145              		.loc 2 918 35
 1146 0008 7868     		ldr	r0, [r7, #4]
 1147 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 1148 000e 0346     		mov	r3, r0
 1149              		.loc 2 918 39
 1150 0010 1846     		mov	r0, r3
 1151 0012 0837     		adds	r7, r7, #8
 1152              	.LCFI106:
 1153              		.cfi_def_cfa_offset 8
 1154 0014 BD46     		mov	sp, r7
 1155              	.LCFI107:
 1156              		.cfi_def_cfa_register 13
 1157              		@ sp needed
 1158 0016 80BD     		pop	{r7, pc}
 1159              		.cfi_endproc
 1160              	.LFE3457:
 1162              		.section	.text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_enga
 1163              		.align	1
 1164              		.weak	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu fpv4-sp-d16
 1170              	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:
 1171              	.LFB3458:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1172              		.loc 2 434 22
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccSXOI3d.s 			page 88


 1176              		@ link register save eliminated.
 1177 0000 80B4     		push	{r7}
 1178              	.LCFI108:
 1179              		.cfi_def_cfa_offset 4
 1180              		.cfi_offset 7, -4
 1181 0002 83B0     		sub	sp, sp, #12
 1182              	.LCFI109:
 1183              		.cfi_def_cfa_offset 16
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI110:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1188              		.loc 2 435 58
 1189 0008 7B68     		ldr	r3, [r7, #4]
 1190 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1191              		.loc 2 435 70
 1192 000c 1846     		mov	r0, r3
 1193 000e 0C37     		adds	r7, r7, #12
 1194              	.LCFI111:
 1195              		.cfi_def_cfa_offset 4
 1196 0010 BD46     		mov	sp, r7
 1197              	.LCFI112:
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 0012 5DF8047B 		ldr	r7, [sp], #4
 1201              	.LCFI113:
 1202              		.cfi_restore 7
 1203              		.cfi_def_cfa_offset 0
 1204 0016 7047     		bx	lr
 1205              		.cfi_endproc
 1206              	.LFE3458:
 1208              		.section	.text._ZNSt8optionalISt4pairIffEEptEv,"axG",%progbits,_ZNSt8optionalISt4pairIffEEptEv,com
 1209              		.align	1
 1210              		.weak	_ZNSt8optionalISt4pairIffEEptEv
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu fpv4-sp-d16
 1216              	_ZNSt8optionalISt4pairIffEEptEv:
 1217              	.LFB3459:
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 1218              		.loc 2 895 7
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 8
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0000 80B5     		push	{r7, lr}
 1223              	.LCFI114:
 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 1227 0002 82B0     		sub	sp, sp, #8
 1228              	.LCFI115:
 1229              		.cfi_def_cfa_offset 16
 1230 0004 00AF     		add	r7, sp, #0
 1231              	.LCFI116:
ARM GAS  /tmp/ccSXOI3d.s 			page 89


 1232              		.cfi_def_cfa_register 7
 1233 0006 7860     		str	r0, [r7, #4]
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1234              		.loc 2 896 32
 1235 0008 7868     		ldr	r0, [r7, #4]
 1236 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 1237 000e 0346     		mov	r3, r0
 1238 0010 1846     		mov	r0, r3
 1239 0012 FFF7FEFF 		bl	_ZSt11__addressofISt4pairIffEEPT_RS2_
 1240 0016 0346     		mov	r3, r0
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1241              		.loc 2 896 50
 1242 0018 1846     		mov	r0, r3
 1243 001a 0837     		adds	r7, r7, #8
 1244              	.LCFI117:
 1245              		.cfi_def_cfa_offset 8
 1246 001c BD46     		mov	sp, r7
 1247              	.LCFI118:
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 001e 80BD     		pop	{r7, pc}
 1251              		.cfi_endproc
 1252              	.LFE3459:
 1254              		.section	.text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE,"ax",%progbits
 1255              		.align	1
 1256              		.global	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu fpv4-sp-d16
 1262              	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:
 1263              	.LFB3456:
  25:Src/foc.cpp   **** 
  26:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error AlphaBetaFrameController::get_output(
  27:Src/foc.cpp   ****             uint32_t output_timestamp, float (&pwm_timings)[3],
  28:Src/foc.cpp   ****             std::optional<float>* ibus) {
 1264              		.loc 10 28 41
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 48
 1267              		@ frame_needed = 1, uses_anonymous_args = 0
 1268 0000 90B5     		push	{r4, r7, lr}
 1269              	.LCFI119:
 1270              		.cfi_def_cfa_offset 12
 1271              		.cfi_offset 4, -12
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 2DED028B 		vpush.64	{d8}
 1275              	.LCFI120:
 1276              		.cfi_def_cfa_offset 20
 1277              		.cfi_offset 80, -20
 1278              		.cfi_offset 81, -16
 1279 0006 8DB0     		sub	sp, sp, #52
 1280              	.LCFI121:
 1281              		.cfi_def_cfa_offset 72
 1282 0008 00AF     		add	r7, sp, #0
 1283              	.LCFI122:
 1284              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccSXOI3d.s 			page 90


 1285 000a F860     		str	r0, [r7, #12]
 1286 000c B960     		str	r1, [r7, #8]
 1287 000e 7A60     		str	r2, [r7, #4]
 1288 0010 3B60     		str	r3, [r7]
  29:Src/foc.cpp   ****     std::optional<float2D> mod_alpha_beta;
 1289              		.loc 10 29 28
 1290 0012 07F12003 		add	r3, r7, #32
 1291 0016 0022     		movs	r2, #0
 1292 0018 1A60     		str	r2, [r3]
 1293 001a 5A60     		str	r2, [r3, #4]
 1294 001c 9A60     		str	r2, [r3, #8]
  30:Src/foc.cpp   ****     ODriveIntf::MotorIntf::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, 
 1295              		.loc 10 30 104
 1296 001e FB68     		ldr	r3, [r7, #12]
 1297 0020 1B68     		ldr	r3, [r3]
 1298 0022 1033     		adds	r3, r3, #16
 1299 0024 1C68     		ldr	r4, [r3]
 1300              		.loc 10 30 64
 1301 0026 07F12002 		add	r2, r7, #32
 1302 002a 3B68     		ldr	r3, [r7]
 1303 002c B968     		ldr	r1, [r7, #8]
 1304 002e F868     		ldr	r0, [r7, #12]
 1305 0030 A047     		blx	r4
 1306              	.LVL1:
 1307 0032 F862     		str	r0, [r7, #44]
  31:Src/foc.cpp   ****     
  32:Src/foc.cpp   ****     if (status != ODriveIntf::MotorIntf::ERROR_NONE) {
 1308              		.loc 10 32 5
 1309 0034 FB6A     		ldr	r3, [r7, #44]
 1310 0036 002B     		cmp	r3, #0
 1311 0038 01D0     		beq	.L51
  33:Src/foc.cpp   ****         return status;
 1312              		.loc 10 33 16
 1313 003a FB6A     		ldr	r3, [r7, #44]
 1314 003c 61E0     		b	.L58
 1315              	.L51:
  34:Src/foc.cpp   ****     } else if (!mod_alpha_beta.has_value() || is_nan(mod_alpha_beta->first) || is_nan(mod_alpha_bet
 1316              		.loc 10 34 41
 1317 003e 07F12003 		add	r3, r7, #32
 1318 0042 1846     		mov	r0, r3
 1319 0044 FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 1320 0048 0346     		mov	r3, r0
 1321              		.loc 10 34 16
 1322 004a 83F00103 		eor	r3, r3, #1
 1323 004e DBB2     		uxtb	r3, r3
 1324              		.loc 10 34 77
 1325 0050 002B     		cmp	r3, #0
 1326 0052 1DD1     		bne	.L53
 1327              		.loc 10 34 68 discriminator 2
 1328 0054 07F12003 		add	r3, r7, #32
 1329 0058 1846     		mov	r0, r3
 1330 005a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1331 005e 0346     		mov	r3, r0
 1332              		.loc 10 34 53 discriminator 2
 1333 0060 D3ED007A 		vldr.32	s15, [r3]
 1334 0064 B0EE670A 		vmov.f32	s0, s15
 1335 0068 FFF7FEFF 		bl	_Z6is_nanf
ARM GAS  /tmp/ccSXOI3d.s 			page 91


 1336 006c 0346     		mov	r3, r0
 1337              		.loc 10 34 44 discriminator 2
 1338 006e 002B     		cmp	r3, #0
 1339 0070 0ED1     		bne	.L53
 1340              		.loc 10 34 101 discriminator 4
 1341 0072 07F12003 		add	r3, r7, #32
 1342 0076 1846     		mov	r0, r3
 1343 0078 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1344 007c 0346     		mov	r3, r0
 1345              		.loc 10 34 86 discriminator 4
 1346 007e D3ED017A 		vldr.32	s15, [r3, #4]
 1347 0082 B0EE670A 		vmov.f32	s0, s15
 1348 0086 FFF7FEFF 		bl	_Z6is_nanf
 1349 008a 0346     		mov	r3, r0
 1350              		.loc 10 34 77 discriminator 4
 1351 008c 002B     		cmp	r3, #0
 1352 008e 01D0     		beq	.L54
 1353              	.L53:
 1354              		.loc 10 34 77 is_stmt 0 discriminator 5
 1355 0090 0123     		movs	r3, #1
 1356 0092 00E0     		b	.L55
 1357              	.L54:
 1358              		.loc 10 34 77 discriminator 6
 1359 0094 0023     		movs	r3, #0
 1360              	.L55:
 1361              		.loc 10 34 12 is_stmt 1 discriminator 8
 1362 0096 002B     		cmp	r3, #0
 1363 0098 02D0     		beq	.L56
  35:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_IS_NAN;
 1364              		.loc 10 35 46
 1365 009a 4FF00053 		mov	r3, #536870912
 1366 009e 30E0     		b	.L58
 1367              	.L56:
  36:Src/foc.cpp   ****     }
  37:Src/foc.cpp   **** 
  38:Src/foc.cpp   ****     float tA, tB, tC;
  39:Src/foc.cpp   ****     if (SVM(mod_alpha_beta->first, mod_alpha_beta->second, &tA, &tB, &tC) != 0)
 1368              		.loc 10 39 27
 1369 00a0 07F12003 		add	r3, r7, #32
 1370 00a4 1846     		mov	r0, r3
 1371 00a6 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1372 00aa 0346     		mov	r3, r0
 1373              		.loc 10 39 12
 1374 00ac 93ED008A 		vldr.32	s16, [r3]
 1375              		.loc 10 39 50
 1376 00b0 07F12003 		add	r3, r7, #32
 1377 00b4 1846     		mov	r0, r3
 1378 00b6 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1379 00ba 0346     		mov	r3, r0
 1380              		.loc 10 39 12
 1381 00bc D3ED017A 		vldr.32	s15, [r3, #4]
 1382 00c0 07F11402 		add	r2, r7, #20
 1383 00c4 07F11801 		add	r1, r7, #24
 1384 00c8 07F11C03 		add	r3, r7, #28
 1385 00cc 1846     		mov	r0, r3
 1386 00ce F0EE670A 		vmov.f32	s1, s15
 1387 00d2 B0EE480A 		vmov.f32	s0, s16
ARM GAS  /tmp/ccSXOI3d.s 			page 92


 1388 00d6 FFF7FEFF 		bl	SVM
 1389 00da 0346     		mov	r3, r0
 1390              		.loc 10 39 75
 1391 00dc 002B     		cmp	r3, #0
 1392 00de 14BF     		ite	ne
 1393 00e0 0123     		movne	r3, #1
 1394 00e2 0023     		moveq	r3, #0
 1395 00e4 DBB2     		uxtb	r3, r3
 1396              		.loc 10 39 5
 1397 00e6 002B     		cmp	r3, #0
 1398 00e8 01D0     		beq	.L57
  40:Src/foc.cpp   ****     {
  41:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_MODULATION_MAGNITUDE;
 1399              		.loc 10 41 46
 1400 00ea 8023     		movs	r3, #128
 1401 00ec 09E0     		b	.L58
 1402              	.L57:
  42:Src/foc.cpp   ****     }
  43:Src/foc.cpp   ****         
  44:Src/foc.cpp   **** 
  45:Src/foc.cpp   **** 
  46:Src/foc.cpp   ****     pwm_timings[0] = tA;
 1403              		.loc 10 46 20
 1404 00ee FA69     		ldr	r2, [r7, #28]	@ float
 1405 00f0 7B68     		ldr	r3, [r7, #4]
 1406 00f2 1A60     		str	r2, [r3]	@ float
  47:Src/foc.cpp   ****     pwm_timings[1] = tB;
 1407              		.loc 10 47 20
 1408 00f4 BA69     		ldr	r2, [r7, #24]	@ float
 1409 00f6 7B68     		ldr	r3, [r7, #4]
 1410 00f8 5A60     		str	r2, [r3, #4]	@ float
  48:Src/foc.cpp   ****     pwm_timings[2] = tC;
 1411              		.loc 10 48 20
 1412 00fa 7A69     		ldr	r2, [r7, #20]	@ float
 1413 00fc 7B68     		ldr	r3, [r7, #4]
 1414 00fe 9A60     		str	r2, [r3, #8]	@ float
  49:Src/foc.cpp   **** 
  50:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
 1415              		.loc 10 50 35
 1416 0100 0023     		movs	r3, #0
 1417              	.L58:
  51:Src/foc.cpp   **** }
 1418              		.loc 10 51 1 discriminator 1
 1419 0102 1846     		mov	r0, r3
 1420 0104 3437     		adds	r7, r7, #52
 1421              	.LCFI123:
 1422              		.cfi_def_cfa_offset 20
 1423 0106 BD46     		mov	sp, r7
 1424              	.LCFI124:
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 0108 BDEC028B 		vldm	sp!, {d8}
 1428              	.LCFI125:
 1429              		.cfi_restore 80
 1430              		.cfi_restore 81
 1431              		.cfi_def_cfa_offset 12
 1432 010c 90BD     		pop	{r4, r7, pc}
ARM GAS  /tmp/ccSXOI3d.s 			page 93


 1433              		.cfi_endproc
 1434              	.LFE3456:
 1436              		.section	.text._ZN23FieldOrientedController5resetEv,"ax",%progbits
 1437              		.align	1
 1438              		.global	_ZN23FieldOrientedController5resetEv
 1439              		.syntax unified
 1440              		.thumb
 1441              		.thumb_func
 1442              		.fpu fpv4-sp-d16
 1444              	_ZN23FieldOrientedController5resetEv:
 1445              	.LFB3460:
  52:Src/foc.cpp   **** 
  53:Src/foc.cpp   **** void FieldOrientedController::reset() {
 1446              		.loc 10 53 39
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450 0000 90B5     		push	{r4, r7, lr}
 1451              	.LCFI126:
 1452              		.cfi_def_cfa_offset 12
 1453              		.cfi_offset 4, -12
 1454              		.cfi_offset 7, -8
 1455              		.cfi_offset 14, -4
 1456 0002 83B0     		sub	sp, sp, #12
 1457              	.LCFI127:
 1458              		.cfi_def_cfa_offset 24
 1459 0004 00AF     		add	r7, sp, #0
 1460              	.LCFI128:
 1461              		.cfi_def_cfa_register 7
 1462 0006 7860     		str	r0, [r7, #4]
  54:Src/foc.cpp   ****     v_current_control_integral_d_ = 0.0f;
 1463              		.loc 10 54 35
 1464 0008 7B68     		ldr	r3, [r7, #4]
 1465 000a 4FF00002 		mov	r2, #0
 1466 000e C3F89420 		str	r2, [r3, #148]	@ float
  55:Src/foc.cpp   ****     v_current_control_integral_q_ = 0.0f;
 1467              		.loc 10 55 35
 1468 0012 7B68     		ldr	r3, [r7, #4]
 1469 0014 4FF00002 		mov	r2, #0
 1470 0018 C3F89820 		str	r2, [r3, #152]	@ float
  56:Src/foc.cpp   ****     vbus_voltage_measured_ = std::nullopt;
 1471              		.loc 10 56 35
 1472 001c 7B68     		ldr	r3, [r7, #4]
 1473 001e 7833     		adds	r3, r3, #120
 1474 0020 1846     		mov	r0, r3
 1475 0022 FFF7FEFF 		bl	_ZNSt8optionalIfEaSESt9nullopt_t
  57:Src/foc.cpp   ****     Ialpha_beta_measured_ = std::nullopt;
 1476              		.loc 10 57 34
 1477 0026 7B68     		ldr	r3, [r7, #4]
 1478 0028 8033     		adds	r3, r3, #128
 1479 002a 2146     		mov	r1, r4
 1480 002c 1846     		mov	r0, r3
 1481 002e FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSESt9nullopt_t
  58:Src/foc.cpp   ****     power_ = 0.0f;
 1482              		.loc 10 58 12
 1483 0032 7B68     		ldr	r3, [r7, #4]
 1484 0034 4FF00002 		mov	r2, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 94


 1485 0038 C3F8AC20 		str	r2, [r3, #172]	@ float
  59:Src/foc.cpp   **** }
 1486              		.loc 10 59 1
 1487 003c 00BF     		nop
 1488 003e 0C37     		adds	r7, r7, #12
 1489              	.LCFI129:
 1490              		.cfi_def_cfa_offset 12
 1491 0040 BD46     		mov	sp, r7
 1492              	.LCFI130:
 1493              		.cfi_def_cfa_register 13
 1494              		@ sp needed
 1495 0042 90BD     		pop	{r4, r7, pc}
 1496              		.cfi_endproc
 1497              	.LFE3460:
 1499              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_,"axG",%progbits,_ZNSt17_O
 1500              		.align	1
 1501              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_:
 1508              	.LFB3464:
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 1509              		.loc 2 369 7
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              	.LCFI131:
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 82B0     		sub	sp, sp, #8
 1519              	.LCFI132:
 1520              		.cfi_def_cfa_offset 16
 1521 0004 00AF     		add	r7, sp, #0
 1522              	.LCFI133:
 1523              		.cfi_def_cfa_register 7
 1524 0006 7860     		str	r0, [r7, #4]
 1525 0008 3960     		str	r1, [r7]
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 1526              		.loc 2 371 22
 1527 000a 7B68     		ldr	r3, [r7, #4]
 1528 000c 3A68     		ldr	r2, [r7]
 1529 000e 1146     		mov	r1, r2
 1530 0010 1846     		mov	r0, r3
 1531 0012 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 1532              		.loc 2 372 10
 1533 0016 7B68     		ldr	r3, [r7, #4]
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1534              		.loc 2 373 7
 1535 0018 1846     		mov	r0, r3
 1536 001a 0837     		adds	r7, r7, #8
 1537              	.LCFI134:
 1538              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccSXOI3d.s 			page 95


 1539 001c BD46     		mov	sp, r7
 1540              	.LCFI135:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 001e 80BD     		pop	{r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE3464:
 1547              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_,"axG",%progbits,_ZNSt14_Optional
 1548              		.align	1
 1549              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_
 1550              		.syntax unified
 1551              		.thumb
 1552              		.thumb_func
 1553              		.fpu fpv4-sp-d16
 1555              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_:
 1556              	.LFB3463:
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 1557              		.loc 2 628 23
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 80B5     		push	{r7, lr}
 1562              	.LCFI136:
 1563              		.cfi_def_cfa_offset 8
 1564              		.cfi_offset 7, -8
 1565              		.cfi_offset 14, -4
 1566 0002 82B0     		sub	sp, sp, #8
 1567              	.LCFI137:
 1568              		.cfi_def_cfa_offset 16
 1569 0004 00AF     		add	r7, sp, #0
 1570              	.LCFI138:
 1571              		.cfi_def_cfa_register 7
 1572 0006 7860     		str	r0, [r7, #4]
 1573 0008 3960     		str	r1, [r7]
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 1574              		.loc 2 628 23
 1575 000a 3A68     		ldr	r2, [r7]
 1576 000c 7B68     		ldr	r3, [r7, #4]
 1577 000e 1146     		mov	r1, r2
 1578 0010 1846     		mov	r0, r3
 1579 0012 FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_
 1580 0016 7B68     		ldr	r3, [r7, #4]
 1581 0018 1846     		mov	r0, r3
 1582 001a 0837     		adds	r7, r7, #8
 1583              	.LCFI139:
 1584              		.cfi_def_cfa_offset 8
 1585 001c BD46     		mov	sp, r7
 1586              	.LCFI140:
 1587              		.cfi_def_cfa_register 13
 1588              		@ sp needed
 1589 001e 80BD     		pop	{r7, pc}
 1590              		.cfi_endproc
 1591              	.LFE3463:
 1593              		.section	.text._ZNSt8optionalISt4pairIffEEaSERKS2_,"axG",%progbits,_ZNSt8optionalISt4pairIffEEaSER
 1594              		.align	1
 1595              		.weak	_ZNSt8optionalISt4pairIffEEaSERKS2_
 1596              		.syntax unified
ARM GAS  /tmp/ccSXOI3d.s 			page 96


 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv4-sp-d16
 1601              	_ZNSt8optionalISt4pairIffEEaSERKS2_:
 1602              	.LFB3462:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 1603              		.loc 2 659 11
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 8
 1606              		@ frame_needed = 1, uses_anonymous_args = 0
 1607 0000 80B5     		push	{r7, lr}
 1608              	.LCFI141:
 1609              		.cfi_def_cfa_offset 8
 1610              		.cfi_offset 7, -8
 1611              		.cfi_offset 14, -4
 1612 0002 82B0     		sub	sp, sp, #8
 1613              	.LCFI142:
 1614              		.cfi_def_cfa_offset 16
 1615 0004 00AF     		add	r7, sp, #0
 1616              	.LCFI143:
 1617              		.cfi_def_cfa_register 7
 1618 0006 7860     		str	r0, [r7, #4]
 1619 0008 3960     		str	r1, [r7]
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 1620              		.loc 2 659 11
 1621 000a 7B68     		ldr	r3, [r7, #4]
 1622 000c 3A68     		ldr	r2, [r7]
 1623 000e 1146     		mov	r1, r2
 1624 0010 1846     		mov	r0, r3
 1625 0012 FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_
 1626 0016 7B68     		ldr	r3, [r7, #4]
 1627 0018 1846     		mov	r0, r3
 1628 001a 0837     		adds	r7, r7, #8
 1629              	.LCFI144:
 1630              		.cfi_def_cfa_offset 8
 1631 001c BD46     		mov	sp, r7
 1632              	.LCFI145:
 1633              		.cfi_def_cfa_register 13
 1634              		@ sp needed
 1635 001e 80BD     		pop	{r7, pc}
 1636              		.cfi_endproc
 1637              	.LFE3462:
 1639              		.section	.text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm,"ax",%
 1640              		.align	1
 1641              		.global	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 1642              		.syntax unified
 1643              		.thumb
 1644              		.thumb_func
 1645              		.fpu fpv4-sp-d16
 1647              	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 1648              	.LFB3461:
  60:Src/foc.cpp   **** 
  61:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error FieldOrientedController::on_measurement(
  62:Src/foc.cpp   ****         std::optional<float> vbus_voltage, std::optional<float2D> Ialpha_beta,
  63:Src/foc.cpp   ****         uint32_t input_timestamp) {
 1649              		.loc 10 63 35
 1650              		.cfi_startproc
ARM GAS  /tmp/ccSXOI3d.s 			page 97


 1651              		@ args = 20, pretend = 8, frame = 16
 1652              		@ frame_needed = 1, uses_anonymous_args = 0
 1653 0000 82B0     		sub	sp, sp, #8
 1654              	.LCFI146:
 1655              		.cfi_def_cfa_offset 8
 1656 0002 80B5     		push	{r7, lr}
 1657              	.LCFI147:
 1658              		.cfi_def_cfa_offset 16
 1659              		.cfi_offset 7, -16
 1660              		.cfi_offset 14, -12
 1661 0004 84B0     		sub	sp, sp, #16
 1662              	.LCFI148:
 1663              		.cfi_def_cfa_offset 32
 1664 0006 00AF     		add	r7, sp, #0
 1665              	.LCFI149:
 1666              		.cfi_def_cfa_register 7
 1667 0008 F860     		str	r0, [r7, #12]
 1668 000a 381D     		adds	r0, r7, #4
 1669 000c 80E80600 		stm	r0, {r1, r2}
 1670 0010 FB61     		str	r3, [r7, #28]
  64:Src/foc.cpp   ****     // Store the measurements for later processing.
  65:Src/foc.cpp   ****     i_timestamp_ = input_timestamp;
 1671              		.loc 10 65 18
 1672 0012 FB68     		ldr	r3, [r7, #12]
 1673 0014 BA6A     		ldr	r2, [r7, #40]
 1674 0016 5A67     		str	r2, [r3, #116]
  66:Src/foc.cpp   ****     vbus_voltage_measured_ = vbus_voltage;
 1675              		.loc 10 66 28
 1676 0018 FB68     		ldr	r3, [r7, #12]
 1677 001a 7833     		adds	r3, r3, #120
 1678 001c 3A1D     		adds	r2, r7, #4
 1679 001e 92E80300 		ldm	r2, {r0, r1}
 1680 0022 83E80300 		stm	r3, {r0, r1}
  67:Src/foc.cpp   ****     Ialpha_beta_measured_ = Ialpha_beta;
 1681              		.loc 10 67 29
 1682 0026 FB68     		ldr	r3, [r7, #12]
 1683 0028 8033     		adds	r3, r3, #128
 1684 002a 07F11C02 		add	r2, r7, #28
 1685 002e 1146     		mov	r1, r2
 1686 0030 1846     		mov	r0, r3
 1687 0032 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSERKS2_
  68:Src/foc.cpp   **** 
  69:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
 1688              		.loc 10 69 35
 1689 0036 0023     		movs	r3, #0
  70:Src/foc.cpp   **** }
 1690              		.loc 10 70 1
 1691 0038 1846     		mov	r0, r3
 1692 003a 1037     		adds	r7, r7, #16
 1693              	.LCFI150:
 1694              		.cfi_def_cfa_offset 16
 1695 003c BD46     		mov	sp, r7
 1696              	.LCFI151:
 1697              		.cfi_def_cfa_register 13
 1698              		@ sp needed
 1699 003e BDE88040 		pop	{r7, lr}
 1700              	.LCFI152:
ARM GAS  /tmp/ccSXOI3d.s 			page 98


 1701              		.cfi_restore 14
 1702              		.cfi_restore 7
 1703              		.cfi_def_cfa_offset 8
 1704 0042 02B0     		add	sp, sp, #8
 1705              	.LCFI153:
 1706              		.cfi_def_cfa_offset 0
 1707 0044 7047     		bx	lr
 1708              		.cfi_endproc
 1709              	.LFE3461:
 1711              		.section	.text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_,"axG",%progbits,
 1712              		.align	1
 1713              		.weak	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu fpv4-sp-d16
 1719              	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:
 1720              	.LFB3466:
 1721              		.file 11 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // <utility> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
ARM GAS  /tmp/ccSXOI3d.s 			page 99


  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /** @file include/utility
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *  This is a Standard C++ Library header.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #ifndef _GLIBCXX_UTILITY
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #define _GLIBCXX_UTILITY 1
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #pragma GCC system_header
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /**
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * @defgroup utilities Utilities
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Components deemed generally useful. Includes pair, tuple,
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * forward/move helpers, ratio, function object, metaprogramming and
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * type traits, time, date, and memory functions.
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/c++config.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/stl_relops.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/stl_pair.h>
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <type_traits>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/move.h>
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <initializer_list>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus > 201703L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <ext/numeric_traits.h>
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #endif
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** namespace std _GLIBCXX_VISIBILITY(default)
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** {
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Finds the size of a given tuple type.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size;
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // 2313. tuple_size should always derive from integral_constant<size_t, N>
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // 2770. tuple_size<const T> specialization is not SFINAE compatible
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp,
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   typename _Up = typename remove_cv<_Tp>::type,
ARM GAS  /tmp/ccSXOI3d.s 			page 100


  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   size_t = tuple_size<_Tp>::value>
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using __enable_if_has_tuple_size = _Tp;
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Gives the type of the ith element of a given tuple type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // Duplicate of C++14's tuple_element_t for internal use in C++11 mode
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using __tuple_element_t = typename tuple_element<__i, _Tp>::type;
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, const _Tp>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, volatile _Tp>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, const volatile _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus >= 201402L
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // The standard says this macro and alias template should be in <tuple>
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // but we define them here, to be available when the partial specializations
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // of tuple_element<pair<T,U>> and tuple_element<array<T,N>> are defined.
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #define __cpp_lib_tuple_element_t 201402L
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using tuple_element_t = typename tuple_element<__i, _Tp>::type;
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #endif
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // Various functions which give std::pair a tuple-like interface.
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _T1, typename _T2>
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
ARM GAS  /tmp/ccSXOI3d.s 			page 101


 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { };
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<std::pair<_Tp1, _Tp2>>
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public integral_constant<std::size_t, 2> { };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<0, std::pair<_Tp1, _Tp2>>
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { typedef _Tp1 type; };
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<1, std::pair<_Tp1, _Tp2>>
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { typedef _Tp2 type; };
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int>
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get;
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get<0>
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp1&
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.first; }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp1&&
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp1&
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.first; }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp1&&
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<const _Tp1>(__pair.first); }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get<1>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp2&
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.second; }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp2&&
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 102


 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp2&
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.second; }
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp2&&
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<const _Tp2>(__pair.second); }
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     get(std::pair<_Tp1, _Tp2>& __in) noexcept
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__get(__in); }
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     get(std::pair<_Tp1, _Tp2>&& __in) noexcept
 1722              		.loc 11 228 5
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 8
 1725              		@ frame_needed = 1, uses_anonymous_args = 0
 1726 0000 80B5     		push	{r7, lr}
 1727              	.LCFI154:
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 7, -8
 1730              		.cfi_offset 14, -4
 1731 0002 82B0     		sub	sp, sp, #8
 1732              	.LCFI155:
 1733              		.cfi_def_cfa_offset 16
 1734 0004 00AF     		add	r7, sp, #0
 1735              	.LCFI156:
 1736              		.cfi_def_cfa_register 7
 1737 0006 7860     		str	r0, [r7, #4]
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__move_get(std::move(__in)); }
 1738              		.loc 11 229 52
 1739 0008 7868     		ldr	r0, [r7, #4]
 1740 000a FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 1741 000e 0346     		mov	r3, r0
 1742              		.loc 11 229 42
 1743 0010 1846     		mov	r0, r3
 1744 0012 FFF7FEFF 		bl	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
 1745 0016 0346     		mov	r3, r0
 1746              		.loc 11 229 61
 1747 0018 1846     		mov	r0, r3
 1748 001a 0837     		adds	r7, r7, #8
 1749              	.LCFI157:
 1750              		.cfi_def_cfa_offset 8
 1751 001c BD46     		mov	sp, r7
 1752              	.LCFI158:
 1753              		.cfi_def_cfa_register 13
 1754              		@ sp needed
 1755 001e 80BD     		pop	{r7, pc}
 1756              		.cfi_endproc
 1757              	.LFE3466:
 1759              		.section	.text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E,"axG",%progbits,_ZNSt10
ARM GAS  /tmp/ccSXOI3d.s 			page 103


 1760              		.align	1
 1761              		.weak	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu fpv4-sp-d16
 1767              	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:
 1768              	.LFB3467:
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 1769              		.loc 11 183 9
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 8
 1772              		@ frame_needed = 1, uses_anonymous_args = 0
 1773 0000 80B5     		push	{r7, lr}
 1774              	.LCFI159:
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 7, -8
 1777              		.cfi_offset 14, -4
 1778 0002 82B0     		sub	sp, sp, #8
 1779              	.LCFI160:
 1780              		.cfi_def_cfa_offset 16
 1781 0004 00AF     		add	r7, sp, #0
 1782              	.LCFI161:
 1783              		.cfi_def_cfa_register 7
 1784 0006 7860     		str	r0, [r7, #4]
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1785              		.loc 11 184 44
 1786 0008 7B68     		ldr	r3, [r7, #4]
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1787              		.loc 11 184 36
 1788 000a 1846     		mov	r0, r3
 1789 000c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 1790 0010 0346     		mov	r3, r0
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1791              		.loc 11 184 52
 1792 0012 1846     		mov	r0, r3
 1793 0014 0837     		adds	r7, r7, #8
 1794              	.LCFI162:
 1795              		.cfi_def_cfa_offset 8
 1796 0016 BD46     		mov	sp, r7
 1797              	.LCFI163:
 1798              		.cfi_def_cfa_register 13
 1799              		@ sp needed
 1800 0018 80BD     		pop	{r7, pc}
 1801              		.cfi_endproc
 1802              	.LFE3467:
 1804              		.section	.text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_,"axG",%progbits,_ZSt4mo
 1805              		.align	1
 1806              		.weak	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 1807              		.syntax unified
 1808              		.thumb
 1809              		.thumb_func
 1810              		.fpu fpv4-sp-d16
 1812              	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:
 1813              	.LFB3468:
 1814              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
ARM GAS  /tmp/ccSXOI3d.s 			page 104


   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 105


  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     {
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   */
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     move(_Tp&& __t) noexcept
 1815              		.loc 12 101 5
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 8
 1818              		@ frame_needed = 1, uses_anonymous_args = 0
 1819              		@ link register save eliminated.
 1820 0000 80B4     		push	{r7}
 1821              	.LCFI164:
 1822              		.cfi_def_cfa_offset 4
 1823              		.cfi_offset 7, -4
 1824 0002 83B0     		sub	sp, sp, #12
 1825              	.LCFI165:
 1826              		.cfi_def_cfa_offset 16
 1827 0004 00AF     		add	r7, sp, #0
 1828              	.LCFI166:
ARM GAS  /tmp/ccSXOI3d.s 			page 106


 1829              		.cfi_def_cfa_register 7
 1830 0006 7860     		str	r0, [r7, #4]
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 1831              		.loc 12 102 74
 1832 0008 7B68     		ldr	r3, [r7, #4]
 1833              		.loc 12 102 77
 1834 000a 1846     		mov	r0, r3
 1835 000c 0C37     		adds	r7, r7, #12
 1836              	.LCFI167:
 1837              		.cfi_def_cfa_offset 4
 1838 000e BD46     		mov	sp, r7
 1839              	.LCFI168:
 1840              		.cfi_def_cfa_register 13
 1841              		@ sp needed
 1842 0010 5DF8047B 		ldr	r7, [sp], #4
 1843              	.LCFI169:
 1844              		.cfi_restore 7
 1845              		.cfi_def_cfa_offset 0
 1846 0014 7047     		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE3468:
 1850              		.section	.text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE,"axG",%progbits,_ZSt7forwardIfE
 1851              		.align	1
 1852              		.weak	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:
 1859              	.LFB3469:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1860              		.loc 12 76 5
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 8
 1863              		@ frame_needed = 1, uses_anonymous_args = 0
 1864              		@ link register save eliminated.
 1865 0000 80B4     		push	{r7}
 1866              	.LCFI170:
 1867              		.cfi_def_cfa_offset 4
 1868              		.cfi_offset 7, -4
 1869 0002 83B0     		sub	sp, sp, #12
 1870              	.LCFI171:
 1871              		.cfi_def_cfa_offset 16
 1872 0004 00AF     		add	r7, sp, #0
 1873              	.LCFI172:
 1874              		.cfi_def_cfa_register 7
 1875 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 1876              		.loc 12 77 36
 1877 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 1878              		.loc 12 77 39
 1879 000a 1846     		mov	r0, r3
 1880 000c 0C37     		adds	r7, r7, #12
 1881              	.LCFI173:
 1882              		.cfi_def_cfa_offset 4
 1883 000e BD46     		mov	sp, r7
ARM GAS  /tmp/ccSXOI3d.s 			page 107


 1884              	.LCFI174:
 1885              		.cfi_def_cfa_register 13
 1886              		@ sp needed
 1887 0010 5DF8047B 		ldr	r7, [sp], #4
 1888              	.LCFI175:
 1889              		.cfi_restore 7
 1890              		.cfi_def_cfa_offset 0
 1891 0014 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE3469:
 1895              		.section	.text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_,"axG",%progbits,
 1896              		.align	1
 1897              		.weak	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 1898              		.syntax unified
 1899              		.thumb
 1900              		.thumb_func
 1901              		.fpu fpv4-sp-d16
 1903              	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:
 1904              	.LFB3470:
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__move_get(std::move(__in)); }
 1905              		.loc 11 228 5
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 8
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909 0000 80B5     		push	{r7, lr}
 1910              	.LCFI176:
 1911              		.cfi_def_cfa_offset 8
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 82B0     		sub	sp, sp, #8
 1915              	.LCFI177:
 1916              		.cfi_def_cfa_offset 16
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI178:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
 1921              		.loc 11 229 52
 1922 0008 7868     		ldr	r0, [r7, #4]
 1923 000a FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 1924 000e 0346     		mov	r3, r0
 1925              		.loc 11 229 42
 1926 0010 1846     		mov	r0, r3
 1927 0012 FFF7FEFF 		bl	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
 1928 0016 0346     		mov	r3, r0
 1929              		.loc 11 229 61
 1930 0018 1846     		mov	r0, r3
 1931 001a 0837     		adds	r7, r7, #8
 1932              	.LCFI179:
 1933              		.cfi_def_cfa_offset 8
 1934 001c BD46     		mov	sp, r7
 1935              	.LCFI180:
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 001e 80BD     		pop	{r7, pc}
 1939              		.cfi_endproc
 1940              	.LFE3470:
 1942              		.section	.text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E,"axG",%progbits,_ZNSt10
ARM GAS  /tmp/ccSXOI3d.s 			page 108


 1943              		.align	1
 1944              		.weak	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1948              		.fpu fpv4-sp-d16
 1950              	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:
 1951              	.LFB3471:
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 1952              		.loc 11 207 9
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 8
 1955              		@ frame_needed = 1, uses_anonymous_args = 0
 1956 0000 80B5     		push	{r7, lr}
 1957              	.LCFI181:
 1958              		.cfi_def_cfa_offset 8
 1959              		.cfi_offset 7, -8
 1960              		.cfi_offset 14, -4
 1961 0002 82B0     		sub	sp, sp, #8
 1962              	.LCFI182:
 1963              		.cfi_def_cfa_offset 16
 1964 0004 00AF     		add	r7, sp, #0
 1965              	.LCFI183:
 1966              		.cfi_def_cfa_register 7
 1967 0006 7860     		str	r0, [r7, #4]
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1968              		.loc 11 208 44
 1969 0008 7B68     		ldr	r3, [r7, #4]
 1970 000a 0433     		adds	r3, r3, #4
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1971              		.loc 11 208 36
 1972 000c 1846     		mov	r0, r3
 1973 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 1974 0012 0346     		mov	r3, r0
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 1975              		.loc 11 208 53
 1976 0014 1846     		mov	r0, r3
 1977 0016 0837     		adds	r7, r7, #8
 1978              	.LCFI184:
 1979              		.cfi_def_cfa_offset 8
 1980 0018 BD46     		mov	sp, r7
 1981              	.LCFI185:
 1982              		.cfi_def_cfa_register 13
 1983              		@ sp needed
 1984 001a 80BD     		pop	{r7, pc}
 1985              		.cfi_endproc
 1986              	.LFE3471:
 1988              		.section	.text._ZSt11__addressofISt4pairIffEEPT_RS2_,"axG",%progbits,_ZSt11__addressofISt4pairIffE
 1989              		.align	1
 1990              		.weak	_ZSt11__addressofISt4pairIffEEPT_RS2_
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv4-sp-d16
 1996              	_ZSt11__addressofISt4pairIffEEPT_RS2_:
 1997              	.LFB3476:
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
ARM GAS  /tmp/ccSXOI3d.s 			page 109


 1998              		.loc 12 49 5
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0000 80B4     		push	{r7}
 2004              	.LCFI186:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 0002 83B0     		sub	sp, sp, #12
 2008              	.LCFI187:
 2009              		.cfi_def_cfa_offset 16
 2010 0004 00AF     		add	r7, sp, #0
 2011              	.LCFI188:
 2012              		.cfi_def_cfa_register 7
 2013 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 2014              		.loc 12 50 37
 2015 0008 7B68     		ldr	r3, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 2016              		.loc 12 50 40
 2017 000a 1846     		mov	r0, r3
 2018 000c 0C37     		adds	r7, r7, #12
 2019              	.LCFI189:
 2020              		.cfi_def_cfa_offset 4
 2021 000e BD46     		mov	sp, r7
 2022              	.LCFI190:
 2023              		.cfi_def_cfa_register 13
 2024              		@ sp needed
 2025 0010 5DF8047B 		ldr	r7, [sp], #4
 2026              	.LCFI191:
 2027              		.cfi_restore 7
 2028              		.cfi_def_cfa_offset 0
 2029 0014 7047     		bx	lr
 2030              		.cfi_endproc
 2031              	.LFE3476:
 2033              		.section	.text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv,"ax
 2034              		.align	1
 2035              		.weak	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
 2039              		.fpu fpv4-sp-d16
 2041              	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:
 2042              	.LFB3477:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 2043              		.loc 2 439 7
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 8
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047 0000 80B5     		push	{r7, lr}
 2048              	.LCFI192:
 2049              		.cfi_def_cfa_offset 8
 2050              		.cfi_offset 7, -8
 2051              		.cfi_offset 14, -4
 2052 0002 82B0     		sub	sp, sp, #8
 2053              	.LCFI193:
ARM GAS  /tmp/ccSXOI3d.s 			page 110


 2054              		.cfi_def_cfa_offset 16
 2055 0004 00AF     		add	r7, sp, #0
 2056              	.LCFI194:
 2057              		.cfi_def_cfa_register 7
 2058 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 2059              		.loc 2 442 51
 2060 0008 7B68     		ldr	r3, [r7, #4]
 2061 000a 1846     		mov	r0, r3
 2062 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 2063 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2064              		.loc 2 443 7
 2065 0012 1846     		mov	r0, r3
 2066 0014 0837     		adds	r7, r7, #8
 2067              	.LCFI195:
 2068              		.cfi_def_cfa_offset 8
 2069 0016 BD46     		mov	sp, r7
 2070              	.LCFI196:
 2071              		.cfi_def_cfa_register 13
 2072              		@ sp needed
 2073 0018 80BD     		pop	{r7, pc}
 2074              		.cfi_endproc
 2075              	.LFE3477:
 2077              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv,"axG",%progbits,_ZNSt22_Optiona
 2078              		.align	1
 2079              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 2080              		.syntax unified
 2081              		.thumb
 2082              		.thumb_func
 2083              		.fpu fpv4-sp-d16
 2085              	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:
 2086              	.LFB3478:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 2087              		.loc 2 268 7
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 8
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
 2092 0000 80B4     		push	{r7}
 2093              	.LCFI197:
 2094              		.cfi_def_cfa_offset 4
 2095              		.cfi_offset 7, -4
 2096 0002 83B0     		sub	sp, sp, #12
 2097              	.LCFI198:
 2098              		.cfi_def_cfa_offset 16
 2099 0004 00AF     		add	r7, sp, #0
 2100              	.LCFI199:
 2101              		.cfi_def_cfa_register 7
 2102 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2103              		.loc 2 269 33
 2104 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2105              		.loc 2 269 43
 2106 000a 1846     		mov	r0, r3
 2107 000c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccSXOI3d.s 			page 111


 2108              	.LCFI200:
 2109              		.cfi_def_cfa_offset 4
 2110 000e BD46     		mov	sp, r7
 2111              	.LCFI201:
 2112              		.cfi_def_cfa_register 13
 2113              		@ sp needed
 2114 0010 5DF8047B 		ldr	r7, [sp], #4
 2115              	.LCFI202:
 2116              		.cfi_restore 7
 2117              		.cfi_def_cfa_offset 0
 2118 0014 7047     		bx	lr
 2119              		.cfi_endproc
 2120              	.LFE3478:
 2122              		.section	.text._ZNRSt8optionalISt4pairIffEEdeEv,"axG",%progbits,_ZNRSt8optionalISt4pairIffEEdeEv,c
 2123              		.align	1
 2124              		.weak	_ZNRSt8optionalISt4pairIffEEdeEv
 2125              		.syntax unified
 2126              		.thumb
 2127              		.thumb_func
 2128              		.fpu fpv4-sp-d16
 2130              	_ZNRSt8optionalISt4pairIffEEdeEv:
 2131              	.LFB3479:
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 2132              		.loc 2 903 7
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136 0000 80B5     		push	{r7, lr}
 2137              	.LCFI203:
 2138              		.cfi_def_cfa_offset 8
 2139              		.cfi_offset 7, -8
 2140              		.cfi_offset 14, -4
 2141 0002 82B0     		sub	sp, sp, #8
 2142              	.LCFI204:
 2143              		.cfi_def_cfa_offset 16
 2144 0004 00AF     		add	r7, sp, #0
 2145              	.LCFI205:
 2146              		.cfi_def_cfa_register 7
 2147 0006 7860     		str	r0, [r7, #4]
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2148              		.loc 2 904 28
 2149 0008 7868     		ldr	r0, [r7, #4]
 2150 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 2151 000e 0346     		mov	r3, r0
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2152              		.loc 2 904 32
 2153 0010 1846     		mov	r0, r3
 2154 0012 0837     		adds	r7, r7, #8
 2155              	.LCFI206:
 2156              		.cfi_def_cfa_offset 8
 2157 0014 BD46     		mov	sp, r7
 2158              	.LCFI207:
 2159              		.cfi_def_cfa_register 13
 2160              		@ sp needed
 2161 0016 80BD     		pop	{r7, pc}
 2162              		.cfi_endproc
 2163              	.LFE3479:
ARM GAS  /tmp/ccSXOI3d.s 			page 112


 2165              		.section	.text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_I
 2166              		.align	1
 2167              		.global	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 2168              		.syntax unified
 2169              		.thumb
 2170              		.thumb_func
 2171              		.fpu fpv4-sp-d16
 2173              	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 2174              	.LFB3465:
  71:Src/foc.cpp   **** 
  72:Src/foc.cpp   **** ODriveIntf::MotorIntf::Error FieldOrientedController::get_alpha_beta_output(
  73:Src/foc.cpp   ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
  74:Src/foc.cpp   ****         std::optional<float>* ibus) {
 2175              		.loc 10 74 37
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 232
 2178              		@ frame_needed = 1, uses_anonymous_args = 0
 2179 0000 80B5     		push	{r7, lr}
 2180              	.LCFI208:
 2181              		.cfi_def_cfa_offset 8
 2182              		.cfi_offset 7, -8
 2183              		.cfi_offset 14, -4
 2184 0002 2DED028B 		vpush.64	{d8}
 2185              	.LCFI209:
 2186              		.cfi_def_cfa_offset 16
 2187              		.cfi_offset 80, -16
 2188              		.cfi_offset 81, -12
 2189 0006 BAB0     		sub	sp, sp, #232
 2190              	.LCFI210:
 2191              		.cfi_def_cfa_offset 248
 2192 0008 00AF     		add	r7, sp, #0
 2193              	.LCFI211:
 2194              		.cfi_def_cfa_register 7
 2195 000a F860     		str	r0, [r7, #12]
 2196 000c B960     		str	r1, [r7, #8]
 2197 000e 7A60     		str	r2, [r7, #4]
 2198 0010 3B60     		str	r3, [r7]
  75:Src/foc.cpp   **** 
  76:Src/foc.cpp   ****     if (!vbus_voltage_measured_.has_value() || !Ialpha_beta_measured_.has_value()) {
 2199              		.loc 10 76 42
 2200 0012 FB68     		ldr	r3, [r7, #12]
 2201 0014 7833     		adds	r3, r3, #120
 2202 0016 1846     		mov	r0, r3
 2203 0018 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 2204 001c 0346     		mov	r3, r0
 2205              		.loc 10 76 9
 2206 001e 83F00103 		eor	r3, r3, #1
 2207 0022 DBB2     		uxtb	r3, r3
 2208              		.loc 10 76 45
 2209 0024 002B     		cmp	r3, #0
 2210 0026 0AD1     		bne	.L89
 2211              		.loc 10 76 80 discriminator 2
 2212 0028 FB68     		ldr	r3, [r7, #12]
 2213 002a 8033     		adds	r3, r3, #128
 2214 002c 1846     		mov	r0, r3
 2215 002e FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2216 0032 0346     		mov	r3, r0
ARM GAS  /tmp/ccSXOI3d.s 			page 113


 2217              		.loc 10 76 48 discriminator 2
 2218 0034 83F00103 		eor	r3, r3, #1
 2219 0038 DBB2     		uxtb	r3, r3
 2220              		.loc 10 76 45 discriminator 2
 2221 003a 002B     		cmp	r3, #0
 2222 003c 01D0     		beq	.L90
 2223              	.L89:
 2224              		.loc 10 76 45 is_stmt 0 discriminator 3
 2225 003e 0123     		movs	r3, #1
 2226 0040 00E0     		b	.L91
 2227              	.L90:
 2228              		.loc 10 76 45 discriminator 4
 2229 0042 0023     		movs	r3, #0
 2230              	.L91:
 2231              		.loc 10 76 5 is_stmt 1 discriminator 6
 2232 0044 002B     		cmp	r3, #0
 2233 0046 02D0     		beq	.L92
  77:Src/foc.cpp   ****         // FOC didn't receive a current measurement yet.
  78:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_CONTROLLER_INITIALIZING;
 2234              		.loc 10 78 46
 2235 0048 4FF08063 		mov	r3, #67108864
 2236 004c 5AE3     		b	.L112
 2237              	.L92:
  79:Src/foc.cpp   ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 2238              		.loc 10 79 30
 2239 004e FB68     		ldr	r3, [r7, #12]
 2240 0050 5A6F     		ldr	r2, [r3, #116]
 2241              		.loc 10 79 45
 2242 0052 FB68     		ldr	r3, [r7, #12]
 2243 0054 5B6C     		ldr	r3, [r3, #68]
 2244              		.loc 10 79 43
 2245 0056 D31A     		subs	r3, r2, r3
 2246              		.loc 10 79 19
 2247 0058 1846     		mov	r0, r3
 2248 005a FFF7FEFF 		bl	_ZSt3absl
 2249 005e 0346     		mov	r3, r0
 2250              		.loc 10 79 63
 2251 0060 40F6CD02 		movw	r2, #2253
 2252 0064 9342     		cmp	r3, r2
 2253 0066 CCBF     		ite	gt
 2254 0068 0123     		movgt	r3, #1
 2255 006a 0023     		movle	r3, #0
 2256 006c DBB2     		uxtb	r3, r3
 2257              		.loc 10 79 12
 2258 006e 002B     		cmp	r3, #0
 2259 0070 02D0     		beq	.L94
  80:Src/foc.cpp   ****         // Data from control loop and current measurement are too far apart.
  81:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_BAD_TIMING;
 2260              		.loc 10 81 46
 2261 0072 4FF08073 		mov	r3, #16777216
 2262 0076 45E3     		b	.L112
 2263              	.L94:
  82:Src/foc.cpp   ****     }
  83:Src/foc.cpp   **** 
  84:Src/foc.cpp   ****     // TODO: improve efficiency in case PWM updates are requested at a higher
  85:Src/foc.cpp   ****     // rate than current sensor updates. In this case we can reuse mod_d and
  86:Src/foc.cpp   ****     // mod_q from a previous iteration.
ARM GAS  /tmp/ccSXOI3d.s 			page 114


  87:Src/foc.cpp   **** 
  88:Src/foc.cpp   ****     if (!Vdq_setpoint_.has_value()) {
 2264              		.loc 10 88 33
 2265 0078 FB68     		ldr	r3, [r7, #12]
 2266 007a 5833     		adds	r3, r3, #88
 2267 007c 1846     		mov	r0, r3
 2268 007e FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2269 0082 0346     		mov	r3, r0
 2270              		.loc 10 88 9
 2271 0084 83F00103 		eor	r3, r3, #1
 2272 0088 DBB2     		uxtb	r3, r3
 2273              		.loc 10 88 5
 2274 008a 002B     		cmp	r3, #0
 2275 008c 2BD1     		bne	.L95
  89:Src/foc.cpp   ****         //return Motor::ERROR_UNKNOWN_VOLTAGE_COMMAND;
  90:Src/foc.cpp   ****     } else if (!phase_.has_value() || !phase_vel_.has_value()) {
 2276              		.loc 10 90 33
 2277 008e FB68     		ldr	r3, [r7, #12]
 2278 0090 6433     		adds	r3, r3, #100
 2279 0092 1846     		mov	r0, r3
 2280 0094 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 2281 0098 0346     		mov	r3, r0
 2282              		.loc 10 90 16
 2283 009a 83F00103 		eor	r3, r3, #1
 2284 009e DBB2     		uxtb	r3, r3
 2285              		.loc 10 90 36
 2286 00a0 002B     		cmp	r3, #0
 2287 00a2 0AD1     		bne	.L96
 2288              		.loc 10 90 60 discriminator 2
 2289 00a4 FB68     		ldr	r3, [r7, #12]
 2290 00a6 6C33     		adds	r3, r3, #108
 2291 00a8 1846     		mov	r0, r3
 2292 00aa FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 2293 00ae 0346     		mov	r3, r0
 2294              		.loc 10 90 39 discriminator 2
 2295 00b0 83F00103 		eor	r3, r3, #1
 2296 00b4 DBB2     		uxtb	r3, r3
 2297              		.loc 10 90 36 discriminator 2
 2298 00b6 002B     		cmp	r3, #0
 2299 00b8 01D0     		beq	.L97
 2300              	.L96:
 2301              		.loc 10 90 36 is_stmt 0 discriminator 3
 2302 00ba 0123     		movs	r3, #1
 2303 00bc 00E0     		b	.L98
 2304              	.L97:
 2305              		.loc 10 90 36 discriminator 4
 2306 00be 0023     		movs	r3, #0
 2307              	.L98:
 2308              		.loc 10 90 12 is_stmt 1 discriminator 6
 2309 00c0 002B     		cmp	r3, #0
 2310 00c2 02D0     		beq	.L99
  91:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_PHASE_ESTIMATE;
 2311              		.loc 10 91 46
 2312 00c4 4FF48013 		mov	r3, #1048576
 2313 00c8 1CE3     		b	.L112
 2314              	.L99:
  92:Src/foc.cpp   ****     } else if (!vbus_voltage_measured_.has_value()) {
ARM GAS  /tmp/ccSXOI3d.s 			page 115


 2315              		.loc 10 92 49
 2316 00ca FB68     		ldr	r3, [r7, #12]
 2317 00cc 7833     		adds	r3, r3, #120
 2318 00ce 1846     		mov	r0, r3
 2319 00d0 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 2320 00d4 0346     		mov	r3, r0
 2321              		.loc 10 92 16
 2322 00d6 83F00103 		eor	r3, r3, #1
 2323 00da DBB2     		uxtb	r3, r3
 2324              		.loc 10 92 12
 2325 00dc 002B     		cmp	r3, #0
 2326 00de 02D0     		beq	.L95
  93:Src/foc.cpp   ****         return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_VBUS_VOLTAGE;
 2327              		.loc 10 93 46
 2328 00e0 4FF48023 		mov	r3, #262144
 2329 00e4 0EE3     		b	.L112
 2330              	.L95:
  94:Src/foc.cpp   ****     }
  95:Src/foc.cpp   **** 
  96:Src/foc.cpp   ****     auto [Vd, Vq] = *Vdq_setpoint_;
 2331              		.loc 10 96 22
 2332 00e6 FB68     		ldr	r3, [r7, #12]
 2333 00e8 5833     		adds	r3, r3, #88
 2334 00ea 1846     		mov	r0, r3
 2335 00ec FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2336 00f0 0246     		mov	r2, r0
 2337 00f2 07F14C03 		add	r3, r7, #76
 2338 00f6 92E80300 		ldm	r2, {r0, r1}
 2339 00fa 83E80300 		stm	r3, {r0, r1}
 2340              		.loc 10 96 11
 2341 00fe 07F14C03 		add	r3, r7, #76
 2342 0102 1846     		mov	r0, r3
 2343 0104 FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2344 0108 C7F8DC00 		str	r0, [r7, #220]
 2345              		.loc 10 96 15
 2346 010c 07F14C03 		add	r3, r7, #76
 2347 0110 1846     		mov	r0, r3
 2348 0112 FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2349 0116 C7F8D800 		str	r0, [r7, #216]
  97:Src/foc.cpp   ****     float phase = *phase_;
 2350              		.loc 10 97 20
 2351 011a FB68     		ldr	r3, [r7, #12]
 2352 011c 6433     		adds	r3, r3, #100
 2353 011e 1846     		mov	r0, r3
 2354 0120 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 2355 0124 0346     		mov	r3, r0
 2356 0126 1B68     		ldr	r3, [r3]	@ float
 2357 0128 C7F8D430 		str	r3, [r7, #212]	@ float
  98:Src/foc.cpp   ****     float phase_vel = *phase_vel_;
 2358              		.loc 10 98 24
 2359 012c FB68     		ldr	r3, [r7, #12]
 2360 012e 6C33     		adds	r3, r3, #108
 2361 0130 1846     		mov	r0, r3
 2362 0132 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 2363 0136 0346     		mov	r3, r0
 2364 0138 1B68     		ldr	r3, [r3]	@ float
 2365 013a C7F8D030 		str	r3, [r7, #208]	@ float
ARM GAS  /tmp/ccSXOI3d.s 			page 116


  99:Src/foc.cpp   ****     float vbus_voltage = *vbus_voltage_measured_;
 2366              		.loc 10 99 27
 2367 013e FB68     		ldr	r3, [r7, #12]
 2368 0140 7833     		adds	r3, r3, #120
 2369 0142 1846     		mov	r0, r3
 2370 0144 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 2371 0148 0346     		mov	r3, r0
 2372 014a 1B68     		ldr	r3, [r3]	@ float
 2373 014c C7F8CC30 		str	r3, [r7, #204]	@ float
 100:Src/foc.cpp   **** 
 101:Src/foc.cpp   ****     std::optional<float2D> Idq;
 2374              		.loc 10 101 28
 2375 0150 07F14003 		add	r3, r7, #64
 2376 0154 0022     		movs	r2, #0
 2377 0156 1A60     		str	r2, [r3]
 2378 0158 5A60     		str	r2, [r3, #4]
 2379 015a 9A60     		str	r2, [r3, #8]
 2380              	.LBB17:
 102:Src/foc.cpp   **** 
 103:Src/foc.cpp   ****     // Park transform
 104:Src/foc.cpp   ****     if (Ialpha_beta_measured_.has_value()) {
 2381              		.loc 10 104 40
 2382 015c FB68     		ldr	r3, [r7, #12]
 2383 015e 8033     		adds	r3, r3, #128
 2384 0160 1846     		mov	r0, r3
 2385 0162 FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2386 0166 0346     		mov	r3, r0
 2387              		.loc 10 104 5
 2388 0168 002B     		cmp	r3, #0
 2389 016a 00F0AB80 		beq	.L100
 2390              	.LBB18:
 105:Src/foc.cpp   ****         auto [Ialpha, Ibeta] = *Ialpha_beta_measured_;
 2391              		.loc 10 105 33
 2392 016e FB68     		ldr	r3, [r7, #12]
 2393 0170 8033     		adds	r3, r3, #128
 2394 0172 1846     		mov	r0, r3
 2395 0174 FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2396 0178 0246     		mov	r2, r0
 2397 017a 07F13003 		add	r3, r7, #48
 2398 017e 92E80300 		ldm	r2, {r0, r1}
 2399 0182 83E80300 		stm	r3, {r0, r1}
 2400              		.loc 10 105 15
 2401 0186 07F13003 		add	r3, r7, #48
 2402 018a 1846     		mov	r0, r3
 2403 018c FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2404 0190 C7F8C800 		str	r0, [r7, #200]
 2405              		.loc 10 105 23
 2406 0194 07F13003 		add	r3, r7, #48
 2407 0198 1846     		mov	r0, r3
 2408 019a FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2409 019e C7F8C400 		str	r0, [r7, #196]
 106:Src/foc.cpp   ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 2410              		.loc 10 106 63
 2411 01a2 FB68     		ldr	r3, [r7, #12]
 2412 01a4 5A6F     		ldr	r2, [r3, #116]
 2413              		.loc 10 106 78
 2414 01a6 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccSXOI3d.s 			page 117


 2415 01a8 5B6C     		ldr	r3, [r3, #68]
 2416              		.loc 10 106 76
 2417 01aa D31A     		subs	r3, r2, r3
 2418              		.loc 10 106 53
 2419 01ac 07EE903A 		vmov	s15, r3	@ int
 2420              		.loc 10 106 46
 2421 01b0 F8EEE77A 		vcvt.f32.s32	s15, s15
 2422              		.loc 10 106 95
 2423 01b4 DFEDD66A 		vldr.32	s13, .L115
 2424 01b8 87EEA67A 		vdiv.f32	s14, s15, s13
 2425              		.loc 10 106 43
 2426 01bc D7ED347A 		vldr.32	s15, [r7, #208]
 2427 01c0 67EE277A 		vmul.f32	s15, s14, s15
 2428              		.loc 10 106 15
 2429 01c4 97ED357A 		vldr.32	s14, [r7, #212]
 2430 01c8 77EE277A 		vadd.f32	s15, s14, s15
 2431 01cc C7ED307A 		vstr.32	s15, [r7, #192]
 107:Src/foc.cpp   ****         float c_I = our_arm_cos_f32(I_phase);
 2432              		.loc 10 107 36
 2433 01d0 97ED300A 		vldr.32	s0, [r7, #192]
 2434 01d4 FFF7FEFF 		bl	our_arm_cos_f32
 2435 01d8 87ED2F0A 		vstr.32	s0, [r7, #188]
 108:Src/foc.cpp   ****         float s_I = our_arm_sin_f32(I_phase);
 2436              		.loc 10 108 36
 2437 01dc 97ED300A 		vldr.32	s0, [r7, #192]
 2438 01e0 FFF7FEFF 		bl	our_arm_sin_f32
 2439 01e4 87ED2E0A 		vstr.32	s0, [r7, #184]
 109:Src/foc.cpp   ****         Idq = {
 110:Src/foc.cpp   ****             c_I * Ialpha + s_I * Ibeta,
 2440              		.loc 10 110 19
 2441 01e8 D7F8C830 		ldr	r3, [r7, #200]
 2442 01ec 93ED007A 		vldr.32	s14, [r3]
 2443              		.loc 10 110 17
 2444 01f0 D7ED2F7A 		vldr.32	s15, [r7, #188]
 2445 01f4 27EE277A 		vmul.f32	s14, s14, s15
 2446              		.loc 10 110 34
 2447 01f8 D7F8C430 		ldr	r3, [r7, #196]
 2448 01fc D3ED006A 		vldr.32	s13, [r3]
 2449              		.loc 10 110 32
 2450 0200 D7ED2E7A 		vldr.32	s15, [r7, #184]
 2451 0204 66EEA77A 		vmul.f32	s15, s13, s15
 2452              		.loc 10 110 26
 2453 0208 77EE277A 		vadd.f32	s15, s14, s15
 2454 020c C7ED177A 		vstr.32	s15, [r7, #92]
 111:Src/foc.cpp   ****             c_I * Ibeta - s_I * Ialpha
 2455              		.loc 10 111 19
 2456 0210 D7F8C430 		ldr	r3, [r7, #196]
 2457 0214 93ED007A 		vldr.32	s14, [r3]
 2458              		.loc 10 111 17
 2459 0218 D7ED2F7A 		vldr.32	s15, [r7, #188]
 2460 021c 27EE277A 		vmul.f32	s14, s14, s15
 2461              		.loc 10 111 33
 2462 0220 D7F8C830 		ldr	r3, [r7, #200]
 2463 0224 D3ED006A 		vldr.32	s13, [r3]
 2464              		.loc 10 111 31
 2465 0228 D7ED2E7A 		vldr.32	s15, [r7, #184]
 2466 022c 66EEA77A 		vmul.f32	s15, s13, s15
ARM GAS  /tmp/ccSXOI3d.s 			page 118


 2467              		.loc 10 111 25
 2468 0230 77EE677A 		vsub.f32	s15, s14, s15
 2469 0234 C7ED187A 		vstr.32	s15, [r7, #96]
 112:Src/foc.cpp   ****         };
 2470              		.loc 10 112 9
 2471 0238 07F16002 		add	r2, r7, #96
 2472 023c 07F15C01 		add	r1, r7, #92
 2473 0240 07F15403 		add	r3, r7, #84
 2474 0244 1846     		mov	r0, r3
 2475 0246 FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 2476 024a 07F15402 		add	r2, r7, #84
 2477 024e 07F14003 		add	r3, r7, #64
 2478 0252 1146     		mov	r1, r2
 2479 0254 1846     		mov	r0, r3
 2480 0256 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 113:Src/foc.cpp   ****         Id_measured_ += I_measured_report_filter_k_ * (Idq->first - Id_measured_);
 2481              		.loc 10 113 25
 2482 025a FB68     		ldr	r3, [r7, #12]
 2483 025c 93ED058A 		vldr.32	s16, [r3, #20]
 2484              		.loc 10 113 59
 2485 0260 07F14003 		add	r3, r7, #64
 2486 0264 1846     		mov	r0, r3
 2487 0266 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 2488 026a 0346     		mov	r3, r0
 2489              		.loc 10 113 61
 2490 026c 93ED007A 		vldr.32	s14, [r3]
 2491              		.loc 10 113 69
 2492 0270 FB68     		ldr	r3, [r7, #12]
 2493 0272 D3ED237A 		vldr.32	s15, [r3, #140]
 2494              		.loc 10 113 67
 2495 0276 77EE677A 		vsub.f32	s15, s14, s15
 2496              		.loc 10 113 53
 2497 027a 28EE277A 		vmul.f32	s14, s16, s15
 2498              		.loc 10 113 22
 2499 027e FB68     		ldr	r3, [r7, #12]
 2500 0280 D3ED237A 		vldr.32	s15, [r3, #140]
 2501 0284 77EE277A 		vadd.f32	s15, s14, s15
 2502 0288 FB68     		ldr	r3, [r7, #12]
 2503 028a C3ED237A 		vstr.32	s15, [r3, #140]
 114:Src/foc.cpp   ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 2504              		.loc 10 114 25
 2505 028e FB68     		ldr	r3, [r7, #12]
 2506 0290 93ED058A 		vldr.32	s16, [r3, #20]
 2507              		.loc 10 114 59
 2508 0294 07F14003 		add	r3, r7, #64
 2509 0298 1846     		mov	r0, r3
 2510 029a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 2511 029e 0346     		mov	r3, r0
 2512              		.loc 10 114 61
 2513 02a0 93ED017A 		vldr.32	s14, [r3, #4]
 2514              		.loc 10 114 70
 2515 02a4 FB68     		ldr	r3, [r7, #12]
 2516 02a6 D3ED247A 		vldr.32	s15, [r3, #144]
 2517              		.loc 10 114 68
 2518 02aa 77EE677A 		vsub.f32	s15, s14, s15
 2519              		.loc 10 114 53
 2520 02ae 28EE277A 		vmul.f32	s14, s16, s15
ARM GAS  /tmp/ccSXOI3d.s 			page 119


 2521              		.loc 10 114 22
 2522 02b2 FB68     		ldr	r3, [r7, #12]
 2523 02b4 D3ED247A 		vldr.32	s15, [r3, #144]
 2524 02b8 77EE277A 		vadd.f32	s15, s14, s15
 2525 02bc FB68     		ldr	r3, [r7, #12]
 2526 02be C3ED247A 		vstr.32	s15, [r3, #144]
 2527              	.LBE18:
 2528 02c2 09E0     		b	.L101
 2529              	.L100:
 115:Src/foc.cpp   ****     } else {
 116:Src/foc.cpp   ****         Id_measured_ = 0.0f;
 2530              		.loc 10 116 22
 2531 02c4 FB68     		ldr	r3, [r7, #12]
 2532 02c6 4FF00002 		mov	r2, #0
 2533 02ca C3F88C20 		str	r2, [r3, #140]	@ float
 117:Src/foc.cpp   ****         Iq_measured_ = 0.0f;
 2534              		.loc 10 117 22
 2535 02ce FB68     		ldr	r3, [r7, #12]
 2536 02d0 4FF00002 		mov	r2, #0
 2537 02d4 C3F89020 		str	r2, [r3, #144]	@ float
 2538              	.L101:
 2539              	.LBE17:
 118:Src/foc.cpp   ****     }
 119:Src/foc.cpp   **** 
 120:Src/foc.cpp   **** 
 121:Src/foc.cpp   ****     float mod_to_V = (2.0f / 3.0f) * vbus_voltage;
 2540              		.loc 10 121 11
 2541 02d8 D7ED337A 		vldr.32	s15, [r7, #204]
 2542 02dc 9FED8D7A 		vldr.32	s14, .L115+4
 2543 02e0 67EE877A 		vmul.f32	s15, s15, s14
 2544 02e4 C7ED2D7A 		vstr.32	s15, [r7, #180]
 122:Src/foc.cpp   ****     float V_to_mod = 1.0f / mod_to_V;
 2545              		.loc 10 122 11
 2546 02e8 F7EE006A 		vmov.f32	s13, #1.0e+0
 2547 02ec 97ED2D7A 		vldr.32	s14, [r7, #180]
 2548 02f0 C6EE877A 		vdiv.f32	s15, s13, s14
 2549 02f4 C7ED2C7A 		vstr.32	s15, [r7, #176]
 2550              	.LBB19:
 123:Src/foc.cpp   ****     float mod_d;
 124:Src/foc.cpp   ****     float mod_q;
 125:Src/foc.cpp   **** 
 126:Src/foc.cpp   ****     if (enable_current_control_) {
 2551              		.loc 10 126 9
 2552 02f8 FB68     		ldr	r3, [r7, #12]
 2553 02fa 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 2554              		.loc 10 126 5
 2555 02fe 002B     		cmp	r3, #0
 2556 0300 00F03981 		beq	.L102
 2557              	.LBB20:
 127:Src/foc.cpp   ****         // Current control mode
 128:Src/foc.cpp   **** 
 129:Src/foc.cpp   ****         if (!pi_gains_.has_value()) {
 2558              		.loc 10 129 33
 2559 0304 FB68     		ldr	r3, [r7, #12]
 2560 0306 0833     		adds	r3, r3, #8
 2561 0308 1846     		mov	r0, r3
 2562 030a FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
ARM GAS  /tmp/ccSXOI3d.s 			page 120


 2563 030e 0346     		mov	r3, r0
 2564              		.loc 10 129 13
 2565 0310 83F00103 		eor	r3, r3, #1
 2566 0314 DBB2     		uxtb	r3, r3
 2567              		.loc 10 129 9
 2568 0316 002B     		cmp	r3, #0
 2569 0318 02D0     		beq	.L103
 130:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_GAINS;
 2570              		.loc 10 130 50
 2571 031a 4FF40023 		mov	r3, #524288
 2572 031e F1E1     		b	.L112
 2573              	.L103:
 131:Src/foc.cpp   ****         } else if (!Idq.has_value()) {
 2574              		.loc 10 131 34
 2575 0320 07F14003 		add	r3, r7, #64
 2576 0324 1846     		mov	r0, r3
 2577 0326 FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2578 032a 0346     		mov	r3, r0
 2579              		.loc 10 131 20
 2580 032c 83F00103 		eor	r3, r3, #1
 2581 0330 DBB2     		uxtb	r3, r3
 2582              		.loc 10 131 16
 2583 0332 002B     		cmp	r3, #0
 2584 0334 02D0     		beq	.L105
 132:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_MEASUREMENT;
 2585              		.loc 10 132 50
 2586 0336 4FF40033 		mov	r3, #131072
 2587 033a E3E1     		b	.L112
 2588              	.L105:
 133:Src/foc.cpp   ****         } else if (!Idq_setpoint_.has_value()) {
 2589              		.loc 10 133 44
 2590 033c FB68     		ldr	r3, [r7, #12]
 2591 033e 4C33     		adds	r3, r3, #76
 2592 0340 1846     		mov	r0, r3
 2593 0342 FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2594 0346 0346     		mov	r3, r0
 2595              		.loc 10 133 20
 2596 0348 83F00103 		eor	r3, r3, #1
 2597 034c DBB2     		uxtb	r3, r3
 2598              		.loc 10 133 16
 2599 034e 002B     		cmp	r3, #0
 2600 0350 02D0     		beq	.L106
 134:Src/foc.cpp   ****             return ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_COMMAND;
 2601              		.loc 10 134 50
 2602 0352 4FF40013 		mov	r3, #2097152
 2603 0356 D5E1     		b	.L112
 2604              	.L106:
 135:Src/foc.cpp   ****         }
 136:Src/foc.cpp   **** 
 137:Src/foc.cpp   ****         auto [p_gain, i_gain] = *pi_gains_;
 2605              		.loc 10 137 34
 2606 0358 FB68     		ldr	r3, [r7, #12]
 2607 035a 0833     		adds	r3, r3, #8
 2608 035c 1846     		mov	r0, r3
 2609 035e FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2610 0362 0246     		mov	r2, r0
 2611 0364 07F12803 		add	r3, r7, #40
ARM GAS  /tmp/ccSXOI3d.s 			page 121


 2612 0368 92E80300 		ldm	r2, {r0, r1}
 2613 036c 83E80300 		stm	r3, {r0, r1}
 2614              		.loc 10 137 15
 2615 0370 07F12803 		add	r3, r7, #40
 2616 0374 1846     		mov	r0, r3
 2617 0376 FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2618 037a C7F8AC00 		str	r0, [r7, #172]
 2619              		.loc 10 137 23
 2620 037e 07F12803 		add	r3, r7, #40
 2621 0382 1846     		mov	r0, r3
 2622 0384 FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2623 0388 C7F8A800 		str	r0, [r7, #168]
 138:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 2624              		.loc 10 138 26
 2625 038c 07F14003 		add	r3, r7, #64
 2626 0390 1846     		mov	r0, r3
 2627 0392 FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2628 0396 0246     		mov	r2, r0
 2629 0398 07F12003 		add	r3, r7, #32
 2630 039c 92E80300 		ldm	r2, {r0, r1}
 2631 03a0 83E80300 		stm	r3, {r0, r1}
 2632              		.loc 10 138 15
 2633 03a4 07F12003 		add	r3, r7, #32
 2634 03a8 1846     		mov	r0, r3
 2635 03aa FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2636 03ae C7F8A400 		str	r0, [r7, #164]
 2637              		.loc 10 138 19
 2638 03b2 07F12003 		add	r3, r7, #32
 2639 03b6 1846     		mov	r0, r3
 2640 03b8 FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2641 03bc C7F8A000 		str	r0, [r7, #160]
 139:Src/foc.cpp   ****         auto [Id_setpoint, Iq_setpoint] = *Idq_setpoint_;
 2642              		.loc 10 139 44
 2643 03c0 FB68     		ldr	r3, [r7, #12]
 2644 03c2 4C33     		adds	r3, r3, #76
 2645 03c4 1846     		mov	r0, r3
 2646 03c6 FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2647 03ca 0246     		mov	r2, r0
 2648 03cc 07F11803 		add	r3, r7, #24
 2649 03d0 92E80300 		ldm	r2, {r0, r1}
 2650 03d4 83E80300 		stm	r3, {r0, r1}
 2651              		.loc 10 139 15
 2652 03d8 07F11803 		add	r3, r7, #24
 2653 03dc 1846     		mov	r0, r3
 2654 03de FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2655 03e2 C7F89C00 		str	r0, [r7, #156]
 2656              		.loc 10 139 28
 2657 03e6 07F11803 		add	r3, r7, #24
 2658 03ea 1846     		mov	r0, r3
 2659 03ec FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2660 03f0 C7F89800 		str	r0, [r7, #152]
 140:Src/foc.cpp   **** 
 141:Src/foc.cpp   ****         float Ierr_d = Id_setpoint - Id;
 2661              		.loc 10 141 24
 2662 03f4 D7F89C30 		ldr	r3, [r7, #156]
 2663 03f8 93ED007A 		vldr.32	s14, [r3]
 2664              		.loc 10 141 38
ARM GAS  /tmp/ccSXOI3d.s 			page 122


 2665 03fc D7F8A430 		ldr	r3, [r7, #164]
 2666 0400 D3ED007A 		vldr.32	s15, [r3]
 2667              		.loc 10 141 15
 2668 0404 77EE677A 		vsub.f32	s15, s14, s15
 2669 0408 C7ED257A 		vstr.32	s15, [r7, #148]
 142:Src/foc.cpp   ****         float Ierr_q = Iq_setpoint - Iq;
 2670              		.loc 10 142 24
 2671 040c D7F89830 		ldr	r3, [r7, #152]
 2672 0410 93ED007A 		vldr.32	s14, [r3]
 2673              		.loc 10 142 38
 2674 0414 D7F8A030 		ldr	r3, [r7, #160]
 2675 0418 D3ED007A 		vldr.32	s15, [r3]
 2676              		.loc 10 142 15
 2677 041c 77EE677A 		vsub.f32	s15, s14, s15
 2678 0420 C7ED247A 		vstr.32	s15, [r7, #144]
 143:Src/foc.cpp   **** 
 144:Src/foc.cpp   ****         // Apply PI control (V{d,q}_setpoint act as feed-forward terms in this mode)
 145:Src/foc.cpp   ****         mod_d = V_to_mod * (Vd + v_current_control_integral_d_ + Ierr_d * p_gain);
 2679              		.loc 10 145 29
 2680 0424 D7F8DC30 		ldr	r3, [r7, #220]
 2681 0428 93ED007A 		vldr.32	s14, [r3]
 2682              		.loc 10 145 34
 2683 042c FB68     		ldr	r3, [r7, #12]
 2684 042e D3ED257A 		vldr.32	s15, [r3, #148]
 2685              		.loc 10 145 32
 2686 0432 37EE277A 		vadd.f32	s14, s14, s15
 2687              		.loc 10 145 75
 2688 0436 D7F8AC30 		ldr	r3, [r7, #172]
 2689 043a D3ED006A 		vldr.32	s13, [r3]
 2690              		.loc 10 145 73
 2691 043e D7ED257A 		vldr.32	s15, [r7, #148]
 2692 0442 66EEA77A 		vmul.f32	s15, s13, s15
 2693              		.loc 10 145 64
 2694 0446 77EE277A 		vadd.f32	s15, s14, s15
 2695              		.loc 10 145 15
 2696 044a 97ED2C7A 		vldr.32	s14, [r7, #176]
 2697 044e 67EE277A 		vmul.f32	s15, s14, s15
 2698 0452 C7ED397A 		vstr.32	s15, [r7, #228]
 146:Src/foc.cpp   ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 2699              		.loc 10 146 29
 2700 0456 D7F8D830 		ldr	r3, [r7, #216]
 2701 045a 93ED007A 		vldr.32	s14, [r3]
 2702              		.loc 10 146 34
 2703 045e FB68     		ldr	r3, [r7, #12]
 2704 0460 D3ED267A 		vldr.32	s15, [r3, #152]
 2705              		.loc 10 146 32
 2706 0464 37EE277A 		vadd.f32	s14, s14, s15
 2707              		.loc 10 146 75
 2708 0468 D7F8AC30 		ldr	r3, [r7, #172]
 2709 046c D3ED006A 		vldr.32	s13, [r3]
 2710              		.loc 10 146 73
 2711 0470 D7ED247A 		vldr.32	s15, [r7, #144]
 2712 0474 66EEA77A 		vmul.f32	s15, s13, s15
 2713              		.loc 10 146 64
 2714 0478 77EE277A 		vadd.f32	s15, s14, s15
 2715              		.loc 10 146 15
 2716 047c 97ED2C7A 		vldr.32	s14, [r7, #176]
ARM GAS  /tmp/ccSXOI3d.s 			page 123


 2717 0480 67EE277A 		vmul.f32	s15, s14, s15
 2718 0484 C7ED387A 		vstr.32	s15, [r7, #224]
 147:Src/foc.cpp   **** 
 148:Src/foc.cpp   ****         // Vector modulation saturation, lock integrator if saturated
 149:Src/foc.cpp   ****         // TODO make maximum modulation configurable
 150:Src/foc.cpp   ****         float mod_scalefactor = 0.80f * sqrt3_by_2 * 1.0f / std::sqrt(mod_d * mod_d + mod_q * mod_q
 2719              		.loc 10 150 77
 2720 0488 D7ED397A 		vldr.32	s15, [r7, #228]
 2721 048c 27EEA77A 		vmul.f32	s14, s15, s15
 2722              		.loc 10 150 93
 2723 0490 D7ED387A 		vldr.32	s15, [r7, #224]
 2724 0494 67EEA77A 		vmul.f32	s15, s15, s15
 2725              		.loc 10 150 70
 2726 0498 77EE277A 		vadd.f32	s15, s14, s15
 2727 049c B0EE670A 		vmov.f32	s0, s15
 2728 04a0 FFF7FEFF 		bl	_ZSt4sqrtf
 2729 04a4 B0EE407A 		vmov.f32	s14, s0
 2730              		.loc 10 150 100
 2731 04a8 DFED1B6A 		vldr.32	s13, .L115+8
 2732 04ac C6EE877A 		vdiv.f32	s15, s13, s14
 2733 04b0 C7ED237A 		vstr.32	s15, [r7, #140]
 151:Src/foc.cpp   ****         if (mod_scalefactor < 1.0f) {
 2734              		.loc 10 151 9
 2735 04b4 D7ED237A 		vldr.32	s15, [r7, #140]
 2736 04b8 B7EE007A 		vmov.f32	s14, #1.0e+0
 2737 04bc F4EEC77A 		vcmpe.f32	s15, s14
 2738 04c0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2739 04c4 2CD5     		bpl	.L114
 152:Src/foc.cpp   ****             mod_d *= mod_scalefactor;
 2740              		.loc 10 152 19
 2741 04c6 97ED397A 		vldr.32	s14, [r7, #228]
 2742 04ca D7ED237A 		vldr.32	s15, [r7, #140]
 2743 04ce 67EE277A 		vmul.f32	s15, s14, s15
 2744 04d2 C7ED397A 		vstr.32	s15, [r7, #228]
 153:Src/foc.cpp   ****             mod_q *= mod_scalefactor;
 2745              		.loc 10 153 19
 2746 04d6 97ED387A 		vldr.32	s14, [r7, #224]
 2747 04da D7ED237A 		vldr.32	s15, [r7, #140]
 2748 04de 67EE277A 		vmul.f32	s15, s14, s15
 2749 04e2 C7ED387A 		vstr.32	s15, [r7, #224]
 154:Src/foc.cpp   ****             // TODO make decayfactor configurable
 155:Src/foc.cpp   ****             v_current_control_integral_d_ *= 0.99f;
 2750              		.loc 10 155 43
 2751 04e6 FB68     		ldr	r3, [r7, #12]
 2752 04e8 D3ED257A 		vldr.32	s15, [r3, #148]
 2753 04ec 9FED0B7A 		vldr.32	s14, .L115+12
 2754 04f0 67EE877A 		vmul.f32	s15, s15, s14
 2755 04f4 FB68     		ldr	r3, [r7, #12]
 2756 04f6 C3ED257A 		vstr.32	s15, [r3, #148]
 156:Src/foc.cpp   ****             v_current_control_integral_q_ *= 0.99f;
 2757              		.loc 10 156 43
 2758 04fa FB68     		ldr	r3, [r7, #12]
 2759 04fc D3ED267A 		vldr.32	s15, [r3, #152]
 2760 0500 9FED067A 		vldr.32	s14, .L115+12
 2761 0504 67EE877A 		vmul.f32	s15, s15, s14
 2762 0508 FB68     		ldr	r3, [r7, #12]
 2763 050a C3ED267A 		vstr.32	s15, [r3, #152]
ARM GAS  /tmp/ccSXOI3d.s 			page 124


 2764 050e 46E0     		b	.L110
 2765              	.L116:
 2766              		.align	2
 2767              	.L115:
 2768 0510 E81F224D 		.word	1294082024
 2769 0514 ABAA2A3F 		.word	1059760811
 2770 0518 AC5C313F 		.word	1060199596
 2771 051c A4707D3F 		.word	1065185444
 2772              	.L114:
 157:Src/foc.cpp   ****         } else {
 158:Src/foc.cpp   ****             v_current_control_integral_d_ += Ierr_d * (i_gain * current_meas_period);
 2773              		.loc 10 158 43
 2774 0520 FB68     		ldr	r3, [r7, #12]
 2775 0522 93ED257A 		vldr.32	s14, [r3, #148]
 2776              		.loc 10 158 56
 2777 0526 D7F8A830 		ldr	r3, [r7, #168]
 2778 052a D3ED006A 		vldr.32	s13, [r3]
 2779              		.loc 10 158 63
 2780 052e 784B     		ldr	r3, .L117
 2781 0530 D3ED007A 		vldr.32	s15, [r3]
 2782 0534 66EEA76A 		vmul.f32	s13, s13, s15
 2783              		.loc 10 158 53
 2784 0538 D7ED257A 		vldr.32	s15, [r7, #148]
 2785 053c 66EEA77A 		vmul.f32	s15, s13, s15
 2786              		.loc 10 158 43
 2787 0540 77EE277A 		vadd.f32	s15, s14, s15
 2788 0544 FB68     		ldr	r3, [r7, #12]
 2789 0546 C3ED257A 		vstr.32	s15, [r3, #148]
 159:Src/foc.cpp   ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 2790              		.loc 10 159 43
 2791 054a FB68     		ldr	r3, [r7, #12]
 2792 054c 93ED267A 		vldr.32	s14, [r3, #152]
 2793              		.loc 10 159 56
 2794 0550 D7F8A830 		ldr	r3, [r7, #168]
 2795 0554 D3ED006A 		vldr.32	s13, [r3]
 2796              		.loc 10 159 63
 2797 0558 6D4B     		ldr	r3, .L117
 2798 055a D3ED007A 		vldr.32	s15, [r3]
 2799 055e 66EEA76A 		vmul.f32	s13, s13, s15
 2800              		.loc 10 159 53
 2801 0562 D7ED247A 		vldr.32	s15, [r7, #144]
 2802 0566 66EEA77A 		vmul.f32	s15, s13, s15
 2803              		.loc 10 159 43
 2804 056a 77EE277A 		vadd.f32	s15, s14, s15
 2805 056e FB68     		ldr	r3, [r7, #12]
 2806 0570 C3ED267A 		vstr.32	s15, [r3, #152]
 2807 0574 13E0     		b	.L110
 2808              	.L102:
 2809              	.LBE20:
 160:Src/foc.cpp   ****         }
 161:Src/foc.cpp   **** 
 162:Src/foc.cpp   ****     } else {
 163:Src/foc.cpp   ****         // Voltage control mode
 164:Src/foc.cpp   ****         mod_d = V_to_mod * Vd;
 2810              		.loc 10 164 28
 2811 0576 D7F8DC30 		ldr	r3, [r7, #220]
 2812 057a D3ED007A 		vldr.32	s15, [r3]
ARM GAS  /tmp/ccSXOI3d.s 			page 125


 2813              		.loc 10 164 15
 2814 057e 97ED2C7A 		vldr.32	s14, [r7, #176]
 2815 0582 67EE277A 		vmul.f32	s15, s14, s15
 2816 0586 C7ED397A 		vstr.32	s15, [r7, #228]
 165:Src/foc.cpp   ****         mod_q = V_to_mod * Vq;
 2817              		.loc 10 165 28
 2818 058a D7F8D830 		ldr	r3, [r7, #216]
 2819 058e D3ED007A 		vldr.32	s15, [r3]
 2820              		.loc 10 165 15
 2821 0592 97ED2C7A 		vldr.32	s14, [r7, #176]
 2822 0596 67EE277A 		vmul.f32	s15, s14, s15
 2823 059a C7ED387A 		vstr.32	s15, [r7, #224]
 2824              	.L110:
 2825              	.LBE19:
 166:Src/foc.cpp   ****     }
 167:Src/foc.cpp   **** 
 168:Src/foc.cpp   ****     // Inverse park transform
 169:Src/foc.cpp   ****     float pwm_phase = phase + phase_vel * ((float)(int32_t)(output_timestamp - ctrl_timestamp_) / (
 2826              		.loc 10 169 80
 2827 059e FB68     		ldr	r3, [r7, #12]
 2828 05a0 5B6C     		ldr	r3, [r3, #68]
 2829              		.loc 10 169 78
 2830 05a2 BA68     		ldr	r2, [r7, #8]
 2831 05a4 D31A     		subs	r3, r2, r3
 2832              		.loc 10 169 51
 2833 05a6 07EE903A 		vmov	s15, r3	@ int
 2834              		.loc 10 169 44
 2835 05aa F8EEE77A 		vcvt.f32.s32	s15, s15
 2836              		.loc 10 169 97
 2837 05ae DFED596A 		vldr.32	s13, .L117+4
 2838 05b2 87EEA67A 		vdiv.f32	s14, s15, s13
 2839              		.loc 10 169 41
 2840 05b6 D7ED347A 		vldr.32	s15, [r7, #208]
 2841 05ba 67EE277A 		vmul.f32	s15, s14, s15
 2842              		.loc 10 169 11
 2843 05be 97ED357A 		vldr.32	s14, [r7, #212]
 2844 05c2 77EE277A 		vadd.f32	s15, s14, s15
 2845 05c6 C7ED227A 		vstr.32	s15, [r7, #136]
 170:Src/foc.cpp   ****     float c_p = our_arm_cos_f32(pwm_phase);
 2846              		.loc 10 170 32
 2847 05ca 97ED220A 		vldr.32	s0, [r7, #136]
 2848 05ce FFF7FEFF 		bl	our_arm_cos_f32
 2849 05d2 87ED210A 		vstr.32	s0, [r7, #132]
 171:Src/foc.cpp   ****     float s_p = our_arm_sin_f32(pwm_phase);
 2850              		.loc 10 171 32
 2851 05d6 97ED220A 		vldr.32	s0, [r7, #136]
 2852 05da FFF7FEFF 		bl	our_arm_sin_f32
 2853 05de 87ED200A 		vstr.32	s0, [r7, #128]
 172:Src/foc.cpp   ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 2854              		.loc 10 172 27
 2855 05e2 97ED217A 		vldr.32	s14, [r7, #132]
 2856 05e6 D7ED397A 		vldr.32	s15, [r7, #228]
 2857 05ea 27EE277A 		vmul.f32	s14, s14, s15
 2858              		.loc 10 172 41
 2859 05ee D7ED206A 		vldr.32	s13, [r7, #128]
 2860 05f2 D7ED387A 		vldr.32	s15, [r7, #224]
 2861 05f6 66EEA77A 		vmul.f32	s15, s13, s15
ARM GAS  /tmp/ccSXOI3d.s 			page 126


 2862              		.loc 10 172 35
 2863 05fa 77EE677A 		vsub.f32	s15, s14, s15
 2864              		.loc 10 172 11
 2865 05fe C7ED0F7A 		vstr.32	s15, [r7, #60]
 173:Src/foc.cpp   ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 2866              		.loc 10 173 26
 2867 0602 97ED217A 		vldr.32	s14, [r7, #132]
 2868 0606 D7ED387A 		vldr.32	s15, [r7, #224]
 2869 060a 27EE277A 		vmul.f32	s14, s14, s15
 2870              		.loc 10 173 40
 2871 060e D7ED206A 		vldr.32	s13, [r7, #128]
 2872 0612 D7ED397A 		vldr.32	s15, [r7, #228]
 2873 0616 66EEA77A 		vmul.f32	s15, s13, s15
 2874              		.loc 10 173 34
 2875 061a 77EE277A 		vadd.f32	s15, s14, s15
 2876              		.loc 10 173 11
 2877 061e C7ED0E7A 		vstr.32	s15, [r7, #56]
 174:Src/foc.cpp   **** 
 175:Src/foc.cpp   ****     // Report final applied voltage in stationary frame (for sensorless estimator)
 176:Src/foc.cpp   ****     final_v_alpha_ = mod_to_V * mod_alpha;
 2878              		.loc 10 176 31
 2879 0622 97ED0F7A 		vldr.32	s14, [r7, #60]
 2880 0626 D7ED2D7A 		vldr.32	s15, [r7, #180]
 2881 062a 67EE277A 		vmul.f32	s15, s14, s15
 2882              		.loc 10 176 20
 2883 062e FB68     		ldr	r3, [r7, #12]
 2884 0630 C3ED277A 		vstr.32	s15, [r3, #156]
 177:Src/foc.cpp   ****     final_v_beta_ = mod_to_V * mod_beta;
 2885              		.loc 10 177 30
 2886 0634 97ED0E7A 		vldr.32	s14, [r7, #56]
 2887 0638 D7ED2D7A 		vldr.32	s15, [r7, #180]
 2888 063c 67EE277A 		vmul.f32	s15, s14, s15
 2889              		.loc 10 177 19
 2890 0640 FB68     		ldr	r3, [r7, #12]
 2891 0642 C3ED287A 		vstr.32	s15, [r3, #160]
 178:Src/foc.cpp   **** 
 179:Src/foc.cpp   ****     *mod_alpha_beta = {mod_alpha, mod_beta};
 2892              		.loc 10 179 43
 2893 0646 07F13802 		add	r2, r7, #56
 2894 064a 07F13C01 		add	r1, r7, #60
 2895 064e 07F16403 		add	r3, r7, #100
 2896 0652 1846     		mov	r0, r3
 2897 0654 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 2898 0658 07F16403 		add	r3, r7, #100
 2899 065c 1946     		mov	r1, r3
 2900 065e 7868     		ldr	r0, [r7, #4]
 2901 0660 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 2902              	.LBB21:
 180:Src/foc.cpp   **** 
 181:Src/foc.cpp   ****     if (Idq.has_value()) {
 2903              		.loc 10 181 22
 2904 0664 07F14003 		add	r3, r7, #64
 2905 0668 1846     		mov	r0, r3
 2906 066a FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2907 066e 0346     		mov	r3, r0
 2908              		.loc 10 181 5
 2909 0670 002B     		cmp	r3, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 127


 2910 0672 46D0     		beq	.L111
 2911              	.LBB22:
 182:Src/foc.cpp   ****         auto [Id, Iq] = *Idq;
 2912              		.loc 10 182 26
 2913 0674 07F14003 		add	r3, r7, #64
 2914 0678 1846     		mov	r0, r3
 2915 067a FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 2916 067e 0246     		mov	r2, r0
 2917 0680 07F11003 		add	r3, r7, #16
 2918 0684 92E80300 		ldm	r2, {r0, r1}
 2919 0688 83E80300 		stm	r3, {r0, r1}
 2920              		.loc 10 182 15
 2921 068c 07F11003 		add	r3, r7, #16
 2922 0690 1846     		mov	r0, r3
 2923 0692 FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2924 0696 F867     		str	r0, [r7, #124]
 2925              		.loc 10 182 19
 2926 0698 07F11003 		add	r3, r7, #16
 2927 069c 1846     		mov	r0, r3
 2928 069e FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 2929 06a2 B867     		str	r0, [r7, #120]
 183:Src/foc.cpp   ****         *ibus = mod_d * Id + mod_q * Iq;
 2930              		.loc 10 183 25
 2931 06a4 FB6F     		ldr	r3, [r7, #124]
 2932 06a6 93ED007A 		vldr.32	s14, [r3]
 2933              		.loc 10 183 23
 2934 06aa D7ED397A 		vldr.32	s15, [r7, #228]
 2935 06ae 27EE277A 		vmul.f32	s14, s14, s15
 2936              		.loc 10 183 38
 2937 06b2 BB6F     		ldr	r3, [r7, #120]
 2938 06b4 D3ED006A 		vldr.32	s13, [r3]
 2939              		.loc 10 183 36
 2940 06b8 D7ED387A 		vldr.32	s15, [r7, #224]
 2941 06bc 66EEA77A 		vmul.f32	s15, s13, s15
 2942              		.loc 10 183 28
 2943 06c0 77EE277A 		vadd.f32	s15, s14, s15
 2944 06c4 C7ED1D7A 		vstr.32	s15, [r7, #116]
 2945              		.loc 10 183 38
 2946 06c8 07F17402 		add	r2, r7, #116
 2947 06cc 07F16C03 		add	r3, r7, #108
 2948 06d0 1146     		mov	r1, r2
 2949 06d2 1846     		mov	r0, r3
 2950 06d4 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 2951              		.loc 10 183 15
 2952 06d8 3B68     		ldr	r3, [r7]
 2953 06da 1A46     		mov	r2, r3
 2954 06dc 07F16C03 		add	r3, r7, #108
 2955 06e0 93E80300 		ldm	r3, {r0, r1}
 2956 06e4 82E80300 		stm	r2, {r0, r1}
 184:Src/foc.cpp   ****         power_ = vbus_voltage * (*ibus).value();
 2957              		.loc 10 184 47
 2958 06e8 3868     		ldr	r0, [r7]
 2959 06ea FFF7FEFF 		bl	_ZNRSt8optionalIfE5valueEv
 2960 06ee 0346     		mov	r3, r0
 2961              		.loc 10 184 46
 2962 06f0 93ED007A 		vldr.32	s14, [r3]
 2963              		.loc 10 184 31
ARM GAS  /tmp/ccSXOI3d.s 			page 128


 2964 06f4 D7ED337A 		vldr.32	s15, [r7, #204]
 2965 06f8 67EE277A 		vmul.f32	s15, s14, s15
 2966              		.loc 10 184 16
 2967 06fc FB68     		ldr	r3, [r7, #12]
 2968 06fe C3ED2B7A 		vstr.32	s15, [r3, #172]
 2969              	.L111:
 2970              	.LBE22:
 2971              	.LBE21:
 185:Src/foc.cpp   ****     }
 186:Src/foc.cpp   ****     
 187:Src/foc.cpp   ****     return ODriveIntf::MotorIntf::ERROR_NONE;
 2972              		.loc 10 187 35
 2973 0702 0023     		movs	r3, #0
 2974              	.L112:
 188:Src/foc.cpp   **** }
 2975              		.loc 10 188 1 discriminator 2
 2976 0704 1846     		mov	r0, r3
 2977 0706 E837     		adds	r7, r7, #232
 2978              	.LCFI212:
 2979              		.cfi_def_cfa_offset 16
 2980 0708 BD46     		mov	sp, r7
 2981              	.LCFI213:
 2982              		.cfi_def_cfa_register 13
 2983              		@ sp needed
 2984 070a BDEC028B 		vldm	sp!, {d8}
 2985              	.LCFI214:
 2986              		.cfi_restore 80
 2987              		.cfi_restore 81
 2988              		.cfi_def_cfa_offset 8
 2989 070e 80BD     		pop	{r7, pc}
 2990              	.L118:
 2991              		.align	2
 2992              	.L117:
 2993 0710 00000000 		.word	current_meas_period
 2994 0714 E81F224D 		.word	1294082024
 2995              		.cfi_endproc
 2996              	.LFE3465:
 2998              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_,"axG",%progbits,_ZNSt17_Op
 2999              		.align	1
 3000              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_
 3001              		.syntax unified
 3002              		.thumb
 3003              		.thumb_func
 3004              		.fpu fpv4-sp-d16
 3006              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_:
 3007              	.LFB3487:
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 3008              		.loc 2 378 7
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 8
 3011              		@ frame_needed = 1, uses_anonymous_args = 0
 3012 0000 90B5     		push	{r4, r7, lr}
 3013              	.LCFI215:
 3014              		.cfi_def_cfa_offset 12
 3015              		.cfi_offset 4, -12
 3016              		.cfi_offset 7, -8
 3017              		.cfi_offset 14, -4
ARM GAS  /tmp/ccSXOI3d.s 			page 129


 3018 0002 83B0     		sub	sp, sp, #12
 3019              	.LCFI216:
 3020              		.cfi_def_cfa_offset 24
 3021 0004 00AF     		add	r7, sp, #0
 3022              	.LCFI217:
 3023              		.cfi_def_cfa_register 7
 3024 0006 7860     		str	r0, [r7, #4]
 3025 0008 3960     		str	r1, [r7]
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 3026              		.loc 2 382 22
 3027 000a 7C68     		ldr	r4, [r7, #4]
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 3028              		.loc 2 382 32
 3029 000c 3868     		ldr	r0, [r7]
 3030 000e FFF7FEFF 		bl	_ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS6_
 3031 0012 0346     		mov	r3, r0
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 3032              		.loc 2 382 22
 3033 0014 1946     		mov	r1, r3
 3034 0016 2046     		mov	r0, r4
 3035 0018 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 3036              		.loc 2 383 10
 3037 001c 7B68     		ldr	r3, [r7, #4]
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 3038              		.loc 2 384 7
 3039 001e 1846     		mov	r0, r3
 3040 0020 0C37     		adds	r7, r7, #12
 3041              	.LCFI218:
 3042              		.cfi_def_cfa_offset 12
 3043 0022 BD46     		mov	sp, r7
 3044              	.LCFI219:
 3045              		.cfi_def_cfa_register 13
 3046              		@ sp needed
 3047 0024 90BD     		pop	{r4, r7, pc}
 3048              		.cfi_endproc
 3049              	.LFE3487:
 3051              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_,"axG",%progbits,_ZNSt14_Optional_
 3052              		.align	1
 3053              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_
 3054              		.syntax unified
 3055              		.thumb
 3056              		.thumb_func
 3057              		.fpu fpv4-sp-d16
 3059              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_:
 3060              	.LFB3486:
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3061              		.loc 2 629 23
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 8
 3064              		@ frame_needed = 1, uses_anonymous_args = 0
 3065 0000 80B5     		push	{r7, lr}
 3066              	.LCFI220:
 3067              		.cfi_def_cfa_offset 8
 3068              		.cfi_offset 7, -8
 3069              		.cfi_offset 14, -4
 3070 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccSXOI3d.s 			page 130


 3071              	.LCFI221:
 3072              		.cfi_def_cfa_offset 16
 3073 0004 00AF     		add	r7, sp, #0
 3074              	.LCFI222:
 3075              		.cfi_def_cfa_register 7
 3076 0006 7860     		str	r0, [r7, #4]
 3077 0008 3960     		str	r1, [r7]
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3078              		.loc 2 629 23
 3079 000a 3A68     		ldr	r2, [r7]
 3080 000c 7B68     		ldr	r3, [r7, #4]
 3081 000e 1146     		mov	r1, r2
 3082 0010 1846     		mov	r0, r3
 3083 0012 FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_
 3084 0016 7B68     		ldr	r3, [r7, #4]
 3085 0018 1846     		mov	r0, r3
 3086 001a 0837     		adds	r7, r7, #8
 3087              	.LCFI223:
 3088              		.cfi_def_cfa_offset 8
 3089 001c BD46     		mov	sp, r7
 3090              	.LCFI224:
 3091              		.cfi_def_cfa_register 13
 3092              		@ sp needed
 3093 001e 80BD     		pop	{r7, pc}
 3094              		.cfi_endproc
 3095              	.LFE3486:
 3097              		.section	.text._ZNSt8optionalISt4pairIffEEaSEOS2_,"axG",%progbits,_ZNSt8optionalISt4pairIffEEaSEOS
 3098              		.align	1
 3099              		.weak	_ZNSt8optionalISt4pairIffEEaSEOS2_
 3100              		.syntax unified
 3101              		.thumb
 3102              		.thumb_func
 3103              		.fpu fpv4-sp-d16
 3105              	_ZNSt8optionalISt4pairIffEEaSEOS2_:
 3106              	.LFB3485:
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 3107              		.loc 2 659 11
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 8
 3110              		@ frame_needed = 1, uses_anonymous_args = 0
 3111 0000 80B5     		push	{r7, lr}
 3112              	.LCFI225:
 3113              		.cfi_def_cfa_offset 8
 3114              		.cfi_offset 7, -8
 3115              		.cfi_offset 14, -4
 3116 0002 82B0     		sub	sp, sp, #8
 3117              	.LCFI226:
 3118              		.cfi_def_cfa_offset 16
 3119 0004 00AF     		add	r7, sp, #0
 3120              	.LCFI227:
 3121              		.cfi_def_cfa_register 7
 3122 0006 7860     		str	r0, [r7, #4]
 3123 0008 3960     		str	r1, [r7]
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 3124              		.loc 2 659 11
 3125 000a 7B68     		ldr	r3, [r7, #4]
 3126 000c 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccSXOI3d.s 			page 131


 3127 000e 1146     		mov	r1, r2
 3128 0010 1846     		mov	r0, r3
 3129 0012 FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_
 3130 0016 7B68     		ldr	r3, [r7, #4]
 3131 0018 1846     		mov	r0, r3
 3132 001a 0837     		adds	r7, r7, #8
 3133              	.LCFI228:
 3134              		.cfi_def_cfa_offset 8
 3135 001c BD46     		mov	sp, r7
 3136              	.LCFI229:
 3137              		.cfi_def_cfa_register 13
 3138              		@ sp needed
 3139 001e 80BD     		pop	{r7, pc}
 3140              		.cfi_endproc
 3141              	.LFE3485:
 3143              		.section	.text._ZN23FieldOrientedController6updateEm,"ax",%progbits
 3144              		.align	1
 3145              		.global	_ZN23FieldOrientedController6updateEm
 3146              		.syntax unified
 3147              		.thumb
 3148              		.thumb_func
 3149              		.fpu fpv4-sp-d16
 3151              	_ZN23FieldOrientedController6updateEm:
 3152              	.LFB3484:
 189:Src/foc.cpp   **** 
 190:Src/foc.cpp   **** void FieldOrientedController::update(uint32_t timestamp) {
 3153              		.loc 10 190 58
 3154              		.cfi_startproc
 3155              		@ args = 0, pretend = 0, frame = 48
 3156              		@ frame_needed = 1, uses_anonymous_args = 0
 3157 0000 90B5     		push	{r4, r7, lr}
 3158              	.LCFI230:
 3159              		.cfi_def_cfa_offset 12
 3160              		.cfi_offset 4, -12
 3161              		.cfi_offset 7, -8
 3162              		.cfi_offset 14, -4
 3163 0002 8DB0     		sub	sp, sp, #52
 3164              	.LCFI231:
 3165              		.cfi_def_cfa_offset 64
 3166 0004 00AF     		add	r7, sp, #0
 3167              	.LCFI232:
 3168              		.cfi_def_cfa_register 7
 3169 0006 F860     		str	r0, [r7, #12]
 3170 0008 B960     		str	r1, [r7, #8]
 191:Src/foc.cpp   ****    uint32_t mask = cpu_enter_critical();
 3171              		.loc 10 191 38
 3172 000a FFF7FEFF 		bl	cpu_enter_critical
 3173 000e F862     		str	r0, [r7, #44]
 192:Src/foc.cpp   ****     {
 193:Src/foc.cpp   ****         ctrl_timestamp_ = timestamp;
 3174              		.loc 10 193 25
 3175 0010 FB68     		ldr	r3, [r7, #12]
 3176 0012 BA68     		ldr	r2, [r7, #8]
 3177 0014 5A64     		str	r2, [r3, #68]
 194:Src/foc.cpp   ****         enable_current_control_ = enable_current_control_src_;
 3178              		.loc 10 194 35
 3179 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccSXOI3d.s 			page 132


 3180 0018 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2
 3181              		.loc 10 194 33
 3182 001a FB68     		ldr	r3, [r7, #12]
 3183 001c 83F84820 		strb	r2, [r3, #72]
 195:Src/foc.cpp   ****         Idq_setpoint_ = Idq_setpoint_src_.present();
 3184              		.loc 10 195 51
 3185 0020 FB68     		ldr	r3, [r7, #12]
 3186 0022 03F11C02 		add	r2, r3, #28
 3187 0026 07F11403 		add	r3, r7, #20
 3188 002a 1146     		mov	r1, r2
 3189 002c 1846     		mov	r0, r3
 3190 002e FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE7presentEv
 3191 0032 FB68     		ldr	r3, [r7, #12]
 3192 0034 4C33     		adds	r3, r3, #76
 3193 0036 07F11402 		add	r2, r7, #20
 3194 003a 1146     		mov	r1, r2
 3195 003c 1846     		mov	r0, r3
 3196 003e FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSEOS2_
 196:Src/foc.cpp   ****         Vdq_setpoint_ = Vdq_setpoint_src_.present();
 3197              		.loc 10 196 51
 3198 0042 FB68     		ldr	r3, [r7, #12]
 3199 0044 03F12802 		add	r2, r3, #40
 3200 0048 07F12003 		add	r3, r7, #32
 3201 004c 1146     		mov	r1, r2
 3202 004e 1846     		mov	r0, r3
 3203 0050 FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE7presentEv
 3204 0054 FB68     		ldr	r3, [r7, #12]
 3205 0056 5833     		adds	r3, r3, #88
 3206 0058 07F12002 		add	r2, r7, #32
 3207 005c 1146     		mov	r1, r2
 3208 005e 1846     		mov	r0, r3
 3209 0060 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSEOS2_
 197:Src/foc.cpp   ****         phase_ = phase_src_.present();
 3210              		.loc 10 197 37
 3211 0064 FB68     		ldr	r3, [r7, #12]
 3212 0066 03F13402 		add	r2, r3, #52
 3213 006a FC68     		ldr	r4, [r7, #12]
 3214 006c 3B46     		mov	r3, r7
 3215 006e 1146     		mov	r1, r2
 3216 0070 1846     		mov	r0, r3
 3217 0072 FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 3218 0076 04F16403 		add	r3, r4, #100
 3219 007a 3A46     		mov	r2, r7
 3220 007c 92E80300 		ldm	r2, {r0, r1}
 3221 0080 83E80300 		stm	r3, {r0, r1}
 198:Src/foc.cpp   ****         phase_vel_ = phase_vel_src_.present();
 3222              		.loc 10 198 45
 3223 0084 FB68     		ldr	r3, [r7, #12]
 3224 0086 03F13C02 		add	r2, r3, #60
 3225 008a FC68     		ldr	r4, [r7, #12]
 3226 008c 3B46     		mov	r3, r7
 3227 008e 1146     		mov	r1, r2
 3228 0090 1846     		mov	r0, r3
 3229 0092 FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 3230 0096 04F16C03 		add	r3, r4, #108
 3231 009a 3A46     		mov	r2, r7
 3232 009c 92E80300 		ldm	r2, {r0, r1}
ARM GAS  /tmp/ccSXOI3d.s 			page 133


 3233 00a0 83E80300 		stm	r3, {r0, r1}
 199:Src/foc.cpp   ****     }
 200:Src/foc.cpp   ****     cpu_exit_critical(mask);
 3234              		.loc 10 200 22
 3235 00a4 F86A     		ldr	r0, [r7, #44]
 3236 00a6 FFF7FEFF 		bl	cpu_exit_critical
 201:Src/foc.cpp   **** }
 3237              		.loc 10 201 1
 3238 00aa 00BF     		nop
 3239 00ac 3437     		adds	r7, r7, #52
 3240              	.LCFI233:
 3241              		.cfi_def_cfa_offset 12
 3242 00ae BD46     		mov	sp, r7
 3243              	.LCFI234:
 3244              		.cfi_def_cfa_register 13
 3245              		@ sp needed
 3246 00b0 90BD     		pop	{r4, r7, pc}
 3247              		.cfi_endproc
 3248              	.LFE3484:
 3250              		.thumb_set .LTHUNK0,_ZN23FieldOrientedController6updateEm
 3251              		.section	.text._ZThn4_N23FieldOrientedController6updateEm,"ax",%progbits
 3252              		.align	1
 3253              		.global	_ZThn4_N23FieldOrientedController6updateEm
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu fpv4-sp-d16
 3259              	_ZThn4_N23FieldOrientedController6updateEm:
 3260              	.LFB3768:
 3261              		.file 13 "Inc/foc.hpp"
   1:Inc/foc.hpp   **** #ifndef __FOC_HPP
   2:Inc/foc.hpp   **** #define __FOC_HPP
   3:Inc/foc.hpp   **** 
   4:Inc/foc.hpp   **** #include "user_int.hpp"
   5:Inc/foc.hpp   **** #include "interfaces.hpp"
   6:Inc/foc.hpp   **** #include <cstdint>  // Add this for uint32_t
   7:Inc/foc.hpp   **** #include "component.hpp"
   8:Inc/foc.hpp   **** #include "phase_control_law.hpp"
   9:Inc/foc.hpp   **** 
  10:Inc/foc.hpp   **** /**
  11:Inc/foc.hpp   ****  * @brief Field oriented controller.
  12:Inc/foc.hpp   ****  * 
  13:Inc/foc.hpp   ****  * This controller can run in either current control mode or voltage control
  14:Inc/foc.hpp   ****  * mode.
  15:Inc/foc.hpp   ****  */
  16:Inc/foc.hpp   **** class FieldOrientedController: public AlphaBetaFrameController, public ComponentBase {
  17:Inc/foc.hpp   **** 
  18:Inc/foc.hpp   **** public:
  19:Inc/foc.hpp   ****     void update(uint32_t timestamp) final;
 3262              		.loc 13 19 10
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 0
 3265              		@ frame_needed = 0, uses_anonymous_args = 0
 3266 0000 A0F10400 		sub	r0, r0, #4
 3267 0004 FFF7FEBF 		b	.LTHUNK0
 3268              		.cfi_endproc
 3269              	.LFE3768:
ARM GAS  /tmp/ccSXOI3d.s 			page 134


 3271              		.section	.text._ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv,"axG",%progbits,_ZNKSt8optionalISt5arr
 3272              		.align	1
 3273              		.weak	_ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv
 3274              		.syntax unified
 3275              		.thumb
 3276              		.thumb_func
 3277              		.fpu fpv4-sp-d16
 3279              	_ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv:
 3280              	.LFB3536:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3281              		.loc 2 917 22
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 8
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285 0000 80B5     		push	{r7, lr}
 3286              	.LCFI235:
 3287              		.cfi_def_cfa_offset 8
 3288              		.cfi_offset 7, -8
 3289              		.cfi_offset 14, -4
 3290 0002 82B0     		sub	sp, sp, #8
 3291              	.LCFI236:
 3292              		.cfi_def_cfa_offset 16
 3293 0004 00AF     		add	r7, sp, #0
 3294              	.LCFI237:
 3295              		.cfi_def_cfa_register 7
 3296 0006 7860     		str	r0, [r7, #4]
 3297              		.loc 2 918 35
 3298 0008 7868     		ldr	r0, [r7, #4]
 3299 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 3300 000e 0346     		mov	r3, r0
 3301              		.loc 2 918 39
 3302 0010 1846     		mov	r0, r3
 3303 0012 0837     		adds	r7, r7, #8
 3304              	.LCFI238:
 3305              		.cfi_def_cfa_offset 8
 3306 0014 BD46     		mov	sp, r7
 3307              	.LCFI239:
 3308              		.cfi_def_cfa_register 13
 3309              		@ sp needed
 3310 0016 80BD     		pop	{r7, pc}
 3311              		.cfi_endproc
 3312              	.LFE3536:
 3314              		.section	.text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IRffLb1EEEOT_OT0_
 3315              		.align	1
 3316              		.weak	_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
 3317              		.syntax unified
 3318              		.thumb
 3319              		.thumb_func
 3320              		.fpu fpv4-sp-d16
 3322              	_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:
 3323              	.LFB3538:
 3324              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
ARM GAS  /tmp/ccSXOI3d.s 			page 135


   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
ARM GAS  /tmp/ccSXOI3d.s 			page 136


  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
ARM GAS  /tmp/ccSXOI3d.s 			page 137


 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
ARM GAS  /tmp/ccSXOI3d.s 			page 138


 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
ARM GAS  /tmp/ccSXOI3d.s 			page 139


 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
ARM GAS  /tmp/ccSXOI3d.s 			page 140


 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
ARM GAS  /tmp/ccSXOI3d.s 			page 141


 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 3325              		.loc 14 352 12
 3326              		.cfi_startproc
 3327              		@ args = 0, pretend = 0, frame = 16
 3328              		@ frame_needed = 1, uses_anonymous_args = 0
 3329 0000 80B5     		push	{r7, lr}
 3330              	.LCFI240:
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 7, -8
 3333              		.cfi_offset 14, -4
 3334 0002 84B0     		sub	sp, sp, #16
 3335              	.LCFI241:
 3336              		.cfi_def_cfa_offset 24
 3337 0004 00AF     		add	r7, sp, #0
 3338              	.LCFI242:
 3339              		.cfi_def_cfa_register 7
 3340 0006 F860     		str	r0, [r7, #12]
 3341 0008 B960     		str	r1, [r7, #8]
 3342 000a 7A60     		str	r2, [r7, #4]
 3343              	.LBB23:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 3344              		.loc 14 353 27
 3345 000c B868     		ldr	r0, [r7, #8]
 3346 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 3347 0012 0346     		mov	r3, r0
 3348              		.loc 14 353 64
 3349 0014 1A68     		ldr	r2, [r3]	@ float
 3350 0016 FB68     		ldr	r3, [r7, #12]
 3351 0018 1A60     		str	r2, [r3]	@ float
 3352              		.loc 14 353 59
 3353 001a 7868     		ldr	r0, [r7, #4]
 3354 001c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 3355 0020 0346     		mov	r3, r0
 3356              		.loc 14 353 64
 3357 0022 1A68     		ldr	r2, [r3]	@ float
 3358 0024 FB68     		ldr	r3, [r7, #12]
 3359 0026 5A60     		str	r2, [r3, #4]	@ float
 3360              	.LBE23:
 3361              		.loc 14 353 68
 3362 0028 FB68     		ldr	r3, [r7, #12]
 3363 002a 1846     		mov	r0, r3
 3364 002c 1037     		adds	r7, r7, #16
 3365              	.LCFI243:
 3366              		.cfi_def_cfa_offset 8
 3367 002e BD46     		mov	sp, r7
 3368              	.LCFI244:
 3369              		.cfi_def_cfa_register 13
 3370              		@ sp needed
 3371 0030 80BD     		pop	{r7, pc}
 3372              		.cfi_endproc
 3373              	.LFE3538:
 3375              		.weak	_ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
 3376              		.thumb_set _ZNSt4pairIffEC1IRffLb1EEEOT_OT0_,_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
ARM GAS  /tmp/ccSXOI3d.s 			page 142


 3377              		.section	.text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_
 3378              		.align	1
 3379              		.weak	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remov
 3380              		.syntax unified
 3381              		.thumb
 3382              		.thumb_func
 3383              		.fpu fpv4-sp-d16
 3385              	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINS
 3386              	.LFB3540:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 3387              		.loc 2 789 2
 3388              		.cfi_startproc
 3389              		@ args = 0, pretend = 0, frame = 8
 3390              		@ frame_needed = 1, uses_anonymous_args = 0
 3391 0000 90B5     		push	{r4, r7, lr}
 3392              	.LCFI245:
 3393              		.cfi_def_cfa_offset 12
 3394              		.cfi_offset 4, -12
 3395              		.cfi_offset 7, -8
 3396              		.cfi_offset 14, -4
 3397 0002 83B0     		sub	sp, sp, #12
 3398              	.LCFI246:
 3399              		.cfi_def_cfa_offset 24
 3400 0004 00AF     		add	r7, sp, #0
 3401              	.LCFI247:
 3402              		.cfi_def_cfa_register 7
 3403 0006 7860     		str	r0, [r7, #4]
 3404 0008 3960     		str	r1, [r7]
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 3405              		.loc 2 791 27
 3406 000a 7868     		ldr	r0, [r7, #4]
 3407 000c FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 3408 0010 0346     		mov	r3, r0
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 3409              		.loc 2 791 4
 3410 0012 002B     		cmp	r3, #0
 3411 0014 0CD0     		beq	.L131
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 3412              		.loc 2 792 40
 3413 0016 3868     		ldr	r0, [r7]
 3414 0018 FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 3415 001c 0446     		mov	r4, r0
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 3416              		.loc 2 792 18
 3417 001e 7868     		ldr	r0, [r7, #4]
 3418 0020 FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 3419 0024 0346     		mov	r3, r0
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 3420              		.loc 2 792 21
 3421 0026 2146     		mov	r1, r4
 3422 0028 1846     		mov	r0, r3
 3423 002a FFF7FEFF 		bl	_ZNSt4pairIffEaSEOS0_
 3424 002e 07E0     		b	.L132
 3425              	.L131:
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3426              		.loc 2 794 24
 3427 0030 3868     		ldr	r0, [r7]
ARM GAS  /tmp/ccSXOI3d.s 			page 143


 3428 0032 FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 3429 0036 0346     		mov	r3, r0
 3430 0038 1946     		mov	r1, r3
 3431 003a 7868     		ldr	r0, [r7, #4]
 3432 003c FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDp
 3433              	.L132:
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 3434              		.loc 2 796 12
 3435 0040 7B68     		ldr	r3, [r7, #4]
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3436              		.loc 2 797 2
 3437 0042 1846     		mov	r0, r3
 3438 0044 0C37     		adds	r7, r7, #12
 3439              	.LCFI248:
 3440              		.cfi_def_cfa_offset 12
 3441 0046 BD46     		mov	sp, r7
 3442              	.LCFI249:
 3443              		.cfi_def_cfa_register 13
 3444              		@ sp needed
 3445 0048 90BD     		pop	{r4, r7, pc}
 3446              		.cfi_endproc
 3447              	.LFE3540:
 3449              		.section	.text._ZNSt8optionalIfEaSESt9nullopt_t,"axG",%progbits,_ZNSt8optionalIfEaSESt9nullopt_t,c
 3450              		.align	1
 3451              		.weak	_ZNSt8optionalIfEaSESt9nullopt_t
 3452              		.syntax unified
 3453              		.thumb
 3454              		.thumb_func
 3455              		.fpu fpv4-sp-d16
 3457              	_ZNSt8optionalIfEaSESt9nullopt_t:
 3458              	.LFB3541:
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 3459              		.loc 2 776 7
 3460              		.cfi_startproc
 3461              		@ args = 0, pretend = 0, frame = 8
 3462              		@ frame_needed = 1, uses_anonymous_args = 0
 3463 0000 80B5     		push	{r7, lr}
 3464              	.LCFI250:
 3465              		.cfi_def_cfa_offset 8
 3466              		.cfi_offset 7, -8
 3467              		.cfi_offset 14, -4
 3468 0002 82B0     		sub	sp, sp, #8
 3469              	.LCFI251:
 3470              		.cfi_def_cfa_offset 16
 3471 0004 00AF     		add	r7, sp, #0
 3472              	.LCFI252:
 3473              		.cfi_def_cfa_register 7
 3474 0006 7860     		str	r0, [r7, #4]
 3475 0008 3970     		strb	r1, [r7]
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 3476              		.loc 2 778 16
 3477 000a 7868     		ldr	r0, [r7, #4]
 3478 000c FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 3479              		.loc 2 779 10
 3480 0010 7B68     		ldr	r3, [r7, #4]
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 144


 3481              		.loc 2 780 7
 3482 0012 1846     		mov	r0, r3
 3483 0014 0837     		adds	r7, r7, #8
 3484              	.LCFI253:
 3485              		.cfi_def_cfa_offset 8
 3486 0016 BD46     		mov	sp, r7
 3487              	.LCFI254:
 3488              		.cfi_def_cfa_register 13
 3489              		@ sp needed
 3490 0018 80BD     		pop	{r7, pc}
 3491              		.cfi_endproc
 3492              	.LFE3541:
 3494              		.section	.text._ZNSt8optionalISt4pairIffEEaSESt9nullopt_t,"axG",%progbits,_ZNSt8optionalISt4pairIf
 3495              		.align	1
 3496              		.weak	_ZNSt8optionalISt4pairIffEEaSESt9nullopt_t
 3497              		.syntax unified
 3498              		.thumb
 3499              		.thumb_func
 3500              		.fpu fpv4-sp-d16
 3502              	_ZNSt8optionalISt4pairIffEEaSESt9nullopt_t:
 3503              	.LFB3542:
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 3504              		.loc 2 776 7
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 8
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508 0000 80B5     		push	{r7, lr}
 3509              	.LCFI255:
 3510              		.cfi_def_cfa_offset 8
 3511              		.cfi_offset 7, -8
 3512              		.cfi_offset 14, -4
 3513 0002 82B0     		sub	sp, sp, #8
 3514              	.LCFI256:
 3515              		.cfi_def_cfa_offset 16
 3516 0004 00AF     		add	r7, sp, #0
 3517              	.LCFI257:
 3518              		.cfi_def_cfa_register 7
 3519 0006 7860     		str	r0, [r7, #4]
 3520 0008 3970     		strb	r1, [r7]
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 3521              		.loc 2 778 16
 3522 000a 7868     		ldr	r0, [r7, #4]
 3523 000c FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 3524              		.loc 2 779 10
 3525 0010 7B68     		ldr	r3, [r7, #4]
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3526              		.loc 2 780 7
 3527 0012 1846     		mov	r0, r3
 3528 0014 0837     		adds	r7, r7, #8
 3529              	.LCFI258:
 3530              		.cfi_def_cfa_offset 8
 3531 0016 BD46     		mov	sp, r7
 3532              	.LCFI259:
 3533              		.cfi_def_cfa_register 13
 3534              		@ sp needed
 3535 0018 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccSXOI3d.s 			page 145


 3536              		.cfi_endproc
 3537              	.LFE3542:
 3539              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_,"axG",%progbits,_Z
 3540              		.align	1
 3541              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_
 3542              		.syntax unified
 3543              		.thumb
 3544              		.thumb_func
 3545              		.fpu fpv4-sp-d16
 3547              	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_:
 3548              	.LFB3543:
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 3549              		.loc 2 165 7
 3550              		.cfi_startproc
 3551              		@ args = 0, pretend = 0, frame = 8
 3552              		@ frame_needed = 1, uses_anonymous_args = 0
 3553 0000 90B5     		push	{r4, r7, lr}
 3554              	.LCFI260:
 3555              		.cfi_def_cfa_offset 12
 3556              		.cfi_offset 4, -12
 3557              		.cfi_offset 7, -8
 3558              		.cfi_offset 14, -4
 3559 0002 83B0     		sub	sp, sp, #12
 3560              	.LCFI261:
 3561              		.cfi_def_cfa_offset 24
 3562 0004 00AF     		add	r7, sp, #0
 3563              	.LCFI262:
 3564              		.cfi_def_cfa_register 7
 3565 0006 7860     		str	r0, [r7, #4]
 3566 0008 3960     		str	r1, [r7]
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 3567              		.loc 2 167 19
 3568 000a 7B68     		ldr	r3, [r7, #4]
 3569 000c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 3570              		.loc 2 167 9
 3571 000e 002B     		cmp	r3, #0
 3572 0010 11D0     		beq	.L139
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 3573              		.loc 2 167 41 discriminator 1
 3574 0012 3B68     		ldr	r3, [r7]
 3575 0014 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 3576              		.loc 2 167 30 discriminator 1
 3577 0016 002B     		cmp	r3, #0
 3578 0018 0DD0     		beq	.L139
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 3579              		.loc 2 168 42
 3580 001a 3868     		ldr	r0, [r7]
 3581 001c FFF7FEFF 		bl	_ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 3582 0020 0446     		mov	r4, r0
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 3583              		.loc 2 168 23
 3584 0022 7868     		ldr	r0, [r7, #4]
 3585 0024 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 3586 0028 0346     		mov	r3, r0
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
ARM GAS  /tmp/ccSXOI3d.s 			page 146


 3587              		.loc 2 168 26
 3588 002a 2146     		mov	r1, r4
 3589 002c 1846     		mov	r0, r3
 3590 002e FFF7FEFF 		bl	_ZNSt4pairIffEaSERKS0_
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 3591              		.loc 2 168 11
 3592 0032 00BF     		nop
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3593              		.loc 2 176 7
 3594 0034 0FE0     		b	.L142
 3595              	.L139:
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 3596              		.loc 2 171 18
 3597 0036 3B68     		ldr	r3, [r7]
 3598 0038 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 3599              		.loc 2 171 6
 3600 003a 002B     		cmp	r3, #0
 3601 003c 08D0     		beq	.L141
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 3602              		.loc 2 172 26
 3603 003e 3868     		ldr	r0, [r7]
 3604 0040 FFF7FEFF 		bl	_ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 3605 0044 0346     		mov	r3, r0
 3606 0046 1946     		mov	r1, r3
 3607 0048 7868     		ldr	r0, [r7, #4]
 3608 004a FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3609              		.loc 2 176 7
 3610 004e 02E0     		b	.L142
 3611              	.L141:
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 3612              		.loc 2 174 22
 3613 0050 7868     		ldr	r0, [r7, #4]
 3614 0052 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv
 3615              	.L142:
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3616              		.loc 2 176 7
 3617 0056 00BF     		nop
 3618 0058 0C37     		adds	r7, r7, #12
 3619              	.LCFI263:
 3620              		.cfi_def_cfa_offset 12
 3621 005a BD46     		mov	sp, r7
 3622              	.LCFI264:
 3623              		.cfi_def_cfa_register 13
 3624              		@ sp needed
 3625 005c 90BD     		pop	{r4, r7, pc}
 3626              		.cfi_endproc
 3627              	.LFE3543:
 3629              		.section	.text._ZNKSt8optionalIfE9has_valueEv,"axG",%progbits,_ZNKSt8optionalIfE9has_valueEv,comda
 3630              		.align	1
 3631              		.weak	_ZNKSt8optionalIfE9has_valueEv
 3632              		.syntax unified
 3633              		.thumb
 3634              		.thumb_func
 3635              		.fpu fpv4-sp-d16
 3637              	_ZNKSt8optionalIfE9has_valueEv:
ARM GAS  /tmp/ccSXOI3d.s 			page 147


 3638              	.LFB3544:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 3639              		.loc 2 917 22
 3640              		.cfi_startproc
 3641              		@ args = 0, pretend = 0, frame = 8
 3642              		@ frame_needed = 1, uses_anonymous_args = 0
 3643 0000 80B5     		push	{r7, lr}
 3644              	.LCFI265:
 3645              		.cfi_def_cfa_offset 8
 3646              		.cfi_offset 7, -8
 3647              		.cfi_offset 14, -4
 3648 0002 82B0     		sub	sp, sp, #8
 3649              	.LCFI266:
 3650              		.cfi_def_cfa_offset 16
 3651 0004 00AF     		add	r7, sp, #0
 3652              	.LCFI267:
 3653              		.cfi_def_cfa_register 7
 3654 0006 7860     		str	r0, [r7, #4]
 3655              		.loc 2 918 35
 3656 0008 7868     		ldr	r0, [r7, #4]
 3657 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 3658 000e 0346     		mov	r3, r0
 3659              		.loc 2 918 39
 3660 0010 1846     		mov	r0, r3
 3661 0012 0837     		adds	r7, r7, #8
 3662              	.LCFI268:
 3663              		.cfi_def_cfa_offset 8
 3664 0014 BD46     		mov	sp, r7
 3665              	.LCFI269:
 3666              		.cfi_def_cfa_register 13
 3667              		@ sp needed
 3668 0016 80BD     		pop	{r7, pc}
 3669              		.cfi_endproc
 3670              	.LFE3544:
 3672              		.section	.text._ZNRSt8optionalIfEdeEv,"axG",%progbits,_ZNRSt8optionalIfEdeEv,comdat
 3673              		.align	1
 3674              		.weak	_ZNRSt8optionalIfEdeEv
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu fpv4-sp-d16
 3680              	_ZNRSt8optionalIfEdeEv:
 3681              	.LFB3545:
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 3682              		.loc 2 903 7
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 8
 3685              		@ frame_needed = 1, uses_anonymous_args = 0
 3686 0000 80B5     		push	{r7, lr}
 3687              	.LCFI270:
 3688              		.cfi_def_cfa_offset 8
 3689              		.cfi_offset 7, -8
 3690              		.cfi_offset 14, -4
 3691 0002 82B0     		sub	sp, sp, #8
 3692              	.LCFI271:
 3693              		.cfi_def_cfa_offset 16
 3694 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 148


 3695              	.LCFI272:
 3696              		.cfi_def_cfa_register 7
 3697 0006 7860     		str	r0, [r7, #4]
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3698              		.loc 2 904 28
 3699 0008 7868     		ldr	r0, [r7, #4]
 3700 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 3701 000e 0346     		mov	r3, r0
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3702              		.loc 2 904 32
 3703 0010 1846     		mov	r0, r3
 3704 0012 0837     		adds	r7, r7, #8
 3705              	.LCFI273:
 3706              		.cfi_def_cfa_offset 8
 3707 0014 BD46     		mov	sp, r7
 3708              	.LCFI274:
 3709              		.cfi_def_cfa_register 13
 3710              		@ sp needed
 3711 0016 80BD     		pop	{r7, pc}
 3712              		.cfi_endproc
 3713              	.LFE3545:
 3715              		.section	.text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IffLb1EEEOT_OT0_,c
 3716              		.align	1
 3717              		.weak	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 3718              		.syntax unified
 3719              		.thumb
 3720              		.thumb_func
 3721              		.fpu fpv4-sp-d16
 3723              	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_:
 3724              	.LFB3547:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 3725              		.loc 14 352 12
 3726              		.cfi_startproc
 3727              		@ args = 0, pretend = 0, frame = 16
 3728              		@ frame_needed = 1, uses_anonymous_args = 0
 3729 0000 80B5     		push	{r7, lr}
 3730              	.LCFI275:
 3731              		.cfi_def_cfa_offset 8
 3732              		.cfi_offset 7, -8
 3733              		.cfi_offset 14, -4
 3734 0002 84B0     		sub	sp, sp, #16
 3735              	.LCFI276:
 3736              		.cfi_def_cfa_offset 24
 3737 0004 00AF     		add	r7, sp, #0
 3738              	.LCFI277:
 3739              		.cfi_def_cfa_register 7
 3740 0006 F860     		str	r0, [r7, #12]
 3741 0008 B960     		str	r1, [r7, #8]
 3742 000a 7A60     		str	r2, [r7, #4]
 3743              	.LBB24:
 3744              		.loc 14 353 27
 3745 000c B868     		ldr	r0, [r7, #8]
 3746 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 3747 0012 0346     		mov	r3, r0
 3748              		.loc 14 353 64
 3749 0014 1A68     		ldr	r2, [r3]	@ float
 3750 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccSXOI3d.s 			page 149


 3751 0018 1A60     		str	r2, [r3]	@ float
 3752              		.loc 14 353 59
 3753 001a 7868     		ldr	r0, [r7, #4]
 3754 001c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 3755 0020 0346     		mov	r3, r0
 3756              		.loc 14 353 64
 3757 0022 1A68     		ldr	r2, [r3]	@ float
 3758 0024 FB68     		ldr	r3, [r7, #12]
 3759 0026 5A60     		str	r2, [r3, #4]	@ float
 3760              	.LBE24:
 3761              		.loc 14 353 68
 3762 0028 FB68     		ldr	r3, [r7, #12]
 3763 002a 1846     		mov	r0, r3
 3764 002c 1037     		adds	r7, r7, #16
 3765              	.LCFI278:
 3766              		.cfi_def_cfa_offset 8
 3767 002e BD46     		mov	sp, r7
 3768              	.LCFI279:
 3769              		.cfi_def_cfa_register 13
 3770              		@ sp needed
 3771 0030 80BD     		pop	{r7, pc}
 3772              		.cfi_endproc
 3773              	.LFE3547:
 3775              		.weak	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 3776              		.thumb_set _ZNSt4pairIffEC1IffLb1EEEOT_OT0_,_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 3777              		.section	.text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IRfS2_Lb1EEEOT_
 3778              		.align	1
 3779              		.weak	_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
 3780              		.syntax unified
 3781              		.thumb
 3782              		.thumb_func
 3783              		.fpu fpv4-sp-d16
 3785              	_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:
 3786              	.LFB3550:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 3787              		.loc 14 352 12
 3788              		.cfi_startproc
 3789              		@ args = 0, pretend = 0, frame = 16
 3790              		@ frame_needed = 1, uses_anonymous_args = 0
 3791 0000 80B5     		push	{r7, lr}
 3792              	.LCFI280:
 3793              		.cfi_def_cfa_offset 8
 3794              		.cfi_offset 7, -8
 3795              		.cfi_offset 14, -4
 3796 0002 84B0     		sub	sp, sp, #16
 3797              	.LCFI281:
 3798              		.cfi_def_cfa_offset 24
 3799 0004 00AF     		add	r7, sp, #0
 3800              	.LCFI282:
 3801              		.cfi_def_cfa_register 7
 3802 0006 F860     		str	r0, [r7, #12]
 3803 0008 B960     		str	r1, [r7, #8]
 3804 000a 7A60     		str	r2, [r7, #4]
 3805              	.LBB25:
 3806              		.loc 14 353 27
 3807 000c B868     		ldr	r0, [r7, #8]
 3808 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
ARM GAS  /tmp/ccSXOI3d.s 			page 150


 3809 0012 0346     		mov	r3, r0
 3810              		.loc 14 353 64
 3811 0014 1A68     		ldr	r2, [r3]	@ float
 3812 0016 FB68     		ldr	r3, [r7, #12]
 3813 0018 1A60     		str	r2, [r3]	@ float
 3814              		.loc 14 353 59
 3815 001a 7868     		ldr	r0, [r7, #4]
 3816 001c FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 3817 0020 0346     		mov	r3, r0
 3818              		.loc 14 353 64
 3819 0022 1A68     		ldr	r2, [r3]	@ float
 3820 0024 FB68     		ldr	r3, [r7, #12]
 3821 0026 5A60     		str	r2, [r3, #4]	@ float
 3822              	.LBE25:
 3823              		.loc 14 353 68
 3824 0028 FB68     		ldr	r3, [r7, #12]
 3825 002a 1846     		mov	r0, r3
 3826 002c 1037     		adds	r7, r7, #16
 3827              	.LCFI283:
 3828              		.cfi_def_cfa_offset 8
 3829 002e BD46     		mov	sp, r7
 3830              	.LCFI284:
 3831              		.cfi_def_cfa_register 13
 3832              		@ sp needed
 3833 0030 80BD     		pop	{r7, pc}
 3834              		.cfi_endproc
 3835              	.LFE3550:
 3837              		.weak	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 3838              		.thumb_set _ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_,_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
 3839              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_,"axG",%
 3840              		.align	1
 3841              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_
 3842              		.syntax unified
 3843              		.thumb
 3844              		.thumb_func
 3845              		.fpu fpv4-sp-d16
 3847              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_:
 3848              	.LFB3557:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3849              		.loc 2 204 6
 3850              		.cfi_startproc
 3851              		@ args = 0, pretend = 0, frame = 16
 3852              		@ frame_needed = 1, uses_anonymous_args = 0
 3853 0000 80B5     		push	{r7, lr}
 3854              	.LCFI285:
 3855              		.cfi_def_cfa_offset 8
 3856              		.cfi_offset 7, -8
 3857              		.cfi_offset 14, -4
 3858 0002 84B0     		sub	sp, sp, #16
 3859              	.LCFI286:
 3860              		.cfi_def_cfa_offset 24
 3861 0004 00AF     		add	r7, sp, #0
 3862              	.LCFI287:
 3863              		.cfi_def_cfa_register 7
 3864 0006 F860     		str	r0, [r7, #12]
 3865 0008 3972     		strb	r1, [r7, #8]
 3866 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 151


 3867              	.LBB26:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3868              		.loc 2 205 36
 3869 000c 7868     		ldr	r0, [r7, #4]
 3870 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 3871 0012 0346     		mov	r3, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 3872              		.loc 2 205 47
 3873 0014 1A68     		ldr	r2, [r3]	@ float
 3874 0016 FB68     		ldr	r3, [r7, #12]
 3875 0018 1A60     		str	r2, [r3]	@ float
 3876              	.LBE26:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3877              		.loc 2 206 8
 3878 001a FB68     		ldr	r3, [r7, #12]
 3879 001c 1846     		mov	r0, r3
 3880 001e 1037     		adds	r7, r7, #16
 3881              	.LCFI288:
 3882              		.cfi_def_cfa_offset 8
 3883 0020 BD46     		mov	sp, r7
 3884              	.LCFI289:
 3885              		.cfi_def_cfa_register 13
 3886              		@ sp needed
 3887 0022 80BD     		pop	{r7, pc}
 3888              		.cfi_endproc
 3889              	.LFE3557:
 3891              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
 3892              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_,_ZNSt22_Opt
 3893              		.section	.text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_,"axG",%progbits,_ZNSt22
 3894              		.align	1
 3895              		.weak	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
 3896              		.syntax unified
 3897              		.thumb
 3898              		.thumb_func
 3899              		.fpu fpv4-sp-d16
 3901              	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:
 3902              	.LFB3559:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3903              		.loc 2 116 2
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 16
 3906              		@ frame_needed = 1, uses_anonymous_args = 0
 3907 0000 B0B5     		push	{r4, r5, r7, lr}
 3908              	.LCFI290:
 3909              		.cfi_def_cfa_offset 16
 3910              		.cfi_offset 4, -16
 3911              		.cfi_offset 5, -12
 3912              		.cfi_offset 7, -8
 3913              		.cfi_offset 14, -4
 3914 0002 84B0     		sub	sp, sp, #16
 3915              	.LCFI291:
 3916              		.cfi_def_cfa_offset 32
 3917 0004 00AF     		add	r7, sp, #0
 3918              	.LCFI292:
 3919              		.cfi_def_cfa_register 7
 3920 0006 F860     		str	r0, [r7, #12]
 3921 0008 3972     		strb	r1, [r7, #8]
ARM GAS  /tmp/ccSXOI3d.s 			page 152


 3922 000a 7A60     		str	r2, [r7, #4]
 3923              	.LBB27:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 3924              		.loc 2 118 19
 3925 000c FC68     		ldr	r4, [r7, #12]
 3926 000e 7868     		ldr	r0, [r7, #4]
 3927 0010 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 3928 0014 0346     		mov	r3, r0
 3929 0016 1A46     		mov	r2, r3
 3930 0018 2946     		mov	r1, r5
 3931 001a 2046     		mov	r0, r4
 3932 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
 3933 0020 FB68     		ldr	r3, [r7, #12]
 3934 0022 0122     		movs	r2, #1
 3935 0024 1A71     		strb	r2, [r3, #4]
 3936              	.LBE27:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3937              		.loc 2 119 4
 3938 0026 FB68     		ldr	r3, [r7, #12]
 3939 0028 1846     		mov	r0, r3
 3940 002a 1037     		adds	r7, r7, #16
 3941              	.LCFI293:
 3942              		.cfi_def_cfa_offset 16
 3943 002c BD46     		mov	sp, r7
 3944              	.LCFI294:
 3945              		.cfi_def_cfa_register 13
 3946              		@ sp needed
 3947 002e B0BD     		pop	{r4, r5, r7, pc}
 3948              		.cfi_endproc
 3949              	.LFE3559:
 3951              		.weak	_ZNSt22_Optional_payload_baseIfEC1IJfEEESt10in_place_tDpOT_
 3952              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1IJfEEESt10in_place_tDpOT_,_ZNSt22_Optional_payload_ba
 3953              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in
 3954              		.align	1
 3955              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tD
 3956              		.syntax unified
 3957              		.thumb
 3958              		.thumb_func
 3959              		.fpu fpv4-sp-d16
 3961              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:
 3962              	.LFB3561:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3963              		.loc 2 301 42
 3964              		.cfi_startproc
 3965              		@ args = 0, pretend = 0, frame = 16
 3966              		@ frame_needed = 1, uses_anonymous_args = 0
 3967 0000 90B5     		push	{r4, r7, lr}
 3968              	.LCFI295:
 3969              		.cfi_def_cfa_offset 12
 3970              		.cfi_offset 4, -12
 3971              		.cfi_offset 7, -8
 3972              		.cfi_offset 14, -4
 3973 0002 85B0     		sub	sp, sp, #20
 3974              	.LCFI296:
 3975              		.cfi_def_cfa_offset 32
 3976 0004 00AF     		add	r7, sp, #0
 3977              	.LCFI297:
ARM GAS  /tmp/ccSXOI3d.s 			page 153


 3978              		.cfi_def_cfa_register 7
 3979 0006 F860     		str	r0, [r7, #12]
 3980 0008 3972     		strb	r1, [r7, #8]
 3981 000a 7A60     		str	r2, [r7, #4]
 3982              	.LBB28:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3983              		.loc 2 301 42
 3984 000c FB68     		ldr	r3, [r7, #12]
 3985 000e 7A68     		ldr	r2, [r7, #4]
 3986 0010 2146     		mov	r1, r4
 3987 0012 1846     		mov	r0, r3
 3988 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
 3989              	.LBE28:
 3990 0018 FB68     		ldr	r3, [r7, #12]
 3991 001a 1846     		mov	r0, r3
 3992 001c 1437     		adds	r7, r7, #20
 3993              	.LCFI298:
 3994              		.cfi_def_cfa_offset 12
 3995 001e BD46     		mov	sp, r7
 3996              	.LCFI299:
 3997              		.cfi_def_cfa_register 13
 3998              		@ sp needed
 3999 0020 90BD     		pop	{r4, r7, pc}
 4000              		.cfi_endproc
 4001              	.LFE3561:
 4003              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tD
 4004              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_pla
 4005              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_,"axG",%progbits,_ZN
 4006              		.align	1
 4007              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
 4008              		.syntax unified
 4009              		.thumb
 4010              		.thumb_func
 4011              		.fpu fpv4-sp-d16
 4013              	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:
 4014              	.LFB3563:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 4015              		.loc 2 608 28
 4016              		.cfi_startproc
 4017              		@ args = 0, pretend = 0, frame = 16
 4018              		@ frame_needed = 1, uses_anonymous_args = 0
 4019 0000 B0B5     		push	{r4, r5, r7, lr}
 4020              	.LCFI300:
 4021              		.cfi_def_cfa_offset 16
 4022              		.cfi_offset 4, -16
 4023              		.cfi_offset 5, -12
 4024              		.cfi_offset 7, -8
 4025              		.cfi_offset 14, -4
 4026 0002 84B0     		sub	sp, sp, #16
 4027              	.LCFI301:
 4028              		.cfi_def_cfa_offset 32
 4029 0004 00AF     		add	r7, sp, #0
 4030              	.LCFI302:
 4031              		.cfi_def_cfa_register 7
 4032 0006 F860     		str	r0, [r7, #12]
 4033 0008 3972     		strb	r1, [r7, #8]
 4034 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 154


 4035              	.LBB29:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4036              		.loc 2 610 38
 4037 000c FC68     		ldr	r4, [r7, #12]
 4038 000e 7868     		ldr	r0, [r7, #4]
 4039 0010 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 4040 0014 0346     		mov	r3, r0
 4041 0016 1A46     		mov	r2, r3
 4042 0018 2946     		mov	r1, r5
 4043 001a 2046     		mov	r0, r4
 4044 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT
 4045              	.LBE29:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4046              		.loc 2 610 42
 4047 0020 FB68     		ldr	r3, [r7, #12]
 4048 0022 1846     		mov	r0, r3
 4049 0024 1037     		adds	r7, r7, #16
 4050              	.LCFI303:
 4051              		.cfi_def_cfa_offset 16
 4052 0026 BD46     		mov	sp, r7
 4053              	.LCFI304:
 4054              		.cfi_def_cfa_register 13
 4055              		@ sp needed
 4056 0028 B0BD     		pop	{r4, r5, r7, pc}
 4057              		.cfi_endproc
 4058              	.LFE3563:
 4060              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1IJfELb0EEESt10in_place_tDpOT_
 4061              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1IJfELb0EEESt10in_place_tDpOT_,_ZNSt14_Optional_baseIf
 4062              		.section	.text._ZNSt8optionalIfEC2IfLb1EEEOT_,"axG",%progbits,_ZNSt8optionalIfEC5IfLb1EEEOT_,comda
 4063              		.align	1
 4064              		.weak	_ZNSt8optionalIfEC2IfLb1EEEOT_
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4068              		.fpu fpv4-sp-d16
 4070              	_ZNSt8optionalIfEC2IfLb1EEEOT_:
 4071              	.LFB3565:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 4072              		.loc 2 701 2
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 8
 4075              		@ frame_needed = 1, uses_anonymous_args = 0
 4076 0000 B0B5     		push	{r4, r5, r7, lr}
 4077              	.LCFI305:
 4078              		.cfi_def_cfa_offset 16
 4079              		.cfi_offset 4, -16
 4080              		.cfi_offset 5, -12
 4081              		.cfi_offset 7, -8
 4082              		.cfi_offset 14, -4
 4083 0002 82B0     		sub	sp, sp, #8
 4084              	.LCFI306:
 4085              		.cfi_def_cfa_offset 24
 4086 0004 00AF     		add	r7, sp, #0
 4087              	.LCFI307:
 4088              		.cfi_def_cfa_register 7
 4089 0006 7860     		str	r0, [r7, #4]
 4090 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccSXOI3d.s 			page 155


 4091              	.LBB30:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4092              		.loc 2 702 47
 4093 000a 7C68     		ldr	r4, [r7, #4]
 4094 000c 3868     		ldr	r0, [r7]
 4095 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 4096 0012 0346     		mov	r3, r0
 4097 0014 1A46     		mov	r2, r3
 4098 0016 2946     		mov	r1, r5
 4099 0018 2046     		mov	r0, r4
 4100 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
 4101              	.LBE30:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4102              		.loc 2 702 51
 4103 001e 7B68     		ldr	r3, [r7, #4]
 4104 0020 1846     		mov	r0, r3
 4105 0022 0837     		adds	r7, r7, #8
 4106              	.LCFI308:
 4107              		.cfi_def_cfa_offset 16
 4108 0024 BD46     		mov	sp, r7
 4109              	.LCFI309:
 4110              		.cfi_def_cfa_register 13
 4111              		@ sp needed
 4112 0026 B0BD     		pop	{r4, r5, r7, pc}
 4113              		.cfi_endproc
 4114              	.LFE3565:
 4116              		.weak	_ZNSt8optionalIfEC1IfLb1EEEOT_
 4117              		.thumb_set _ZNSt8optionalIfEC1IfLb1EEEOT_,_ZNSt8optionalIfEC2IfLb1EEEOT_
 4118              		.section	.text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv,"axG",
 4119              		.align	1
 4120              		.weak	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 4121              		.syntax unified
 4122              		.thumb
 4123              		.thumb_func
 4124              		.fpu fpv4-sp-d16
 4126              	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:
 4127              	.LFB3568:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4128              		.loc 2 434 22
 4129              		.cfi_startproc
 4130              		@ args = 0, pretend = 0, frame = 8
 4131              		@ frame_needed = 1, uses_anonymous_args = 0
 4132              		@ link register save eliminated.
 4133 0000 80B4     		push	{r7}
 4134              	.LCFI310:
 4135              		.cfi_def_cfa_offset 4
 4136              		.cfi_offset 7, -4
 4137 0002 83B0     		sub	sp, sp, #12
 4138              	.LCFI311:
 4139              		.cfi_def_cfa_offset 16
 4140 0004 00AF     		add	r7, sp, #0
 4141              	.LCFI312:
 4142              		.cfi_def_cfa_register 7
 4143 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4144              		.loc 2 435 58
 4145 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 156


 4146 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4147              		.loc 2 435 70
 4148 000c 1846     		mov	r0, r3
 4149 000e 0C37     		adds	r7, r7, #12
 4150              	.LCFI313:
 4151              		.cfi_def_cfa_offset 4
 4152 0010 BD46     		mov	sp, r7
 4153              	.LCFI314:
 4154              		.cfi_def_cfa_register 13
 4155              		@ sp needed
 4156 0012 5DF8047B 		ldr	r7, [sp], #4
 4157              	.LCFI315:
 4158              		.cfi_restore 7
 4159              		.cfi_def_cfa_offset 0
 4160 0016 7047     		bx	lr
 4161              		.cfi_endproc
 4162              	.LFE3568:
 4164              		.section	.text._ZNRSt8optionalIfE5valueEv,"axG",%progbits,_ZNRSt8optionalIfE5valueEv,comdat
 4165              		.align	1
 4166              		.weak	_ZNRSt8optionalIfE5valueEv
 4167              		.syntax unified
 4168              		.thumb
 4169              		.thumb_func
 4170              		.fpu fpv4-sp-d16
 4172              	_ZNRSt8optionalIfE5valueEv:
 4173              	.LFB3567:
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&
 4174              		.loc 2 929 7
 4175              		.cfi_startproc
 4176              		@ args = 0, pretend = 0, frame = 8
 4177              		@ frame_needed = 1, uses_anonymous_args = 0
 4178 0000 80B5     		push	{r7, lr}
 4179              	.LCFI316:
 4180              		.cfi_def_cfa_offset 8
 4181              		.cfi_offset 7, -8
 4182              		.cfi_offset 14, -4
 4183 0002 82B0     		sub	sp, sp, #8
 4184              	.LCFI317:
 4185              		.cfi_def_cfa_offset 16
 4186 0004 00AF     		add	r7, sp, #0
 4187              	.LCFI318:
 4188              		.cfi_def_cfa_register 7
 4189 0006 7860     		str	r0, [r7, #4]
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 4190              		.loc 2 931 28
ARM GAS  /tmp/ccSXOI3d.s 			page 157


 4191 0008 7868     		ldr	r0, [r7, #4]
 4192 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 4193 000e 0346     		mov	r3, r0
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 4194              		.loc 2 932 4
 4195 0010 002B     		cmp	r3, #0
 4196 0012 04D0     		beq	.L164
 4197              		.loc 2 932 18 discriminator 1
 4198 0014 7868     		ldr	r0, [r7, #4]
 4199 0016 FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 4200 001a 0346     		mov	r3, r0
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 4201              		.loc 2 933 52 discriminator 1
 4202 001c 01E0     		b	.L167
 4203              	.L164:
 4204              		.loc 2 933 34
 4205 001e FFF7FEFF 		bl	_ZSt27__throw_bad_optional_accessv
 4206              	.L167:
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 4207              		.loc 2 934 7 discriminator 2
 4208 0022 1846     		mov	r0, r3
 4209 0024 0837     		adds	r7, r7, #8
 4210              	.LCFI319:
 4211              		.cfi_def_cfa_offset 8
 4212 0026 BD46     		mov	sp, r7
 4213              	.LCFI320:
 4214              		.cfi_def_cfa_register 13
 4215              		@ sp needed
 4216 0028 80BD     		pop	{r7, pc}
 4217              		.cfi_endproc
 4218              	.LFE3567:
 4220              		.section	.text._ZN9InputPortISt4pairIffEE7presentEv,"axG",%progbits,_ZN9InputPortISt4pairIffEE7pre
 4221              		.align	1
 4222              		.weak	_ZN9InputPortISt4pairIffEE7presentEv
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	_ZN9InputPortISt4pairIffEE7presentEv:
 4229              	.LFB3569:
 4230              		.file 15 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
ARM GAS  /tmp/ccSXOI3d.s 			page 158


  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
  53:Inc/component.hpp ****         content_ = value;
  54:Inc/component.hpp ****         age_ = 0;
  55:Inc/component.hpp ****     }
  56:Inc/component.hpp **** 
  57:Inc/component.hpp ****     /**
  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
ARM GAS  /tmp/ccSXOI3d.s 			page 159


  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
 114:Inc/component.hpp ****  * The source can be one of:
 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 124:Inc/component.hpp **** public:
 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:Inc/component.hpp ****         content_ = input_port;
 127:Inc/component.hpp ****     }
 128:Inc/component.hpp **** 
 129:Inc/component.hpp ****     void connect_to(T* input_ptr) {
 130:Inc/component.hpp ****         content_ = input_ptr;
ARM GAS  /tmp/ccSXOI3d.s 			page 160


 131:Inc/component.hpp ****     }
 132:Inc/component.hpp **** 
 133:Inc/component.hpp ****     void disconnect() {
 134:Inc/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:Inc/component.hpp ****     }
 136:Inc/component.hpp **** 
 137:Inc/component.hpp ****     std::optional<T> present() {
 4231              		.loc 15 137 22
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 16
 4234              		@ frame_needed = 1, uses_anonymous_args = 0
 4235 0000 B0B5     		push	{r4, r5, r7, lr}
 4236              	.LCFI321:
 4237              		.cfi_def_cfa_offset 16
 4238              		.cfi_offset 4, -16
 4239              		.cfi_offset 5, -12
 4240              		.cfi_offset 7, -8
 4241              		.cfi_offset 14, -4
 4242 0002 84B0     		sub	sp, sp, #16
 4243              	.LCFI322:
 4244              		.cfi_def_cfa_offset 32
 4245 0004 00AF     		add	r7, sp, #0
 4246              	.LCFI323:
 4247              		.cfi_def_cfa_register 7
 4248 0006 7860     		str	r0, [r7, #4]
 4249 0008 3960     		str	r1, [r7]
 4250              	.LBB31:
 138:Inc/component.hpp ****         if (content_.index() == 2) {
 4251              		.loc 15 138 27
 4252 000a 3B68     		ldr	r3, [r7]
 4253 000c 1846     		mov	r0, r3
 4254 000e FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 4255 0012 0346     		mov	r3, r0
 4256              		.loc 15 138 30
 4257 0014 022B     		cmp	r3, #2
 4258 0016 0CBF     		ite	eq
 4259 0018 0123     		moveq	r3, #1
 4260 001a 0023     		movne	r3, #0
 4261 001c DBB2     		uxtb	r3, r3
 4262              		.loc 15 138 9
 4263 001e 002B     		cmp	r3, #0
 4264 0020 14D0     		beq	.L169
 4265              	.LBB32:
 139:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 4266              		.loc 15 139 46
 4267 0022 3B68     		ldr	r3, [r7]
 4268              		.loc 15 139 45
 4269 0024 1846     		mov	r0, r3
 4270 0026 FFF7FEFF 		bl	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0
 4271 002a 0346     		mov	r3, r0
 4272              		.loc 15 139 28
 4273 002c 1B68     		ldr	r3, [r3]
 4274 002e BB60     		str	r3, [r7, #8]
 140:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 4275              		.loc 15 140 48
 4276 0030 BB68     		ldr	r3, [r7, #8]
 4277 0032 002B     		cmp	r3, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 161


 4278 0034 05D0     		beq	.L170
 4279              		.loc 15 140 38 discriminator 1
 4280 0036 7B68     		ldr	r3, [r7, #4]
 4281 0038 B968     		ldr	r1, [r7, #8]
 4282 003a 1846     		mov	r0, r3
 4283 003c FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEE7presentEv
 4284              		.loc 15 140 48 discriminator 1
 4285 0040 2EE0     		b	.L172
 4286              	.L170:
 4287              		.loc 15 140 48 is_stmt 0 discriminator 2
 4288 0042 2946     		mov	r1, r5
 4289 0044 7868     		ldr	r0, [r7, #4]
 4290 0046 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 4291 004a 29E0     		b	.L172
 4292              	.L169:
 4293              	.LBE32:
 4294              	.LBB33:
 4295              	.LBB34:
 141:Inc/component.hpp ****         } else if (content_.index() == 1) {
 4296              		.loc 15 141 34 is_stmt 1
 4297 004c 3B68     		ldr	r3, [r7]
 4298 004e 1846     		mov	r0, r3
 4299 0050 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 4300 0054 0346     		mov	r3, r0
 4301              		.loc 15 141 37
 4302 0056 012B     		cmp	r3, #1
 4303 0058 0CBF     		ite	eq
 4304 005a 0123     		moveq	r3, #1
 4305 005c 0023     		movne	r3, #0
 4306 005e DBB2     		uxtb	r3, r3
 4307              		.loc 15 141 16
 4308 0060 002B     		cmp	r3, #0
 4309 0062 14D0     		beq	.L173
 4310              	.LBB35:
 142:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 4311              		.loc 15 142 34
 4312 0064 3B68     		ldr	r3, [r7]
 4313              		.loc 15 142 33
 4314 0066 1846     		mov	r0, r3
 4315 0068 FFF7FEFF 		bl	_ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0
 4316 006c 0346     		mov	r3, r0
 4317              		.loc 15 142 16
 4318 006e 1B68     		ldr	r3, [r3]
 4319 0070 FB60     		str	r3, [r7, #12]
 143:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 4320              		.loc 15 143 58
 4321 0072 FB68     		ldr	r3, [r7, #12]
 4322 0074 002B     		cmp	r3, #0
 4323 0076 05D0     		beq	.L174
 4324              		.loc 15 143 44 discriminator 1
 4325 0078 7B68     		ldr	r3, [r7, #4]
 4326 007a F968     		ldr	r1, [r7, #12]
 4327 007c 1846     		mov	r0, r3
 4328 007e FFF7FEFF 		bl	_ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_
 4329              		.loc 15 143 58 discriminator 1
 4330 0082 0DE0     		b	.L172
 4331              	.L174:
ARM GAS  /tmp/ccSXOI3d.s 			page 162


 4332              		.loc 15 143 58 is_stmt 0 discriminator 2
 4333 0084 2146     		mov	r1, r4
 4334 0086 7868     		ldr	r0, [r7, #4]
 4335 0088 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 4336 008c 08E0     		b	.L172
 4337              	.L173:
 4338              	.LBE35:
 144:Inc/component.hpp ****         } else {
 145:Inc/component.hpp ****             return std::get<0>(content_);
 4339              		.loc 15 145 32 is_stmt 1
 4340 008e 3B68     		ldr	r3, [r7]
 4341              		.loc 15 145 31
 4342 0090 1846     		mov	r0, r3
 4343 0092 FFF7FEFF 		bl	_ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0
 4344 0096 0346     		mov	r3, r0
 4345              		.loc 15 145 40
 4346 0098 1946     		mov	r1, r3
 4347 009a 7868     		ldr	r0, [r7, #4]
 4348 009c FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 4349              	.L172:
 4350              	.LBE34:
 4351              	.LBE33:
 4352              	.LBE31:
 146:Inc/component.hpp ****         }
 147:Inc/component.hpp ****     }
 4353              		.loc 15 147 5 discriminator 1
 4354 00a0 7868     		ldr	r0, [r7, #4]
 4355 00a2 1037     		adds	r7, r7, #16
 4356              	.LCFI324:
 4357              		.cfi_def_cfa_offset 16
 4358 00a4 BD46     		mov	sp, r7
 4359              	.LCFI325:
 4360              		.cfi_def_cfa_register 13
 4361              		@ sp needed
 4362 00a6 B0BD     		pop	{r4, r5, r7, pc}
 4363              		.cfi_endproc
 4364              	.LFE3569:
 4366              		.section	.text._ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_
 4367              		.align	1
 4368              		.weak	_ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS
 4369              		.syntax unified
 4370              		.thumb
 4371              		.thumb_func
 4372              		.fpu fpv4-sp-d16
 4374              	_ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS6_:
 4375              	.LFB3570:
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 4376              		.loc 12 101 5
 4377              		.cfi_startproc
 4378              		@ args = 0, pretend = 0, frame = 8
 4379              		@ frame_needed = 1, uses_anonymous_args = 0
 4380              		@ link register save eliminated.
 4381 0000 80B4     		push	{r7}
 4382              	.LCFI326:
 4383              		.cfi_def_cfa_offset 4
 4384              		.cfi_offset 7, -4
 4385 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccSXOI3d.s 			page 163


 4386              	.LCFI327:
 4387              		.cfi_def_cfa_offset 16
 4388 0004 00AF     		add	r7, sp, #0
 4389              	.LCFI328:
 4390              		.cfi_def_cfa_register 7
 4391 0006 7860     		str	r0, [r7, #4]
 4392              		.loc 12 102 74
 4393 0008 7B68     		ldr	r3, [r7, #4]
 4394              		.loc 12 102 77
 4395 000a 1846     		mov	r0, r3
 4396 000c 0C37     		adds	r7, r7, #12
 4397              	.LCFI329:
 4398              		.cfi_def_cfa_offset 4
 4399 000e BD46     		mov	sp, r7
 4400              	.LCFI330:
 4401              		.cfi_def_cfa_register 13
 4402              		@ sp needed
 4403 0010 5DF8047B 		ldr	r7, [sp], #4
 4404              	.LCFI331:
 4405              		.cfi_restore 7
 4406              		.cfi_def_cfa_offset 0
 4407 0014 7047     		bx	lr
 4408              		.cfi_endproc
 4409              	.LFE3570:
 4411              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_,"axG",%progbits,_ZN
 4412              		.align	1
 4413              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_
 4414              		.syntax unified
 4415              		.thumb
 4416              		.thumb_func
 4417              		.fpu fpv4-sp-d16
 4419              	_ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_:
 4420              	.LFB3571:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 4421              		.loc 2 180 7
 4422              		.cfi_startproc
 4423              		@ args = 0, pretend = 0, frame = 8
 4424              		@ frame_needed = 1, uses_anonymous_args = 0
 4425 0000 90B5     		push	{r4, r7, lr}
 4426              	.LCFI332:
 4427              		.cfi_def_cfa_offset 12
 4428              		.cfi_offset 4, -12
 4429              		.cfi_offset 7, -8
 4430              		.cfi_offset 14, -4
 4431 0002 83B0     		sub	sp, sp, #12
 4432              	.LCFI333:
 4433              		.cfi_def_cfa_offset 24
 4434 0004 00AF     		add	r7, sp, #0
 4435              	.LCFI334:
 4436              		.cfi_def_cfa_register 7
 4437 0006 7860     		str	r0, [r7, #4]
 4438 0008 3960     		str	r1, [r7]
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 4439              		.loc 2 184 12
 4440 000a 7B68     		ldr	r3, [r7, #4]
 4441 000c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
ARM GAS  /tmp/ccSXOI3d.s 			page 164


 4442              		.loc 2 184 2
 4443 000e 002B     		cmp	r3, #0
 4444 0010 15D0     		beq	.L179
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 4445              		.loc 2 184 34 discriminator 1
 4446 0012 3B68     		ldr	r3, [r7]
 4447 0014 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 4448              		.loc 2 184 23 discriminator 1
 4449 0016 002B     		cmp	r3, #0
 4450 0018 11D0     		beq	.L179
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 4451              		.loc 2 185 30
 4452 001a 3868     		ldr	r0, [r7]
 4453 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 4454 0020 0346     		mov	r3, r0
 4455 0022 1846     		mov	r0, r3
 4456 0024 FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 4457 0028 0446     		mov	r4, r0
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 4458              		.loc 2 185 16
 4459 002a 7868     		ldr	r0, [r7, #4]
 4460 002c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 4461 0030 0346     		mov	r3, r0
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 4462              		.loc 2 185 19
 4463 0032 2146     		mov	r1, r4
 4464 0034 1846     		mov	r0, r3
 4465 0036 FFF7FEFF 		bl	_ZNSt4pairIffEaSEOS0_
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 4466              		.loc 2 185 4
 4467 003a 00BF     		nop
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4468              		.loc 2 193 7
 4469 003c 13E0     		b	.L182
 4470              	.L179:
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 4471              		.loc 2 188 18
 4472 003e 3B68     		ldr	r3, [r7]
 4473 0040 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 4474              		.loc 2 188 6
 4475 0042 002B     		cmp	r3, #0
 4476 0044 0CD0     		beq	.L181
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 4477              		.loc 2 189 36
 4478 0046 3868     		ldr	r0, [r7]
 4479 0048 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 4480 004c 0346     		mov	r3, r0
 4481 004e 1846     		mov	r0, r3
 4482 0050 FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 4483 0054 0346     		mov	r3, r0
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 4484              		.loc 2 189 26
 4485 0056 1946     		mov	r1, r3
 4486 0058 7868     		ldr	r0, [r7, #4]
 4487 005a FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_
ARM GAS  /tmp/ccSXOI3d.s 			page 165


 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4488              		.loc 2 193 7
 4489 005e 02E0     		b	.L182
 4490              	.L181:
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 4491              		.loc 2 191 22
 4492 0060 7868     		ldr	r0, [r7, #4]
 4493 0062 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv
 4494              	.L182:
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4495              		.loc 2 193 7
 4496 0066 00BF     		nop
 4497 0068 0C37     		adds	r7, r7, #12
 4498              	.LCFI335:
 4499              		.cfi_def_cfa_offset 12
 4500 006a BD46     		mov	sp, r7
 4501              	.LCFI336:
 4502              		.cfi_def_cfa_register 13
 4503              		@ sp needed
 4504 006c 90BD     		pop	{r4, r7, pc}
 4505              		.cfi_endproc
 4506              	.LFE3571:
 4508              		.section	.text._ZN9InputPortIfE7presentEv,"axG",%progbits,_ZN9InputPortIfE7presentEv,comdat
 4509              		.align	1
 4510              		.weak	_ZN9InputPortIfE7presentEv
 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv4-sp-d16
 4516              	_ZN9InputPortIfE7presentEv:
 4517              	.LFB3572:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 4518              		.loc 15 137 22
 4519              		.cfi_startproc
 4520              		@ args = 0, pretend = 0, frame = 16
 4521              		@ frame_needed = 1, uses_anonymous_args = 0
 4522 0000 B0B5     		push	{r4, r5, r7, lr}
 4523              	.LCFI337:
 4524              		.cfi_def_cfa_offset 16
 4525              		.cfi_offset 4, -16
 4526              		.cfi_offset 5, -12
 4527              		.cfi_offset 7, -8
 4528              		.cfi_offset 14, -4
 4529 0002 84B0     		sub	sp, sp, #16
 4530              	.LCFI338:
 4531              		.cfi_def_cfa_offset 32
 4532 0004 00AF     		add	r7, sp, #0
 4533              	.LCFI339:
 4534              		.cfi_def_cfa_register 7
 4535 0006 7860     		str	r0, [r7, #4]
 4536 0008 3960     		str	r1, [r7]
 4537              	.LBB36:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 4538              		.loc 15 138 27
 4539 000a 3B68     		ldr	r3, [r7]
 4540 000c 1846     		mov	r0, r3
 4541 000e FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
ARM GAS  /tmp/ccSXOI3d.s 			page 166


 4542 0012 0346     		mov	r3, r0
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 4543              		.loc 15 138 30
 4544 0014 022B     		cmp	r3, #2
 4545 0016 0CBF     		ite	eq
 4546 0018 0123     		moveq	r3, #1
 4547 001a 0023     		movne	r3, #0
 4548 001c DBB2     		uxtb	r3, r3
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 4549              		.loc 15 138 9
 4550 001e 002B     		cmp	r3, #0
 4551 0020 14D0     		beq	.L184
 4552              	.LBB37:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 4553              		.loc 15 139 46
 4554 0022 3B68     		ldr	r3, [r7]
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 4555              		.loc 15 139 45
 4556 0024 1846     		mov	r0, r3
 4557 0026 FFF7FEFF 		bl	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 4558 002a 0346     		mov	r3, r0
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 4559              		.loc 15 139 28
 4560 002c 1B68     		ldr	r3, [r3]
 4561 002e BB60     		str	r3, [r7, #8]
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 4562              		.loc 15 140 48
 4563 0030 BB68     		ldr	r3, [r7, #8]
 4564 0032 002B     		cmp	r3, #0
 4565 0034 05D0     		beq	.L185
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 4566              		.loc 15 140 38 discriminator 1
 4567 0036 7B68     		ldr	r3, [r7, #4]
 4568 0038 B968     		ldr	r1, [r7, #8]
 4569 003a 1846     		mov	r0, r3
 4570 003c FFF7FEFF 		bl	_ZN10OutputPortIfE7presentEv
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 4571              		.loc 15 140 48 discriminator 1
 4572 0040 2EE0     		b	.L187
 4573              	.L185:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 4574              		.loc 15 140 48 is_stmt 0 discriminator 2
 4575 0042 2946     		mov	r1, r5
 4576 0044 7868     		ldr	r0, [r7, #4]
 4577 0046 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 4578 004a 29E0     		b	.L187
 4579              	.L184:
 4580              	.LBE37:
 4581              	.LBB38:
 4582              	.LBB39:
 141:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 4583              		.loc 15 141 34 is_stmt 1
 4584 004c 3B68     		ldr	r3, [r7]
 4585 004e 1846     		mov	r0, r3
 4586 0050 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 4587 0054 0346     		mov	r3, r0
 141:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
ARM GAS  /tmp/ccSXOI3d.s 			page 167


 4588              		.loc 15 141 37
 4589 0056 012B     		cmp	r3, #1
 4590 0058 0CBF     		ite	eq
 4591 005a 0123     		moveq	r3, #1
 4592 005c 0023     		movne	r3, #0
 4593 005e DBB2     		uxtb	r3, r3
 141:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 4594              		.loc 15 141 16
 4595 0060 002B     		cmp	r3, #0
 4596 0062 14D0     		beq	.L188
 4597              	.LBB40:
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 4598              		.loc 15 142 34
 4599 0064 3B68     		ldr	r3, [r7]
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 4600              		.loc 15 142 33
 4601 0066 1846     		mov	r0, r3
 4602 0068 FFF7FEFF 		bl	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 4603 006c 0346     		mov	r3, r0
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 4604              		.loc 15 142 16
 4605 006e 1B68     		ldr	r3, [r3]
 4606 0070 FB60     		str	r3, [r7, #12]
 143:Inc/component.hpp ****         } else {
 4607              		.loc 15 143 58
 4608 0072 FB68     		ldr	r3, [r7, #12]
 4609 0074 002B     		cmp	r3, #0
 4610 0076 05D0     		beq	.L189
 143:Inc/component.hpp ****         } else {
 4611              		.loc 15 143 44 discriminator 1
 4612 0078 7B68     		ldr	r3, [r7, #4]
 4613 007a F968     		ldr	r1, [r7, #12]
 4614 007c 1846     		mov	r0, r3
 4615 007e FFF7FEFF 		bl	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
 143:Inc/component.hpp ****         } else {
 4616              		.loc 15 143 58 discriminator 1
 4617 0082 0DE0     		b	.L187
 4618              	.L189:
 143:Inc/component.hpp ****         } else {
 4619              		.loc 15 143 58 is_stmt 0 discriminator 2
 4620 0084 2146     		mov	r1, r4
 4621 0086 7868     		ldr	r0, [r7, #4]
 4622 0088 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 4623 008c 08E0     		b	.L187
 4624              	.L188:
 4625              	.LBE40:
 145:Inc/component.hpp ****         }
 4626              		.loc 15 145 32 is_stmt 1
 4627 008e 3B68     		ldr	r3, [r7]
 145:Inc/component.hpp ****         }
 4628              		.loc 15 145 31
 4629 0090 1846     		mov	r0, r3
 4630 0092 FFF7FEFF 		bl	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 4631 0096 0346     		mov	r3, r0
 145:Inc/component.hpp ****         }
 4632              		.loc 15 145 40
 4633 0098 1946     		mov	r1, r3
ARM GAS  /tmp/ccSXOI3d.s 			page 168


 4634 009a 7868     		ldr	r0, [r7, #4]
 4635 009c FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 4636              	.L187:
 4637              	.LBE39:
 4638              	.LBE38:
 4639              	.LBE36:
 4640              		.loc 15 147 5 discriminator 1
 4641 00a0 7868     		ldr	r0, [r7, #4]
 4642 00a2 1037     		adds	r7, r7, #16
 4643              	.LCFI340:
 4644              		.cfi_def_cfa_offset 16
 4645 00a4 BD46     		mov	sp, r7
 4646              	.LCFI341:
 4647              		.cfi_def_cfa_register 13
 4648              		@ sp needed
 4649 00a6 B0BD     		pop	{r4, r5, r7, pc}
 4650              		.cfi_endproc
 4651              	.LFE3572:
 4653              		.section	.text._ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_
 4654              		.align	1
 4655              		.weak	_ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 4656              		.syntax unified
 4657              		.thumb
 4658              		.thumb_func
 4659              		.fpu fpv4-sp-d16
 4661              	_ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:
 4662              	.LFB3611:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4663              		.loc 2 434 22
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 8
 4666              		@ frame_needed = 1, uses_anonymous_args = 0
 4667              		@ link register save eliminated.
 4668 0000 80B4     		push	{r7}
 4669              	.LCFI342:
 4670              		.cfi_def_cfa_offset 4
 4671              		.cfi_offset 7, -4
 4672 0002 83B0     		sub	sp, sp, #12
 4673              	.LCFI343:
 4674              		.cfi_def_cfa_offset 16
 4675 0004 00AF     		add	r7, sp, #0
 4676              	.LCFI344:
 4677              		.cfi_def_cfa_register 7
 4678 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4679              		.loc 2 435 58
 4680 0008 7B68     		ldr	r3, [r7, #4]
 4681 000a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4682              		.loc 2 435 70
 4683 000c 1846     		mov	r0, r3
 4684 000e 0C37     		adds	r7, r7, #12
 4685              	.LCFI345:
 4686              		.cfi_def_cfa_offset 4
 4687 0010 BD46     		mov	sp, r7
 4688              	.LCFI346:
 4689              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccSXOI3d.s 			page 169


 4690              		@ sp needed
 4691 0012 5DF8047B 		ldr	r7, [sp], #4
 4692              	.LCFI347:
 4693              		.cfi_restore 7
 4694              		.cfi_def_cfa_offset 0
 4695 0016 7047     		bx	lr
 4696              		.cfi_endproc
 4697              	.LFE3611:
 4699              		.section	.text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE,"axG",%progbits,_ZSt7forwardIR
 4700              		.align	1
 4701              		.weak	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 4702              		.syntax unified
 4703              		.thumb
 4704              		.thumb_func
 4705              		.fpu fpv4-sp-d16
 4707              	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:
 4708              	.LFB3612:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 4709              		.loc 12 76 5
 4710              		.cfi_startproc
 4711              		@ args = 0, pretend = 0, frame = 8
 4712              		@ frame_needed = 1, uses_anonymous_args = 0
 4713              		@ link register save eliminated.
 4714 0000 80B4     		push	{r7}
 4715              	.LCFI348:
 4716              		.cfi_def_cfa_offset 4
 4717              		.cfi_offset 7, -4
 4718 0002 83B0     		sub	sp, sp, #12
 4719              	.LCFI349:
 4720              		.cfi_def_cfa_offset 16
 4721 0004 00AF     		add	r7, sp, #0
 4722              	.LCFI350:
 4723              		.cfi_def_cfa_register 7
 4724 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 4725              		.loc 12 77 36
 4726 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 4727              		.loc 12 77 39
 4728 000a 1846     		mov	r0, r3
 4729 000c 0C37     		adds	r7, r7, #12
 4730              	.LCFI351:
 4731              		.cfi_def_cfa_offset 4
 4732 000e BD46     		mov	sp, r7
 4733              	.LCFI352:
 4734              		.cfi_def_cfa_register 13
 4735              		@ sp needed
 4736 0010 5DF8047B 		ldr	r7, [sp], #4
 4737              	.LCFI353:
 4738              		.cfi_restore 7
 4739              		.cfi_def_cfa_offset 0
 4740 0014 7047     		bx	lr
 4741              		.cfi_endproc
 4742              	.LFE3612:
 4744              		.section	.text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_ZSt7
 4745              		.align	1
 4746              		.weak	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
ARM GAS  /tmp/ccSXOI3d.s 			page 170


 4747              		.syntax unified
 4748              		.thumb
 4749              		.thumb_func
 4750              		.fpu fpv4-sp-d16
 4752              	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:
 4753              	.LFB3613:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 4754              		.loc 12 76 5
 4755              		.cfi_startproc
 4756              		@ args = 0, pretend = 0, frame = 8
 4757              		@ frame_needed = 1, uses_anonymous_args = 0
 4758              		@ link register save eliminated.
 4759 0000 80B4     		push	{r7}
 4760              	.LCFI354:
 4761              		.cfi_def_cfa_offset 4
 4762              		.cfi_offset 7, -4
 4763 0002 83B0     		sub	sp, sp, #12
 4764              	.LCFI355:
 4765              		.cfi_def_cfa_offset 16
 4766 0004 00AF     		add	r7, sp, #0
 4767              	.LCFI356:
 4768              		.cfi_def_cfa_register 7
 4769 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 4770              		.loc 12 77 36
 4771 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 4772              		.loc 12 77 39
 4773 000a 1846     		mov	r0, r3
 4774 000c 0C37     		adds	r7, r7, #12
 4775              	.LCFI357:
 4776              		.cfi_def_cfa_offset 4
 4777 000e BD46     		mov	sp, r7
 4778              	.LCFI358:
 4779              		.cfi_def_cfa_register 13
 4780              		@ sp needed
 4781 0010 5DF8047B 		ldr	r7, [sp], #4
 4782              	.LCFI359:
 4783              		.cfi_restore 7
 4784              		.cfi_def_cfa_offset 0
 4785 0014 7047     		bx	lr
 4786              		.cfi_endproc
 4787              	.LFE3613:
 4789              		.section	.text._ZNSt4pairIffEaSEOS0_,"axG",%progbits,_ZNSt4pairIffEaSEOS0_,comdat
 4790              		.align	1
 4791              		.weak	_ZNSt4pairIffEaSEOS0_
 4792              		.syntax unified
 4793              		.thumb
 4794              		.thumb_func
 4795              		.fpu fpv4-sp-d16
 4797              	_ZNSt4pairIffEaSEOS0_:
 4798              	.LFB3614:
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
ARM GAS  /tmp/ccSXOI3d.s 			page 171


 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 4799              		.loc 14 401 7
 4800              		.cfi_startproc
 4801              		@ args = 0, pretend = 0, frame = 8
 4802              		@ frame_needed = 1, uses_anonymous_args = 0
 4803 0000 80B5     		push	{r7, lr}
 4804              	.LCFI360:
 4805              		.cfi_def_cfa_offset 8
 4806              		.cfi_offset 7, -8
 4807              		.cfi_offset 14, -4
 4808 0002 82B0     		sub	sp, sp, #8
 4809              	.LCFI361:
 4810              		.cfi_def_cfa_offset 16
 4811 0004 00AF     		add	r7, sp, #0
 4812              	.LCFI362:
ARM GAS  /tmp/ccSXOI3d.s 			page 172


 4813              		.cfi_def_cfa_register 7
 4814 0006 7860     		str	r0, [r7, #4]
 4815 0008 3960     		str	r1, [r7]
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 4816              		.loc 14 408 39
 4817 000a 3B68     		ldr	r3, [r7]
 4818              		.loc 14 408 34
 4819 000c 1846     		mov	r0, r3
 4820 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 4821 0012 0346     		mov	r3, r0
 4822              		.loc 14 408 8
 4823 0014 1A68     		ldr	r2, [r3]	@ float
 4824 0016 7B68     		ldr	r3, [r7, #4]
 4825 0018 1A60     		str	r2, [r3]	@ float
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 4826              		.loc 14 409 41
 4827 001a 3B68     		ldr	r3, [r7]
 4828 001c 0433     		adds	r3, r3, #4
 4829              		.loc 14 409 36
 4830 001e 1846     		mov	r0, r3
 4831 0020 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 4832 0024 0346     		mov	r3, r0
 4833              		.loc 14 409 9
 4834 0026 1A68     		ldr	r2, [r3]	@ float
 4835 0028 7B68     		ldr	r3, [r7, #4]
 4836 002a 5A60     		str	r2, [r3, #4]	@ float
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 4837              		.loc 14 410 10
 4838 002c 7B68     		ldr	r3, [r7, #4]
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 4839              		.loc 14 411 7
 4840 002e 1846     		mov	r0, r3
 4841 0030 0837     		adds	r7, r7, #8
 4842              	.LCFI363:
 4843              		.cfi_def_cfa_offset 8
 4844 0032 BD46     		mov	sp, r7
 4845              	.LCFI364:
 4846              		.cfi_def_cfa_register 13
 4847              		@ sp needed
 4848 0034 80BD     		pop	{r7, pc}
 4849              		.cfi_endproc
 4850              	.LFE3614:
 4852              		.section	.text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_construc
 4853              		.align	1
 4854              		.weak	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEE
 4855              		.syntax unified
 4856              		.thumb
 4857              		.thumb_func
 4858              		.fpu fpv4-sp-d16
 4860              	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:
 4861              	.LFB3615:
ARM GAS  /tmp/ccSXOI3d.s 			page 173


 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4862              		.loc 2 416 2
 4863              		.cfi_startproc
 4864              		@ args = 0, pretend = 0, frame = 8
 4865              		@ frame_needed = 1, uses_anonymous_args = 0
 4866 0000 90B5     		push	{r4, r7, lr}
 4867              	.LCFI365:
 4868              		.cfi_def_cfa_offset 12
 4869              		.cfi_offset 4, -12
 4870              		.cfi_offset 7, -8
 4871              		.cfi_offset 14, -4
 4872 0002 83B0     		sub	sp, sp, #12
 4873              	.LCFI366:
 4874              		.cfi_def_cfa_offset 24
 4875 0004 00AF     		add	r7, sp, #0
 4876              	.LCFI367:
 4877              		.cfi_def_cfa_register 7
 4878 0006 7860     		str	r0, [r7, #4]
 4879 0008 3960     		str	r1, [r7]
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 4880              		.loc 2 421 38
 4881 000a 3868     		ldr	r0, [r7]
 4882 000c FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 4883 0010 0446     		mov	r4, r0
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 4884              		.loc 2 420 60
 4885 0012 7B68     		ldr	r3, [r7, #4]
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 4886              		.loc 2 420 23
 4887 0014 1846     		mov	r0, r3
 4888 0016 FFF7FEFF 		bl	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 4889 001a 0346     		mov	r3, r0
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 4890              		.loc 2 419 4
 4891 001c 1946     		mov	r1, r3
 4892 001e 0820     		movs	r0, #8
 4893 0020 FFF7FEFF 		bl	_ZnwjPv
 4894 0024 0346     		mov	r3, r0
 4895 0026 2246     		mov	r2, r4
 4896 0028 92E80300 		ldm	r2, {r0, r1}
 4897 002c 83E80300 		stm	r3, {r0, r1}
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 4898              		.loc 2 422 51
 4899 0030 7B68     		ldr	r3, [r7, #4]
 4900 0032 0122     		movs	r2, #1
 4901 0034 1A72     		strb	r2, [r3, #8]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4902              		.loc 2 423 2
 4903 0036 00BF     		nop
 4904 0038 0C37     		adds	r7, r7, #12
 4905              	.LCFI368:
 4906              		.cfi_def_cfa_offset 12
 4907 003a BD46     		mov	sp, r7
 4908              	.LCFI369:
 4909              		.cfi_def_cfa_register 13
 4910              		@ sp needed
 4911 003c 90BD     		pop	{r4, r7, pc}
ARM GAS  /tmp/ccSXOI3d.s 			page 174


 4912              		.cfi_endproc
 4913              	.LFE3615:
 4915              		.section	.text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv,"axG",%progbi
 4916              		.align	1
 4917              		.weak	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
 4918              		.syntax unified
 4919              		.thumb
 4920              		.thumb_func
 4921              		.fpu fpv4-sp-d16
 4923              	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:
 4924              	.LFB3616:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 4925              		.loc 2 431 7
 4926              		.cfi_startproc
 4927              		@ args = 0, pretend = 0, frame = 8
 4928              		@ frame_needed = 1, uses_anonymous_args = 0
 4929 0000 80B5     		push	{r7, lr}
 4930              	.LCFI370:
 4931              		.cfi_def_cfa_offset 8
 4932              		.cfi_offset 7, -8
 4933              		.cfi_offset 14, -4
 4934 0002 82B0     		sub	sp, sp, #8
 4935              	.LCFI371:
 4936              		.cfi_def_cfa_offset 16
 4937 0004 00AF     		add	r7, sp, #0
 4938              	.LCFI372:
 4939              		.cfi_def_cfa_register 7
 4940 0006 7860     		str	r0, [r7, #4]
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4941              		.loc 2 432 53
 4942 0008 7B68     		ldr	r3, [r7, #4]
 4943 000a 1846     		mov	r0, r3
 4944 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_M_resetEv
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4945              		.loc 2 432 57
 4946 0010 00BF     		nop
 4947 0012 0837     		adds	r7, r7, #8
 4948              	.LCFI373:
 4949              		.cfi_def_cfa_offset 8
 4950 0014 BD46     		mov	sp, r7
 4951              	.LCFI374:
 4952              		.cfi_def_cfa_register 13
 4953              		@ sp needed
 4954 0016 80BD     		pop	{r7, pc}
 4955              		.cfi_endproc
 4956              	.LFE3616:
 4958              		.section	.text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv,"
 4959              		.align	1
 4960              		.weak	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv
 4961              		.syntax unified
 4962              		.thumb
 4963              		.thumb_func
 4964              		.fpu fpv4-sp-d16
 4966              	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv:
 4967              	.LFB3617:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 4968              		.loc 2 431 7
ARM GAS  /tmp/ccSXOI3d.s 			page 175


 4969              		.cfi_startproc
 4970              		@ args = 0, pretend = 0, frame = 8
 4971              		@ frame_needed = 1, uses_anonymous_args = 0
 4972 0000 80B5     		push	{r7, lr}
 4973              	.LCFI375:
 4974              		.cfi_def_cfa_offset 8
 4975              		.cfi_offset 7, -8
 4976              		.cfi_offset 14, -4
 4977 0002 82B0     		sub	sp, sp, #8
 4978              	.LCFI376:
 4979              		.cfi_def_cfa_offset 16
 4980 0004 00AF     		add	r7, sp, #0
 4981              	.LCFI377:
 4982              		.cfi_def_cfa_register 7
 4983 0006 7860     		str	r0, [r7, #4]
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4984              		.loc 2 432 53
 4985 0008 7B68     		ldr	r3, [r7, #4]
 4986 000a 1846     		mov	r0, r3
 4987 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4988              		.loc 2 432 57
 4989 0010 00BF     		nop
 4990 0012 0837     		adds	r7, r7, #8
 4991              	.LCFI378:
 4992              		.cfi_def_cfa_offset 8
 4993 0014 BD46     		mov	sp, r7
 4994              	.LCFI379:
 4995              		.cfi_def_cfa_register 13
 4996              		@ sp needed
 4997 0016 80BD     		pop	{r7, pc}
 4998              		.cfi_endproc
 4999              	.LFE3617:
 5001              		.section	.text._ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv,"axG",%progbits,_ZNKSt22_Optio
 5002              		.align	1
 5003              		.weak	_ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 5004              		.syntax unified
 5005              		.thumb
 5006              		.thumb_func
 5007              		.fpu fpv4-sp-d16
 5009              	_ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:
 5010              	.LFB3618:
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 5011              		.loc 2 272 7
 5012              		.cfi_startproc
 5013              		@ args = 0, pretend = 0, frame = 8
 5014              		@ frame_needed = 1, uses_anonymous_args = 0
 5015              		@ link register save eliminated.
 5016 0000 80B4     		push	{r7}
 5017              	.LCFI380:
 5018              		.cfi_def_cfa_offset 4
 5019              		.cfi_offset 7, -4
 5020 0002 83B0     		sub	sp, sp, #12
 5021              	.LCFI381:
 5022              		.cfi_def_cfa_offset 16
 5023 0004 00AF     		add	r7, sp, #0
 5024              	.LCFI382:
ARM GAS  /tmp/ccSXOI3d.s 			page 176


 5025              		.cfi_def_cfa_register 7
 5026 0006 7860     		str	r0, [r7, #4]
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5027              		.loc 2 273 33
 5028 0008 7B68     		ldr	r3, [r7, #4]
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5029              		.loc 2 273 43
 5030 000a 1846     		mov	r0, r3
 5031 000c 0C37     		adds	r7, r7, #12
 5032              	.LCFI383:
 5033              		.cfi_def_cfa_offset 4
 5034 000e BD46     		mov	sp, r7
 5035              	.LCFI384:
 5036              		.cfi_def_cfa_register 13
 5037              		@ sp needed
 5038 0010 5DF8047B 		ldr	r7, [sp], #4
 5039              	.LCFI385:
 5040              		.cfi_restore 7
 5041              		.cfi_def_cfa_offset 0
 5042 0014 7047     		bx	lr
 5043              		.cfi_endproc
 5044              	.LFE3618:
 5046              		.section	.text._ZNSt4pairIffEaSERKS0_,"axG",%progbits,_ZNSt4pairIffEaSERKS0_,comdat
 5047              		.align	1
 5048              		.weak	_ZNSt4pairIffEaSERKS0_
 5049              		.syntax unified
 5050              		.thumb
 5051              		.thumb_func
 5052              		.fpu fpv4-sp-d16
 5054              	_ZNSt4pairIffEaSERKS0_:
 5055              	.LFB3619:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 5056              		.loc 14 390 7
 5057              		.cfi_startproc
 5058              		@ args = 0, pretend = 0, frame = 8
 5059              		@ frame_needed = 1, uses_anonymous_args = 0
 5060              		@ link register save eliminated.
 5061 0000 80B4     		push	{r7}
 5062              	.LCFI386:
 5063              		.cfi_def_cfa_offset 4
 5064              		.cfi_offset 7, -4
 5065 0002 83B0     		sub	sp, sp, #12
 5066              	.LCFI387:
 5067              		.cfi_def_cfa_offset 16
 5068 0004 00AF     		add	r7, sp, #0
 5069              	.LCFI388:
 5070              		.cfi_def_cfa_register 7
 5071 0006 7860     		str	r0, [r7, #4]
 5072 0008 3960     		str	r1, [r7]
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 5073              		.loc 14 395 14
 5074 000a 3B68     		ldr	r3, [r7]
 5075 000c 1A68     		ldr	r2, [r3]	@ float
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 5076              		.loc 14 395 8
 5077 000e 7B68     		ldr	r3, [r7, #4]
 5078 0010 1A60     		str	r2, [r3]	@ float
ARM GAS  /tmp/ccSXOI3d.s 			page 177


 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 5079              		.loc 14 396 15
 5080 0012 3B68     		ldr	r3, [r7]
 5081 0014 5A68     		ldr	r2, [r3, #4]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 5082              		.loc 14 396 9
 5083 0016 7B68     		ldr	r3, [r7, #4]
 5084 0018 5A60     		str	r2, [r3, #4]	@ float
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 5085              		.loc 14 397 10
 5086 001a 7B68     		ldr	r3, [r7, #4]
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 5087              		.loc 14 398 7
 5088 001c 1846     		mov	r0, r3
 5089 001e 0C37     		adds	r7, r7, #12
 5090              	.LCFI389:
 5091              		.cfi_def_cfa_offset 4
 5092 0020 BD46     		mov	sp, r7
 5093              	.LCFI390:
 5094              		.cfi_def_cfa_register 13
 5095              		@ sp needed
 5096 0022 5DF8047B 		ldr	r7, [sp], #4
 5097              	.LCFI391:
 5098              		.cfi_restore 7
 5099              		.cfi_def_cfa_offset 0
 5100 0026 7047     		bx	lr
 5101              		.cfi_endproc
 5102              	.LFE3619:
 5104              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_,"axG",%pro
 5105              		.align	1
 5106              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_
 5107              		.syntax unified
 5108              		.thumb
 5109              		.thumb_func
 5110              		.fpu fpv4-sp-d16
 5112              	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_:
 5113              	.LFB3620:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 5114              		.loc 2 248 9
 5115              		.cfi_startproc
 5116              		@ args = 0, pretend = 0, frame = 8
 5117              		@ frame_needed = 1, uses_anonymous_args = 0
 5118 0000 90B5     		push	{r4, r7, lr}
 5119              	.LCFI392:
 5120              		.cfi_def_cfa_offset 12
 5121              		.cfi_offset 4, -12
 5122              		.cfi_offset 7, -8
 5123              		.cfi_offset 14, -4
 5124 0002 83B0     		sub	sp, sp, #12
 5125              	.LCFI393:
 5126              		.cfi_def_cfa_offset 24
 5127 0004 00AF     		add	r7, sp, #0
 5128              	.LCFI394:
 5129              		.cfi_def_cfa_register 7
 5130 0006 7860     		str	r0, [r7, #4]
 5131 0008 3960     		str	r1, [r7]
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
ARM GAS  /tmp/ccSXOI3d.s 			page 178


 5132              		.loc 2 252 45
 5133 000a 3868     		ldr	r0, [r7]
 5134 000c FFF7FEFF 		bl	_ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE
 5135 0010 0446     		mov	r4, r0
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 5136              		.loc 2 251 50
 5137 0012 7B68     		ldr	r3, [r7, #4]
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 5138              		.loc 2 251 43
 5139 0014 1846     		mov	r0, r3
 5140 0016 FFF7FEFF 		bl	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 5141 001a 0346     		mov	r3, r0
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 5142              		.loc 2 251 11
 5143 001c 1946     		mov	r1, r3
 5144 001e 0820     		movs	r0, #8
 5145 0020 FFF7FEFF 		bl	_ZnwjPv
 5146 0024 0346     		mov	r3, r0
 5147 0026 2246     		mov	r2, r4
 5148 0028 92E80300 		ldm	r2, {r0, r1}
 5149 002c 83E80300 		stm	r3, {r0, r1}
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 5150              		.loc 2 253 28
 5151 0030 7B68     		ldr	r3, [r7, #4]
 5152 0032 0122     		movs	r2, #1
 5153 0034 1A72     		strb	r2, [r3, #8]
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5154              		.loc 2 254 9
 5155 0036 00BF     		nop
 5156 0038 0C37     		adds	r7, r7, #12
 5157              	.LCFI395:
 5158              		.cfi_def_cfa_offset 12
 5159 003a BD46     		mov	sp, r7
 5160              	.LCFI396:
 5161              		.cfi_def_cfa_register 13
 5162              		@ sp needed
 5163 003c 90BD     		pop	{r4, r7, pc}
 5164              		.cfi_endproc
 5165              	.LFE3620:
 5167              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv,"axG",%progbits,_ZNSt22_Optio
 5168              		.align	1
 5169              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv
 5170              		.syntax unified
 5171              		.thumb
 5172              		.thumb_func
 5173              		.fpu fpv4-sp-d16
 5175              	_ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv:
 5176              	.LFB3621:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 5177              		.loc 2 277 7
 5178              		.cfi_startproc
 5179              		@ args = 0, pretend = 0, frame = 8
 5180              		@ frame_needed = 1, uses_anonymous_args = 0
 5181 0000 80B5     		push	{r7, lr}
 5182              	.LCFI397:
 5183              		.cfi_def_cfa_offset 8
 5184              		.cfi_offset 7, -8
ARM GAS  /tmp/ccSXOI3d.s 			page 179


 5185              		.cfi_offset 14, -4
 5186 0002 82B0     		sub	sp, sp, #8
 5187              	.LCFI398:
 5188              		.cfi_def_cfa_offset 16
 5189 0004 00AF     		add	r7, sp, #0
 5190              	.LCFI399:
 5191              		.cfi_def_cfa_register 7
 5192 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 5193              		.loc 2 279 12
 5194 0008 7B68     		ldr	r3, [r7, #4]
 5195 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 5196              		.loc 2 279 2
 5197 000c 002B     		cmp	r3, #0
 5198 000e 02D0     		beq	.L209
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 5199              		.loc 2 280 14
 5200 0010 7868     		ldr	r0, [r7, #4]
 5201 0012 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv
 5202              	.L209:
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 5203              		.loc 2 281 7
 5204 0016 00BF     		nop
 5205 0018 0837     		adds	r7, r7, #8
 5206              	.LCFI400:
 5207              		.cfi_def_cfa_offset 8
 5208 001a BD46     		mov	sp, r7
 5209              	.LCFI401:
 5210              		.cfi_def_cfa_register 13
 5211              		@ sp needed
 5212 001c 80BD     		pop	{r7, pc}
 5213              		.cfi_endproc
 5214              	.LFE3621:
 5216              		.section	.text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv,"axG",%progbits
 5217              		.align	1
 5218              		.weak	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 5219              		.syntax unified
 5220              		.thumb
 5221              		.thumb_func
 5222              		.fpu fpv4-sp-d16
 5224              	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:
 5225              	.LFB3622:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 5226              		.loc 2 439 7
 5227              		.cfi_startproc
 5228              		@ args = 0, pretend = 0, frame = 8
 5229              		@ frame_needed = 1, uses_anonymous_args = 0
 5230 0000 80B5     		push	{r7, lr}
 5231              	.LCFI402:
 5232              		.cfi_def_cfa_offset 8
 5233              		.cfi_offset 7, -8
 5234              		.cfi_offset 14, -4
 5235 0002 82B0     		sub	sp, sp, #8
 5236              	.LCFI403:
 5237              		.cfi_def_cfa_offset 16
 5238 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 180


 5239              	.LCFI404:
 5240              		.cfi_def_cfa_register 7
 5241 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 5242              		.loc 2 442 51
 5243 0008 7B68     		ldr	r3, [r7, #4]
 5244 000a 1846     		mov	r0, r3
 5245 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 5246 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5247              		.loc 2 443 7
 5248 0012 1846     		mov	r0, r3
 5249 0014 0837     		adds	r7, r7, #8
 5250              	.LCFI405:
 5251              		.cfi_def_cfa_offset 8
 5252 0016 BD46     		mov	sp, r7
 5253              	.LCFI406:
 5254              		.cfi_def_cfa_register 13
 5255              		@ sp needed
 5256 0018 80BD     		pop	{r7, pc}
 5257              		.cfi_endproc
 5258              	.LFE3622:
 5260              		.section	.text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv,"axG",%progbits,_ZNKSt7
 5261              		.align	1
 5262              		.weak	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 5263              		.syntax unified
 5264              		.thumb
 5265              		.thumb_func
 5266              		.fpu fpv4-sp-d16
 5268              	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:
 5269              	.LFB3623:
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
ARM GAS  /tmp/ccSXOI3d.s 			page 181


1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
ARM GAS  /tmp/ccSXOI3d.s 			page 182


1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
ARM GAS  /tmp/ccSXOI3d.s 			page 183


1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
ARM GAS  /tmp/ccSXOI3d.s 			page 184


1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
ARM GAS  /tmp/ccSXOI3d.s 			page 185


1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
 5270              		.loc 3 1562 24
 5271              		.cfi_startproc
 5272              		@ args = 0, pretend = 0, frame = 8
 5273              		@ frame_needed = 1, uses_anonymous_args = 0
 5274              		@ link register save eliminated.
 5275 0000 80B4     		push	{r7}
 5276              	.LCFI407:
 5277              		.cfi_def_cfa_offset 4
 5278              		.cfi_offset 7, -4
 5279 0002 83B0     		sub	sp, sp, #12
 5280              	.LCFI408:
 5281              		.cfi_def_cfa_offset 16
 5282 0004 00AF     		add	r7, sp, #0
 5283              	.LCFI409:
 5284              		.cfi_def_cfa_register 7
 5285 0006 7860     		str	r0, [r7, #4]
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __index_type = typename _Base::__index_type;
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->_M_index;
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
 5286              		.loc 3 1568 45
 5287 0008 7B68     		ldr	r3, [r7, #4]
 5288 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5289              		.loc 3 1568 11
 5290 000c 5BB2     		sxtb	r3, r3
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 5291              		.loc 3 1571 7
 5292 000e 1846     		mov	r0, r3
 5293 0010 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccSXOI3d.s 			page 186


 5294              	.LCFI410:
 5295              		.cfi_def_cfa_offset 4
 5296 0012 BD46     		mov	sp, r7
 5297              	.LCFI411:
 5298              		.cfi_def_cfa_register 13
 5299              		@ sp needed
 5300 0014 5DF8047B 		ldr	r7, [sp], #4
 5301              	.LCFI412:
 5302              		.cfi_restore 7
 5303              		.cfi_def_cfa_offset 0
 5304 0018 7047     		bx	lr
 5305              		.cfi_endproc
 5306              	.LFE3623:
 5308              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEE
 5309              		.align	1
 5310              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16
 5311              		.syntax unified
 5312              		.thumb
 5313              		.thumb_func
 5314              		.fpu fpv4-sp-d16
 5316              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_plac
 5317              	.LFB3629:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 5318              		.loc 3 262 5
 5319              		.cfi_startproc
 5320              		@ args = 0, pretend = 0, frame = 8
 5321              		@ frame_needed = 1, uses_anonymous_args = 0
 5322 0000 80B5     		push	{r7, lr}
 5323              	.LCFI413:
 5324              		.cfi_def_cfa_offset 8
 5325              		.cfi_offset 7, -8
 5326              		.cfi_offset 14, -4
 5327 0002 82B0     		sub	sp, sp, #8
 5328              	.LCFI414:
 5329              		.cfi_def_cfa_offset 16
 5330 0004 00AF     		add	r7, sp, #0
 5331              	.LCFI415:
 5332              		.cfi_def_cfa_register 7
 5333 0006 3871     		strb	r0, [r7, #4]
 5334 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5335              		.loc 3 263 34
 5336 000a 3868     		ldr	r0, [r7]
 5337 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16r
 5338 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5339              		.loc 3 263 55
 5340 0012 1846     		mov	r0, r3
 5341 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
 5342 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5343              		.loc 3 263 59
 5344 001a 1846     		mov	r0, r3
 5345 001c 0837     		adds	r7, r7, #8
 5346              	.LCFI416:
 5347              		.cfi_def_cfa_offset 8
 5348 001e BD46     		mov	sp, r7
ARM GAS  /tmp/ccSXOI3d.s 			page 187


 5349              	.LCFI417:
 5350              		.cfi_def_cfa_register 13
 5351              		@ sp needed
 5352 0020 80BD     		pop	{r7, pc}
 5353              		.cfi_endproc
 5354              	.LFE3629:
 5356              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPor
 5357              		.align	1
 5358              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEE
 5359              		.syntax unified
 5360              		.thumb
 5361              		.thumb_func
 5362              		.fpu fpv4-sp-d16
 5364              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt1
 5365              	.LFB3628:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5366              		.loc 3 267 5
 5367              		.cfi_startproc
 5368              		@ args = 0, pretend = 0, frame = 8
 5369              		@ frame_needed = 1, uses_anonymous_args = 0
 5370 0000 90B5     		push	{r4, r7, lr}
 5371              	.LCFI418:
 5372              		.cfi_def_cfa_offset 12
 5373              		.cfi_offset 4, -12
 5374              		.cfi_offset 7, -8
 5375              		.cfi_offset 14, -4
 5376 0002 83B0     		sub	sp, sp, #12
 5377              	.LCFI419:
 5378              		.cfi_def_cfa_offset 24
 5379 0004 00AF     		add	r7, sp, #0
 5380              	.LCFI420:
 5381              		.cfi_def_cfa_register 7
 5382 0006 3871     		strb	r0, [r7, #4]
 5383 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5384              		.loc 3 270 30
 5385 000a 3868     		ldr	r0, [r7]
 5386 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNS
 5387 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 5388              		.loc 3 269 30
 5389 0012 1946     		mov	r1, r3
 5390 0014 2046     		mov	r0, r4
 5391 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_
 5392 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5393              		.loc 3 271 5
 5394 001c 1846     		mov	r0, r3
 5395 001e 0C37     		adds	r7, r7, #12
 5396              	.LCFI421:
 5397              		.cfi_def_cfa_offset 12
 5398 0020 BD46     		mov	sp, r7
 5399              	.LCFI422:
 5400              		.cfi_def_cfa_register 13
 5401              		@ sp needed
 5402 0022 90BD     		pop	{r4, r7, pc}
 5403              		.cfi_endproc
ARM GAS  /tmp/ccSXOI3d.s 			page 188


 5404              	.LFE3628:
 5406              		.section	.text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10Output
 5407              		.align	1
 5408              		.weak	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_E
 5409              		.syntax unified
 5410              		.thumb
 5411              		.thumb_func
 5412              		.fpu fpv4-sp-d16
 5414              	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDc
 5415              	.LFB3627:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5416              		.loc 3 267 5
 5417              		.cfi_startproc
 5418              		@ args = 0, pretend = 0, frame = 8
 5419              		@ frame_needed = 1, uses_anonymous_args = 0
 5420 0000 90B5     		push	{r4, r7, lr}
 5421              	.LCFI423:
 5422              		.cfi_def_cfa_offset 12
 5423              		.cfi_offset 4, -12
 5424              		.cfi_offset 7, -8
 5425              		.cfi_offset 14, -4
 5426 0002 83B0     		sub	sp, sp, #12
 5427              	.LCFI424:
 5428              		.cfi_def_cfa_offset 24
 5429 0004 00AF     		add	r7, sp, #0
 5430              	.LCFI425:
 5431              		.cfi_def_cfa_register 7
 5432 0006 3871     		strb	r0, [r7, #4]
 5433 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5434              		.loc 3 270 30
 5435 000a 3868     		ldr	r0, [r7]
 5436 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_
 5437 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 5438              		.loc 3 269 30
 5439 0012 1946     		mov	r1, r3
 5440 0014 2046     		mov	r0, r4
 5441 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEED
 5442 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5443              		.loc 3 271 5
 5444 001c 1846     		mov	r0, r3
 5445 001e 0C37     		adds	r7, r7, #12
 5446              	.LCFI426:
 5447              		.cfi_def_cfa_offset 12
 5448 0020 BD46     		mov	sp, r7
 5449              	.LCFI427:
 5450              		.cfi_def_cfa_register 13
 5451              		@ sp needed
 5452 0022 90BD     		pop	{r4, r7, pc}
 5453              		.cfi_endproc
 5454              	.LFE3627:
 5456              		.section	.text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEE
 5457              		.align	1
 5458              		.weak	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 5459              		.syntax unified
ARM GAS  /tmp/ccSXOI3d.s 			page 189


 5460              		.thumb
 5461              		.thumb_func
 5462              		.fpu fpv4-sp-d16
 5464              	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:
 5465              	.LFB3626:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5466              		.loc 3 276 5
 5467              		.cfi_startproc
 5468              		@ args = 0, pretend = 0, frame = 8
 5469              		@ frame_needed = 1, uses_anonymous_args = 0
 5470 0000 90B5     		push	{r4, r7, lr}
 5471              	.LCFI428:
 5472              		.cfi_def_cfa_offset 12
 5473              		.cfi_offset 4, -12
 5474              		.cfi_offset 7, -8
 5475              		.cfi_offset 14, -4
 5476 0002 83B0     		sub	sp, sp, #12
 5477              	.LCFI429:
 5478              		.cfi_def_cfa_offset 24
 5479 0004 00AF     		add	r7, sp, #0
 5480              	.LCFI430:
 5481              		.cfi_def_cfa_register 7
 5482 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5483              		.loc 3 279 32
 5484 0008 7868     		ldr	r0, [r7, #4]
 5485 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4ty
 5486 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 5487              		.loc 3 278 30
 5488 0010 1946     		mov	r1, r3
 5489 0012 2046     		mov	r0, r4
 5490 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEE
 5491 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5492              		.loc 3 280 5
 5493 001a 1846     		mov	r0, r3
 5494 001c 0C37     		adds	r7, r7, #12
 5495              	.LCFI431:
 5496              		.cfi_def_cfa_offset 12
 5497 001e BD46     		mov	sp, r7
 5498              	.LCFI432:
 5499              		.cfi_def_cfa_register 13
 5500              		@ sp needed
 5501 0020 90BD     		pop	{r4, r7, pc}
 5502              		.cfi_endproc
 5503              	.LFE3626:
 5505              		.section	.text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7v
 5506              		.align	1
 5507              		.weak	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJD
 5508              		.syntax unified
 5509              		.thumb
 5510              		.thumb_func
 5511              		.fpu fpv4-sp-d16
 5513              	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE
 5514              	.LFB3625:
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 190


1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       swap(variant& __rhs)
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__raw_idx_visit(
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->index() == __rhs_index)
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    auto& __this_mem =
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      std::get<__rhs_index>(*this);
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using std::swap;
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    swap(__this_mem, __rhs_mem);
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs = std::move(*this);
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__tmp));
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__rhs_mem));
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs._M_reset();
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    __rhs = std::move(*this);
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    this->_M_reset();
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __rhs);
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Vp>
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr decltype(auto)
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 191


1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Vp>
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void*
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Tp> \
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr bool \
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      const variant<_Tp...>& __rhs);
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>& __v)
 5515              		.loc 3 1652 5
 5516              		.cfi_startproc
 5517              		@ args = 0, pretend = 0, frame = 8
 5518              		@ frame_needed = 1, uses_anonymous_args = 0
 5519 0000 80B5     		push	{r7, lr}
 5520              	.LCFI433:
 5521              		.cfi_def_cfa_offset 8
 5522              		.cfi_offset 7, -8
 5523              		.cfi_offset 14, -4
 5524 0002 82B0     		sub	sp, sp, #8
 5525              	.LCFI434:
 5526              		.cfi_def_cfa_offset 16
 5527 0004 00AF     		add	r7, sp, #0
 5528              	.LCFI435:
 5529              		.cfi_def_cfa_register 7
 5530 0006 7860     		str	r0, [r7, #4]
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__v.index() != _Np)
 5531              		.loc 3 1656 20
 5532 0008 7868     		ldr	r0, [r7, #4]
 5533 000a FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 5534 000e 0346     		mov	r3, r0
 5535              		.loc 3 1656 23
 5536 0010 022B     		cmp	r3, #2
 5537 0012 14BF     		ite	ne
 5538 0014 0123     		movne	r3, #1
 5539 0016 0023     		moveq	r3, #0
 5540 0018 DBB2     		uxtb	r3, r3
 5541              		.loc 3 1656 7
 5542 001a 002B     		cmp	r3, #0
 5543 001c 06D0     		beq	.L223
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
ARM GAS  /tmp/ccSXOI3d.s 			page 192


 5544              		.loc 3 1657 28
 5545 001e 7868     		ldr	r0, [r7, #4]
 5546 0020 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 5547 0024 0346     		mov	r3, r0
 5548 0026 1846     		mov	r0, r3
 5549 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 5550              	.L223:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 5551              		.loc 3 1658 45
 5552 002c 7868     		ldr	r0, [r7, #4]
 5553 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 5554 0032 0346     		mov	r3, r0
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5555              		.loc 3 1659 5
 5556 0034 1846     		mov	r0, r3
 5557 0036 0837     		adds	r7, r7, #8
 5558              	.LCFI436:
 5559              		.cfi_def_cfa_offset 8
 5560 0038 BD46     		mov	sp, r7
 5561              	.LCFI437:
 5562              		.cfi_def_cfa_register 13
 5563              		@ sp needed
 5564 003a 80BD     		pop	{r7, pc}
 5565              		.cfi_endproc
 5566              	.LFE3625:
 5568              		.section	.text._ZN10OutputPortISt4pairIffEE7presentEv,"axG",%progbits,_ZN10OutputPortISt4pairIffEE
 5569              		.align	1
 5570              		.weak	_ZN10OutputPortISt4pairIffEE7presentEv
 5571              		.syntax unified
 5572              		.thumb
 5573              		.thumb_func
 5574              		.fpu fpv4-sp-d16
 5576              	_ZN10OutputPortISt4pairIffEE7presentEv:
 5577              	.LFB3630:
  73:Inc/component.hpp ****         if (age_ == 0) {
 5578              		.loc 15 73 22
 5579              		.cfi_startproc
 5580              		@ args = 0, pretend = 0, frame = 8
 5581              		@ frame_needed = 1, uses_anonymous_args = 0
 5582 0000 80B5     		push	{r7, lr}
 5583              	.LCFI438:
 5584              		.cfi_def_cfa_offset 8
 5585              		.cfi_offset 7, -8
 5586              		.cfi_offset 14, -4
 5587 0002 82B0     		sub	sp, sp, #8
 5588              	.LCFI439:
 5589              		.cfi_def_cfa_offset 16
 5590 0004 00AF     		add	r7, sp, #0
 5591              	.LCFI440:
 5592              		.cfi_def_cfa_register 7
 5593 0006 7860     		str	r0, [r7, #4]
 5594 0008 3960     		str	r1, [r7]
  74:Inc/component.hpp ****             return content_;
 5595              		.loc 15 74 13
 5596 000a 3B68     		ldr	r3, [r7]
 5597 000c 1B68     		ldr	r3, [r3]
  74:Inc/component.hpp ****             return content_;
ARM GAS  /tmp/ccSXOI3d.s 			page 193


 5598              		.loc 15 74 9
 5599 000e 002B     		cmp	r3, #0
 5600 0010 06D1     		bne	.L226
  75:Inc/component.hpp ****         } else {
 5601              		.loc 15 75 20
 5602 0012 3B68     		ldr	r3, [r7]
 5603 0014 0433     		adds	r3, r3, #4
 5604 0016 1946     		mov	r1, r3
 5605 0018 7868     		ldr	r0, [r7, #4]
 5606 001a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 5607 001e 03E0     		b	.L227
 5608              	.L226:
  77:Inc/component.hpp ****         }
 5609              		.loc 15 77 25
 5610 0020 1146     		mov	r1, r2
 5611 0022 7868     		ldr	r0, [r7, #4]
 5612 0024 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 5613              	.L227:
  79:Inc/component.hpp **** 
 5614              		.loc 15 79 5
 5615 0028 7868     		ldr	r0, [r7, #4]
 5616 002a 0837     		adds	r7, r7, #8
 5617              	.LCFI441:
 5618              		.cfi_def_cfa_offset 8
 5619 002c BD46     		mov	sp, r7
 5620              	.LCFI442:
 5621              		.cfi_def_cfa_register 13
 5622              		@ sp needed
 5623 002e 80BD     		pop	{r7, pc}
 5624              		.cfi_endproc
 5625              	.LFE3630:
 5627              		.section	.text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t,"axG",%progbits,_ZNSt8optionalISt4pairIf
 5628              		.align	1
 5629              		.weak	_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
 5630              		.syntax unified
 5631              		.thumb
 5632              		.thumb_func
 5633              		.fpu fpv4-sp-d16
 5635              	_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:
 5636              	.LFB3632:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5637              		.loc 2 693 17
 5638              		.cfi_startproc
 5639              		@ args = 0, pretend = 0, frame = 8
 5640              		@ frame_needed = 1, uses_anonymous_args = 0
 5641 0000 80B5     		push	{r7, lr}
 5642              	.LCFI443:
 5643              		.cfi_def_cfa_offset 8
 5644              		.cfi_offset 7, -8
 5645              		.cfi_offset 14, -4
 5646 0002 82B0     		sub	sp, sp, #8
 5647              	.LCFI444:
 5648              		.cfi_def_cfa_offset 16
 5649 0004 00AF     		add	r7, sp, #0
 5650              	.LCFI445:
 5651              		.cfi_def_cfa_register 7
 5652 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 194


 5653 0008 3970     		strb	r1, [r7]
 5654              	.LBB41:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5655              		.loc 2 693 46
 5656 000a 7B68     		ldr	r3, [r7, #4]
 5657 000c 1846     		mov	r0, r3
 5658 000e FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
 5659              	.LBE41:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5660              		.loc 2 693 48
 5661 0012 7B68     		ldr	r3, [r7, #4]
 5662 0014 1846     		mov	r0, r3
 5663 0016 0837     		adds	r7, r7, #8
 5664              	.LCFI446:
 5665              		.cfi_def_cfa_offset 8
 5666 0018 BD46     		mov	sp, r7
 5667              	.LCFI447:
 5668              		.cfi_def_cfa_register 13
 5669              		@ sp needed
 5670 001a 80BD     		pop	{r7, pc}
 5671              		.cfi_endproc
 5672              	.LFE3632:
 5674              		.weak	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 5675              		.thumb_set _ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t,_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
 5676              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4
 5677              		.align	1
 5678              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDc
 5679              		.syntax unified
 5680              		.thumb
 5681              		.thumb_func
 5682              		.fpu fpv4-sp-d16
 5684              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_
 5685              	.LFB3637:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 5686              		.loc 3 262 5
 5687              		.cfi_startproc
 5688              		@ args = 0, pretend = 0, frame = 8
 5689              		@ frame_needed = 1, uses_anonymous_args = 0
 5690 0000 80B5     		push	{r7, lr}
 5691              	.LCFI448:
 5692              		.cfi_def_cfa_offset 8
 5693              		.cfi_offset 7, -8
 5694              		.cfi_offset 14, -4
 5695 0002 82B0     		sub	sp, sp, #8
 5696              	.LCFI449:
 5697              		.cfi_def_cfa_offset 16
 5698 0004 00AF     		add	r7, sp, #0
 5699              	.LCFI450:
 5700              		.cfi_def_cfa_register 7
 5701 0006 3871     		strb	r0, [r7, #4]
 5702 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5703              		.loc 3 263 34
 5704 000a 3868     		ldr	r0, [r7]
 5705 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNS
 5706 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 195


 5707              		.loc 3 263 55
 5708 0012 1846     		mov	r0, r3
 5709 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv
 5710 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5711              		.loc 3 263 59
 5712 001a 1846     		mov	r0, r3
 5713 001c 0837     		adds	r7, r7, #8
 5714              	.LCFI451:
 5715              		.cfi_def_cfa_offset 8
 5716 001e BD46     		mov	sp, r7
 5717              	.LCFI452:
 5718              		.cfi_def_cfa_register 13
 5719              		@ sp needed
 5720 0020 80BD     		pop	{r7, pc}
 5721              		.cfi_endproc
 5722              	.LFE3637:
 5724              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10Output
 5725              		.align	1
 5726              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_E
 5727              		.syntax unified
 5728              		.thumb
 5729              		.thumb_func
 5730              		.fpu fpv4-sp-d16
 5732              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDc
 5733              	.LFB3636:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5734              		.loc 3 267 5
 5735              		.cfi_startproc
 5736              		@ args = 0, pretend = 0, frame = 8
 5737              		@ frame_needed = 1, uses_anonymous_args = 0
 5738 0000 90B5     		push	{r4, r7, lr}
 5739              	.LCFI453:
 5740              		.cfi_def_cfa_offset 12
 5741              		.cfi_offset 4, -12
 5742              		.cfi_offset 7, -8
 5743              		.cfi_offset 14, -4
 5744 0002 83B0     		sub	sp, sp, #12
 5745              	.LCFI454:
 5746              		.cfi_def_cfa_offset 24
 5747 0004 00AF     		add	r7, sp, #0
 5748              	.LCFI455:
 5749              		.cfi_def_cfa_register 7
 5750 0006 3871     		strb	r0, [r7, #4]
 5751 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5752              		.loc 3 270 30
 5753 000a 3868     		ldr	r0, [r7]
 5754 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_
 5755 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 5756              		.loc 3 269 30
 5757 0012 1946     		mov	r1, r3
 5758 0014 2046     		mov	r0, r4
 5759 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt1
 5760 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 196


 5761              		.loc 3 271 5
 5762 001c 1846     		mov	r0, r3
 5763 001e 0C37     		adds	r7, r7, #12
 5764              	.LCFI456:
 5765              		.cfi_def_cfa_offset 12
 5766 0020 BD46     		mov	sp, r7
 5767              	.LCFI457:
 5768              		.cfi_def_cfa_register 13
 5769              		@ sp needed
 5770 0022 90BD     		pop	{r4, r7, pc}
 5771              		.cfi_endproc
 5772              	.LFE3636:
 5774              		.section	.text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEE
 5775              		.align	1
 5776              		.weak	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 5777              		.syntax unified
 5778              		.thumb
 5779              		.thumb_func
 5780              		.fpu fpv4-sp-d16
 5782              	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:
 5783              	.LFB3635:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5784              		.loc 3 276 5
 5785              		.cfi_startproc
 5786              		@ args = 0, pretend = 0, frame = 8
 5787              		@ frame_needed = 1, uses_anonymous_args = 0
 5788 0000 90B5     		push	{r4, r7, lr}
 5789              	.LCFI458:
 5790              		.cfi_def_cfa_offset 12
 5791              		.cfi_offset 4, -12
 5792              		.cfi_offset 7, -8
 5793              		.cfi_offset 14, -4
 5794 0002 83B0     		sub	sp, sp, #12
 5795              	.LCFI459:
 5796              		.cfi_def_cfa_offset 24
 5797 0004 00AF     		add	r7, sp, #0
 5798              	.LCFI460:
 5799              		.cfi_def_cfa_register 7
 5800 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 5801              		.loc 3 279 32
 5802 0008 7868     		ldr	r0, [r7, #4]
 5803 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4ty
 5804 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 5805              		.loc 3 278 30
 5806 0010 1946     		mov	r1, r3
 5807 0012 2046     		mov	r0, r4
 5808 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEE
 5809 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5810              		.loc 3 280 5
 5811 001a 1846     		mov	r0, r3
 5812 001c 0C37     		adds	r7, r7, #12
 5813              	.LCFI461:
 5814              		.cfi_def_cfa_offset 12
 5815 001e BD46     		mov	sp, r7
ARM GAS  /tmp/ccSXOI3d.s 			page 197


 5816              	.LCFI462:
 5817              		.cfi_def_cfa_register 13
 5818              		@ sp needed
 5819 0020 90BD     		pop	{r4, r7, pc}
 5820              		.cfi_endproc
 5821              	.LFE3635:
 5823              		.section	.text._ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7v
 5824              		.align	1
 5825              		.weak	_ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJD
 5826              		.syntax unified
 5827              		.thumb
 5828              		.thumb_func
 5829              		.fpu fpv4-sp-d16
 5831              	_ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE
 5832              	.LFB3634:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5833              		.loc 3 1652 5
 5834              		.cfi_startproc
 5835              		@ args = 0, pretend = 0, frame = 8
 5836              		@ frame_needed = 1, uses_anonymous_args = 0
 5837 0000 80B5     		push	{r7, lr}
 5838              	.LCFI463:
 5839              		.cfi_def_cfa_offset 8
 5840              		.cfi_offset 7, -8
 5841              		.cfi_offset 14, -4
 5842 0002 82B0     		sub	sp, sp, #8
 5843              	.LCFI464:
 5844              		.cfi_def_cfa_offset 16
 5845 0004 00AF     		add	r7, sp, #0
 5846              	.LCFI465:
 5847              		.cfi_def_cfa_register 7
 5848 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 5849              		.loc 3 1656 20
 5850 0008 7868     		ldr	r0, [r7, #4]
 5851 000a FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 5852 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 5853              		.loc 3 1656 23
 5854 0010 012B     		cmp	r3, #1
 5855 0012 14BF     		ite	ne
 5856 0014 0123     		movne	r3, #1
 5857 0016 0023     		moveq	r3, #0
 5858 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 5859              		.loc 3 1656 7
 5860 001a 002B     		cmp	r3, #0
 5861 001c 06D0     		beq	.L237
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 5862              		.loc 3 1657 28
 5863 001e 7868     		ldr	r0, [r7, #4]
 5864 0020 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 5865 0024 0346     		mov	r3, r0
 5866 0026 1846     		mov	r0, r3
 5867 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 5868              	.L237:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
ARM GAS  /tmp/ccSXOI3d.s 			page 198


 5869              		.loc 3 1658 45
 5870 002c 7868     		ldr	r0, [r7, #4]
 5871 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 5872 0032 0346     		mov	r3, r0
 5873              		.loc 3 1659 5
 5874 0034 1846     		mov	r0, r3
 5875 0036 0837     		adds	r7, r7, #8
 5876              	.LCFI466:
 5877              		.cfi_def_cfa_offset 8
 5878 0038 BD46     		mov	sp, r7
 5879              	.LCFI467:
 5880              		.cfi_def_cfa_register 13
 5881              		@ sp needed
 5882 003a 80BD     		pop	{r7, pc}
 5883              		.cfi_endproc
 5884              	.LFE3634:
 5886              		.section	.text._ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_,"axG",%progbi
 5887              		.align	1
 5888              		.weak	_ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_
 5889              		.syntax unified
 5890              		.thumb
 5891              		.thumb_func
 5892              		.fpu fpv4-sp-d16
 5894              	_ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_:
 5895              	.LFB3638:
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&&
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&&
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) const&
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) &&
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
ARM GAS  /tmp/ccSXOI3d.s 			page 199


 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void reset() noexcept { this->_M_reset(); }
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __optional_relop_t =
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons between optional values.
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
ARM GAS  /tmp/ccSXOI3d.s 			page 200


1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with nullopt.
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr strong_ordering
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) <=> false; }
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #else
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
ARM GAS  /tmp/ccSXOI3d.s 			page 201


1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif // three-way-comparison
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with value type.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs == __rhs; }
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs == *__rhs; }
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
ARM GAS  /tmp/ccSXOI3d.s 			page 202


1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs < *__rhs; }
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs > __rhs; }
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Swap and creation functions.
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // 2748. swappable traits for optionals
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
ARM GAS  /tmp/ccSXOI3d.s 			page 203


1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { __lhs.swap(__rhs); }
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr optional<decay_t<_Tp>>
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     make_optional(_Tp&& __t)
 5896              		.loc 2 1206 5
 5897              		.cfi_startproc
 5898              		@ args = 0, pretend = 0, frame = 8
 5899              		@ frame_needed = 1, uses_anonymous_args = 0
 5900 0000 80B5     		push	{r7, lr}
 5901              	.LCFI468:
 5902              		.cfi_def_cfa_offset 8
 5903              		.cfi_offset 7, -8
 5904              		.cfi_offset 14, -4
 5905 0002 82B0     		sub	sp, sp, #8
 5906              	.LCFI469:
 5907              		.cfi_def_cfa_offset 16
 5908 0004 00AF     		add	r7, sp, #0
 5909              	.LCFI470:
 5910              		.cfi_def_cfa_register 7
 5911 0006 7860     		str	r0, [r7, #4]
 5912 0008 3960     		str	r1, [r7]
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 5913              		.loc 2 1207 62
 5914 000a 3868     		ldr	r0, [r7]
 5915 000c FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 5916 0010 0346     		mov	r3, r0
 5917 0012 1946     		mov	r1, r3
 5918 0014 7868     		ldr	r0, [r7, #4]
 5919 0016 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 5920              		.loc 2 1207 65
 5921 001a 7868     		ldr	r0, [r7, #4]
 5922 001c 0837     		adds	r7, r7, #8
 5923              	.LCFI471:
 5924              		.cfi_def_cfa_offset 8
 5925 001e BD46     		mov	sp, r7
 5926              	.LCFI472:
 5927              		.cfi_def_cfa_register 13
 5928              		@ sp needed
 5929 0020 80BD     		pop	{r7, pc}
 5930              		.cfi_endproc
 5931              	.LFE3638:
 5933              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPort
 5934              		.align	1
 5935              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEE
 5936              		.syntax unified
 5937              		.thumb
 5938              		.thumb_func
 5939              		.fpu fpv4-sp-d16
 5941              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16
ARM GAS  /tmp/ccSXOI3d.s 			page 204


 5942              	.LFB3641:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 5943              		.loc 3 262 5
 5944              		.cfi_startproc
 5945              		@ args = 0, pretend = 0, frame = 8
 5946              		@ frame_needed = 1, uses_anonymous_args = 0
 5947 0000 80B5     		push	{r7, lr}
 5948              	.LCFI473:
 5949              		.cfi_def_cfa_offset 8
 5950              		.cfi_offset 7, -8
 5951              		.cfi_offset 14, -4
 5952 0002 82B0     		sub	sp, sp, #8
 5953              	.LCFI474:
 5954              		.cfi_def_cfa_offset 16
 5955 0004 00AF     		add	r7, sp, #0
 5956              	.LCFI475:
 5957              		.cfi_def_cfa_register 7
 5958 0006 3871     		strb	r0, [r7, #4]
 5959 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5960              		.loc 3 263 34
 5961 000a 3868     		ldr	r0, [r7]
 5962 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_
 5963 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5964              		.loc 3 263 55
 5965 0012 1846     		mov	r0, r3
 5966 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv
 5967 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 5968              		.loc 3 263 59
 5969 001a 1846     		mov	r0, r3
 5970 001c 0837     		adds	r7, r7, #8
 5971              	.LCFI476:
 5972              		.cfi_def_cfa_offset 8
 5973 001e BD46     		mov	sp, r7
 5974              	.LCFI477:
 5975              		.cfi_def_cfa_register 13
 5976              		@ sp needed
 5977 0020 80BD     		pop	{r7, pc}
 5978              		.cfi_endproc
 5979              	.LFE3641:
 5981              		.section	.text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEE
 5982              		.align	1
 5983              		.weak	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 5984              		.syntax unified
 5985              		.thumb
 5986              		.thumb_func
 5987              		.fpu fpv4-sp-d16
 5989              	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:
 5990              	.LFB3640:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 5991              		.loc 3 276 5
 5992              		.cfi_startproc
 5993              		@ args = 0, pretend = 0, frame = 8
 5994              		@ frame_needed = 1, uses_anonymous_args = 0
 5995 0000 90B5     		push	{r4, r7, lr}
ARM GAS  /tmp/ccSXOI3d.s 			page 205


 5996              	.LCFI478:
 5997              		.cfi_def_cfa_offset 12
 5998              		.cfi_offset 4, -12
 5999              		.cfi_offset 7, -8
 6000              		.cfi_offset 14, -4
 6001 0002 83B0     		sub	sp, sp, #12
 6002              	.LCFI479:
 6003              		.cfi_def_cfa_offset 24
 6004 0004 00AF     		add	r7, sp, #0
 6005              	.LCFI480:
 6006              		.cfi_def_cfa_register 7
 6007 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 6008              		.loc 3 279 32
 6009 0008 7868     		ldr	r0, [r7, #4]
 6010 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4ty
 6011 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 6012              		.loc 3 278 30
 6013 0010 1946     		mov	r1, r3
 6014 0012 2046     		mov	r0, r4
 6015 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDc
 6016 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6017              		.loc 3 280 5
 6018 001a 1846     		mov	r0, r3
 6019 001c 0C37     		adds	r7, r7, #12
 6020              	.LCFI481:
 6021              		.cfi_def_cfa_offset 12
 6022 001e BD46     		mov	sp, r7
 6023              	.LCFI482:
 6024              		.cfi_def_cfa_register 13
 6025              		@ sp needed
 6026 0020 90BD     		pop	{r4, r7, pc}
 6027              		.cfi_endproc
 6028              	.LFE3640:
 6030              		.section	.text._ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7v
 6031              		.align	1
 6032              		.weak	_ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJD
 6033              		.syntax unified
 6034              		.thumb
 6035              		.thumb_func
 6036              		.fpu fpv4-sp-d16
 6038              	_ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE
 6039              	.LFB3639:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 6040              		.loc 3 1652 5
 6041              		.cfi_startproc
 6042              		@ args = 0, pretend = 0, frame = 8
 6043              		@ frame_needed = 1, uses_anonymous_args = 0
 6044 0000 80B5     		push	{r7, lr}
 6045              	.LCFI483:
 6046              		.cfi_def_cfa_offset 8
 6047              		.cfi_offset 7, -8
 6048              		.cfi_offset 14, -4
 6049 0002 82B0     		sub	sp, sp, #8
 6050              	.LCFI484:
ARM GAS  /tmp/ccSXOI3d.s 			page 206


 6051              		.cfi_def_cfa_offset 16
 6052 0004 00AF     		add	r7, sp, #0
 6053              	.LCFI485:
 6054              		.cfi_def_cfa_register 7
 6055 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6056              		.loc 3 1656 20
 6057 0008 7868     		ldr	r0, [r7, #4]
 6058 000a FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 6059 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6060              		.loc 3 1656 23
 6061 0010 002B     		cmp	r3, #0
 6062 0012 14BF     		ite	ne
 6063 0014 0123     		movne	r3, #1
 6064 0016 0023     		moveq	r3, #0
 6065 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6066              		.loc 3 1656 7
 6067 001a 002B     		cmp	r3, #0
 6068 001c 06D0     		beq	.L246
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 6069              		.loc 3 1657 28
 6070 001e 7868     		ldr	r0, [r7, #4]
 6071 0020 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 6072 0024 0346     		mov	r3, r0
 6073 0026 1846     		mov	r0, r3
 6074 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 6075              	.L246:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 6076              		.loc 3 1658 45
 6077 002c 7868     		ldr	r0, [r7, #4]
 6078 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 6079 0032 0346     		mov	r3, r0
 6080              		.loc 3 1659 5
 6081 0034 1846     		mov	r0, r3
 6082 0036 0837     		adds	r7, r7, #8
 6083              	.LCFI486:
 6084              		.cfi_def_cfa_offset 8
 6085 0038 BD46     		mov	sp, r7
 6086              	.LCFI487:
 6087              		.cfi_def_cfa_register 13
 6088              		@ sp needed
 6089 003a 80BD     		pop	{r7, pc}
 6090              		.cfi_endproc
 6091              	.LFE3639:
 6093              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place
 6094              		.align	1
 6095              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_
 6096              		.syntax unified
 6097              		.thumb
 6098              		.thumb_func
 6099              		.fpu fpv4-sp-d16
 6101              	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:
 6102              	.LFB3647:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6103              		.loc 2 204 6
ARM GAS  /tmp/ccSXOI3d.s 			page 207


 6104              		.cfi_startproc
 6105              		@ args = 0, pretend = 0, frame = 16
 6106              		@ frame_needed = 1, uses_anonymous_args = 0
 6107 0000 80B5     		push	{r7, lr}
 6108              	.LCFI488:
 6109              		.cfi_def_cfa_offset 8
 6110              		.cfi_offset 7, -8
 6111              		.cfi_offset 14, -4
 6112 0002 84B0     		sub	sp, sp, #16
 6113              	.LCFI489:
 6114              		.cfi_def_cfa_offset 24
 6115 0004 00AF     		add	r7, sp, #0
 6116              	.LCFI490:
 6117              		.cfi_def_cfa_register 7
 6118 0006 F860     		str	r0, [r7, #12]
 6119 0008 3972     		strb	r1, [r7, #8]
 6120 000a 7A60     		str	r2, [r7, #4]
 6121              	.LBB42:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6122              		.loc 2 205 36
 6123 000c 7868     		ldr	r0, [r7, #4]
 6124 000e FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 6125 0012 0246     		mov	r2, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6126              		.loc 2 205 47
 6127 0014 FB68     		ldr	r3, [r7, #12]
 6128 0016 92E80300 		ldm	r2, {r0, r1}
 6129 001a 83E80300 		stm	r3, {r0, r1}
 6130              	.LBE42:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6131              		.loc 2 206 8
 6132 001e FB68     		ldr	r3, [r7, #12]
 6133 0020 1846     		mov	r0, r3
 6134 0022 1037     		adds	r7, r7, #16
 6135              	.LCFI491:
 6136              		.cfi_def_cfa_offset 8
 6137 0024 BD46     		mov	sp, r7
 6138              	.LCFI492:
 6139              		.cfi_def_cfa_register 13
 6140              		@ sp needed
 6141 0026 80BD     		pop	{r7, pc}
 6142              		.cfi_endproc
 6143              	.LFE3647:
 6145              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
 6146              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDp
 6147              		.section	.text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE,"axG",%progbits,_ZSt
 6148              		.align	1
 6149              		.weak	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 6150              		.syntax unified
 6151              		.thumb
 6152              		.thumb_func
 6153              		.fpu fpv4-sp-d16
 6155              	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:
 6156              	.LFB3649:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 6157              		.loc 12 76 5
 6158              		.cfi_startproc
ARM GAS  /tmp/ccSXOI3d.s 			page 208


 6159              		@ args = 0, pretend = 0, frame = 8
 6160              		@ frame_needed = 1, uses_anonymous_args = 0
 6161              		@ link register save eliminated.
 6162 0000 80B4     		push	{r7}
 6163              	.LCFI493:
 6164              		.cfi_def_cfa_offset 4
 6165              		.cfi_offset 7, -4
 6166 0002 83B0     		sub	sp, sp, #12
 6167              	.LCFI494:
 6168              		.cfi_def_cfa_offset 16
 6169 0004 00AF     		add	r7, sp, #0
 6170              	.LCFI495:
 6171              		.cfi_def_cfa_register 7
 6172 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 6173              		.loc 12 77 36
 6174 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 6175              		.loc 12 77 39
 6176 000a 1846     		mov	r0, r3
 6177 000c 0C37     		adds	r7, r7, #12
 6178              	.LCFI496:
 6179              		.cfi_def_cfa_offset 4
 6180 000e BD46     		mov	sp, r7
 6181              	.LCFI497:
 6182              		.cfi_def_cfa_register 13
 6183              		@ sp needed
 6184 0010 5DF8047B 		ldr	r7, [sp], #4
 6185              	.LCFI498:
 6186              		.cfi_restore 7
 6187              		.cfi_def_cfa_offset 0
 6188 0014 7047     		bx	lr
 6189              		.cfi_endproc
 6190              	.LFE3649:
 6192              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_,"axG",%pro
 6193              		.align	1
 6194              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
 6195              		.syntax unified
 6196              		.thumb
 6197              		.thumb_func
 6198              		.fpu fpv4-sp-d16
 6200              	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:
 6201              	.LFB3650:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6202              		.loc 2 116 2
 6203              		.cfi_startproc
 6204              		@ args = 0, pretend = 0, frame = 16
 6205              		@ frame_needed = 1, uses_anonymous_args = 0
 6206 0000 B0B5     		push	{r4, r5, r7, lr}
 6207              	.LCFI499:
 6208              		.cfi_def_cfa_offset 16
 6209              		.cfi_offset 4, -16
 6210              		.cfi_offset 5, -12
 6211              		.cfi_offset 7, -8
 6212              		.cfi_offset 14, -4
 6213 0002 84B0     		sub	sp, sp, #16
 6214              	.LCFI500:
ARM GAS  /tmp/ccSXOI3d.s 			page 209


 6215              		.cfi_def_cfa_offset 32
 6216 0004 00AF     		add	r7, sp, #0
 6217              	.LCFI501:
 6218              		.cfi_def_cfa_register 7
 6219 0006 F860     		str	r0, [r7, #12]
 6220 0008 3972     		strb	r1, [r7, #8]
 6221 000a 7A60     		str	r2, [r7, #4]
 6222              	.LBB43:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 6223              		.loc 2 118 19
 6224 000c FC68     		ldr	r4, [r7, #12]
 6225 000e 7868     		ldr	r0, [r7, #4]
 6226 0010 FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 6227 0014 0346     		mov	r3, r0
 6228 0016 1A46     		mov	r2, r3
 6229 0018 2946     		mov	r1, r5
 6230 001a 2046     		mov	r0, r4
 6231 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
 6232 0020 FB68     		ldr	r3, [r7, #12]
 6233 0022 0122     		movs	r2, #1
 6234 0024 1A72     		strb	r2, [r3, #8]
 6235              	.LBE43:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6236              		.loc 2 119 4
 6237 0026 FB68     		ldr	r3, [r7, #12]
 6238 0028 1846     		mov	r0, r3
 6239 002a 1037     		adds	r7, r7, #16
 6240              	.LCFI502:
 6241              		.cfi_def_cfa_offset 16
 6242 002c BD46     		mov	sp, r7
 6243              	.LCFI503:
 6244              		.cfi_def_cfa_register 13
 6245              		@ sp needed
 6246 002e B0BD     		pop	{r4, r5, r7, pc}
 6247              		.cfi_endproc
 6248              	.LFE3650:
 6250              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_
 6251              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_,_ZNSt22_Option
 6252              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_E
 6253              		.align	1
 6254              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEE
 6255              		.syntax unified
 6256              		.thumb
 6257              		.thumb_func
 6258              		.fpu fpv4-sp-d16
 6260              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_
 6261              	.LFB3652:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6262              		.loc 2 359 42
 6263              		.cfi_startproc
 6264              		@ args = 0, pretend = 0, frame = 16
 6265              		@ frame_needed = 1, uses_anonymous_args = 0
 6266 0000 90B5     		push	{r4, r7, lr}
 6267              	.LCFI504:
 6268              		.cfi_def_cfa_offset 12
 6269              		.cfi_offset 4, -12
 6270              		.cfi_offset 7, -8
ARM GAS  /tmp/ccSXOI3d.s 			page 210


 6271              		.cfi_offset 14, -4
 6272 0002 85B0     		sub	sp, sp, #20
 6273              	.LCFI505:
 6274              		.cfi_def_cfa_offset 32
 6275 0004 00AF     		add	r7, sp, #0
 6276              	.LCFI506:
 6277              		.cfi_def_cfa_register 7
 6278 0006 F860     		str	r0, [r7, #12]
 6279 0008 3972     		strb	r1, [r7, #8]
 6280 000a 7A60     		str	r2, [r7, #4]
 6281              	.LBB44:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6282              		.loc 2 359 42
 6283 000c FB68     		ldr	r3, [r7, #12]
 6284 000e 7A68     		ldr	r2, [r7, #4]
 6285 0010 2146     		mov	r1, r4
 6286 0012 1846     		mov	r0, r3
 6287 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
 6288              	.LBE44:
 6289 0018 FB68     		ldr	r3, [r7, #12]
 6290 001a 1846     		mov	r0, r3
 6291 001c 1437     		adds	r7, r7, #20
 6292              	.LCFI507:
 6293              		.cfi_def_cfa_offset 12
 6294 001e BD46     		mov	sp, r7
 6295              	.LCFI508:
 6296              		.cfi_def_cfa_register 13
 6297              		@ sp needed
 6298 0020 90BD     		pop	{r4, r7, pc}
 6299              		.cfi_endproc
 6300              	.LFE3652:
 6302              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEE
 6303              		.thumb_set _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS
 6304              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_,"axG",
 6305              		.align	1
 6306              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
 6307              		.syntax unified
 6308              		.thumb
 6309              		.thumb_func
 6310              		.fpu fpv4-sp-d16
 6312              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:
 6313              	.LFB3654:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 6314              		.loc 2 608 28
 6315              		.cfi_startproc
 6316              		@ args = 0, pretend = 0, frame = 16
 6317              		@ frame_needed = 1, uses_anonymous_args = 0
 6318 0000 B0B5     		push	{r4, r5, r7, lr}
 6319              	.LCFI509:
 6320              		.cfi_def_cfa_offset 16
 6321              		.cfi_offset 4, -16
 6322              		.cfi_offset 5, -12
 6323              		.cfi_offset 7, -8
 6324              		.cfi_offset 14, -4
 6325 0002 84B0     		sub	sp, sp, #16
 6326              	.LCFI510:
 6327              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccSXOI3d.s 			page 211


 6328 0004 00AF     		add	r7, sp, #0
 6329              	.LCFI511:
 6330              		.cfi_def_cfa_register 7
 6331 0006 F860     		str	r0, [r7, #12]
 6332 0008 3972     		strb	r1, [r7, #8]
 6333 000a 7A60     		str	r2, [r7, #4]
 6334              	.LBB45:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6335              		.loc 2 610 38
 6336 000c FC68     		ldr	r4, [r7, #12]
 6337 000e 7868     		ldr	r0, [r7, #4]
 6338 0010 FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 6339 0014 0346     		mov	r3, r0
 6340 0016 1A46     		mov	r2, r3
 6341 0018 2946     		mov	r1, r5
 6342 001a 2046     		mov	r0, r4
 6343 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt1
 6344              	.LBE45:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6345              		.loc 2 610 42
 6346 0020 FB68     		ldr	r3, [r7, #12]
 6347 0022 1846     		mov	r0, r3
 6348 0024 1037     		adds	r7, r7, #16
 6349              	.LCFI512:
 6350              		.cfi_def_cfa_offset 16
 6351 0026 BD46     		mov	sp, r7
 6352              	.LCFI513:
 6353              		.cfi_def_cfa_register 13
 6354              		@ sp needed
 6355 0028 B0BD     		pop	{r4, r5, r7, pc}
 6356              		.cfi_endproc
 6357              	.LFE3654:
 6359              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_
 6360              		.thumb_set _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_,_ZNSt14_Op
 6361              		.section	.text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_,"axG",%progbits,_ZNSt8optionalISt4pairI
 6362              		.align	1
 6363              		.weak	_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
 6364              		.syntax unified
 6365              		.thumb
 6366              		.thumb_func
 6367              		.fpu fpv4-sp-d16
 6369              	_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:
 6370              	.LFB3656:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6371              		.loc 2 701 2
 6372              		.cfi_startproc
 6373              		@ args = 0, pretend = 0, frame = 8
 6374              		@ frame_needed = 1, uses_anonymous_args = 0
 6375 0000 B0B5     		push	{r4, r5, r7, lr}
 6376              	.LCFI514:
 6377              		.cfi_def_cfa_offset 16
 6378              		.cfi_offset 4, -16
 6379              		.cfi_offset 5, -12
 6380              		.cfi_offset 7, -8
 6381              		.cfi_offset 14, -4
 6382 0002 82B0     		sub	sp, sp, #8
 6383              	.LCFI515:
ARM GAS  /tmp/ccSXOI3d.s 			page 212


 6384              		.cfi_def_cfa_offset 24
 6385 0004 00AF     		add	r7, sp, #0
 6386              	.LCFI516:
 6387              		.cfi_def_cfa_register 7
 6388 0006 7860     		str	r0, [r7, #4]
 6389 0008 3960     		str	r1, [r7]
 6390              	.LBB46:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6391              		.loc 2 702 47
 6392 000a 7C68     		ldr	r4, [r7, #4]
 6393 000c 3868     		ldr	r0, [r7]
 6394 000e FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 6395 0012 0346     		mov	r3, r0
 6396 0014 1A46     		mov	r2, r3
 6397 0016 2946     		mov	r1, r5
 6398 0018 2046     		mov	r0, r4
 6399 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
 6400              	.LBE46:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6401              		.loc 2 702 51
 6402 001e 7B68     		ldr	r3, [r7, #4]
 6403 0020 1846     		mov	r0, r3
 6404 0022 0837     		adds	r7, r7, #8
 6405              	.LCFI517:
 6406              		.cfi_def_cfa_offset 16
 6407 0024 BD46     		mov	sp, r7
 6408              	.LCFI518:
 6409              		.cfi_def_cfa_register 13
 6410              		@ sp needed
 6411 0026 B0BD     		pop	{r4, r5, r7, pc}
 6412              		.cfi_endproc
 6413              	.LFE3656:
 6415              		.weak	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 6416              		.thumb_set _ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_,_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
 6417              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_,"axG",%progb
 6418              		.align	1
 6419              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_
 6420              		.syntax unified
 6421              		.thumb
 6422              		.thumb_func
 6423              		.fpu fpv4-sp-d16
 6425              	_ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_:
 6426              	.LFB3658:
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 6427              		.loc 2 248 9
 6428              		.cfi_startproc
 6429              		@ args = 0, pretend = 0, frame = 8
 6430              		@ frame_needed = 1, uses_anonymous_args = 0
 6431 0000 90B5     		push	{r4, r7, lr}
 6432              	.LCFI519:
 6433              		.cfi_def_cfa_offset 12
 6434              		.cfi_offset 4, -12
 6435              		.cfi_offset 7, -8
 6436              		.cfi_offset 14, -4
 6437 0002 83B0     		sub	sp, sp, #12
 6438              	.LCFI520:
 6439              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccSXOI3d.s 			page 213


 6440 0004 00AF     		add	r7, sp, #0
 6441              	.LCFI521:
 6442              		.cfi_def_cfa_register 7
 6443 0006 7860     		str	r0, [r7, #4]
 6444 0008 3960     		str	r1, [r7]
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 6445              		.loc 2 252 45
 6446 000a 3868     		ldr	r0, [r7]
 6447 000c FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 6448 0010 0446     		mov	r4, r0
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 6449              		.loc 2 251 50
 6450 0012 7B68     		ldr	r3, [r7, #4]
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 6451              		.loc 2 251 43
 6452 0014 1846     		mov	r0, r3
 6453 0016 FFF7FEFF 		bl	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 6454 001a 0346     		mov	r3, r0
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 6455              		.loc 2 251 11
 6456 001c 1946     		mov	r1, r3
 6457 001e 0820     		movs	r0, #8
 6458 0020 FFF7FEFF 		bl	_ZnwjPv
 6459 0024 0346     		mov	r3, r0
 6460 0026 2246     		mov	r2, r4
 6461 0028 92E80300 		ldm	r2, {r0, r1}
 6462 002c 83E80300 		stm	r3, {r0, r1}
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 6463              		.loc 2 253 28
 6464 0030 7B68     		ldr	r3, [r7, #4]
 6465 0032 0122     		movs	r2, #1
 6466 0034 1A72     		strb	r2, [r3, #8]
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6467              		.loc 2 254 9
 6468 0036 00BF     		nop
 6469 0038 0C37     		adds	r7, r7, #12
 6470              	.LCFI522:
 6471              		.cfi_def_cfa_offset 12
 6472 003a BD46     		mov	sp, r7
 6473              	.LCFI523:
 6474              		.cfi_def_cfa_register 13
 6475              		@ sp needed
 6476 003c 90BD     		pop	{r4, r7, pc}
 6477              		.cfi_endproc
 6478              	.LFE3658:
 6480              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv,"axG",%progbits,_ZNKSt7variantIJfPfP1
 6481              		.align	1
 6482              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 6483              		.syntax unified
 6484              		.thumb
 6485              		.thumb_func
 6486              		.fpu fpv4-sp-d16
 6488              	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:
 6489              	.LFB3659:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 6490              		.loc 3 1562 24
 6491              		.cfi_startproc
ARM GAS  /tmp/ccSXOI3d.s 			page 214


 6492              		@ args = 0, pretend = 0, frame = 8
 6493              		@ frame_needed = 1, uses_anonymous_args = 0
 6494              		@ link register save eliminated.
 6495 0000 80B4     		push	{r7}
 6496              	.LCFI524:
 6497              		.cfi_def_cfa_offset 4
 6498              		.cfi_offset 7, -4
 6499 0002 83B0     		sub	sp, sp, #12
 6500              	.LCFI525:
 6501              		.cfi_def_cfa_offset 16
 6502 0004 00AF     		add	r7, sp, #0
 6503              	.LCFI526:
 6504              		.cfi_def_cfa_register 7
 6505 0006 7860     		str	r0, [r7, #4]
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6506              		.loc 3 1566 17
 6507 0008 7B68     		ldr	r3, [r7, #4]
 6508 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6509              		.loc 3 1571 7
 6510 000c 1846     		mov	r0, r3
 6511 000e 0C37     		adds	r7, r7, #12
 6512              	.LCFI527:
 6513              		.cfi_def_cfa_offset 4
 6514 0010 BD46     		mov	sp, r7
 6515              	.LCFI528:
 6516              		.cfi_def_cfa_register 13
 6517              		@ sp needed
 6518 0012 5DF8047B 		ldr	r7, [sp], #4
 6519              	.LCFI529:
 6520              		.cfi_restore 7
 6521              		.cfi_def_cfa_offset 0
 6522 0016 7047     		bx	lr
 6523              		.cfi_endproc
 6524              	.LFE3659:
 6526              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16i
 6527              		.align	1
 6528              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_i
 6529              		.syntax unified
 6530              		.thumb
 6531              		.thumb_func
 6532              		.fpu fpv4-sp-d16
 6534              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tI
 6535              	.LFB3665:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 6536              		.loc 3 262 5
 6537              		.cfi_startproc
 6538              		@ args = 0, pretend = 0, frame = 8
 6539              		@ frame_needed = 1, uses_anonymous_args = 0
 6540 0000 80B5     		push	{r7, lr}
 6541              	.LCFI530:
 6542              		.cfi_def_cfa_offset 8
 6543              		.cfi_offset 7, -8
 6544              		.cfi_offset 14, -4
 6545 0002 82B0     		sub	sp, sp, #8
 6546              	.LCFI531:
 6547              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccSXOI3d.s 			page 215


 6548 0004 00AF     		add	r7, sp, #0
 6549              	.LCFI532:
 6550              		.cfi_def_cfa_register 7
 6551 0006 3871     		strb	r0, [r7, #4]
 6552 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6553              		.loc 3 263 34
 6554 000a 3868     		ldr	r0, [r7]
 6555 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_refe
 6556 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6557              		.loc 3 263 55
 6558 0012 1846     		mov	r0, r3
 6559 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 6560 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6561              		.loc 3 263 59
 6562 001a 1846     		mov	r0, r3
 6563 001c 0837     		adds	r7, r7, #8
 6564              	.LCFI533:
 6565              		.cfi_def_cfa_offset 8
 6566 001e BD46     		mov	sp, r7
 6567              	.LCFI534:
 6568              		.cfi_def_cfa_register 13
 6569              		@ sp needed
 6570 0020 80BD     		pop	{r7, pc}
 6571              		.cfi_endproc
 6572              	.LFE3665:
 6574              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEED
 6575              		.align	1
 6576              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_p
 6577              		.syntax unified
 6578              		.thumb
 6579              		.thumb_func
 6580              		.fpu fpv4-sp-d16
 6582              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_in
 6583              	.LFB3664:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 6584              		.loc 3 267 5
 6585              		.cfi_startproc
 6586              		@ args = 0, pretend = 0, frame = 8
 6587              		@ frame_needed = 1, uses_anonymous_args = 0
 6588 0000 90B5     		push	{r4, r7, lr}
 6589              	.LCFI535:
 6590              		.cfi_def_cfa_offset 12
 6591              		.cfi_offset 4, -12
 6592              		.cfi_offset 7, -8
 6593              		.cfi_offset 14, -4
 6594 0002 83B0     		sub	sp, sp, #12
 6595              	.LCFI536:
 6596              		.cfi_def_cfa_offset 24
 6597 0004 00AF     		add	r7, sp, #0
 6598              	.LCFI537:
 6599              		.cfi_def_cfa_register 7
 6600 0006 3871     		strb	r0, [r7, #4]
 6601 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
ARM GAS  /tmp/ccSXOI3d.s 			page 216


 6602              		.loc 3 270 30
 6603 000a 3868     		ldr	r0, [r7]
 6604 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_re
 6605 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 6606              		.loc 3 269 30
 6607 0012 1946     		mov	r1, r3
 6608 0014 2046     		mov	r0, r4
 6609 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_inde
 6610 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6611              		.loc 3 271 5
 6612 001c 1846     		mov	r0, r3
 6613 001e 0C37     		adds	r7, r7, #12
 6614              	.LCFI538:
 6615              		.cfi_def_cfa_offset 12
 6616 0020 BD46     		mov	sp, r7
 6617              	.LCFI539:
 6618              		.cfi_def_cfa_register 13
 6619              		@ sp needed
 6620 0022 90BD     		pop	{r4, r7, pc}
 6621              		.cfi_endproc
 6622              	.LFE3664:
 6624              		.section	.text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEE
 6625              		.align	1
 6626              		.weak	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_
 6627              		.syntax unified
 6628              		.thumb
 6629              		.thumb_func
 6630              		.fpu fpv4-sp-d16
 6632              	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 6633              	.LFB3663:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 6634              		.loc 3 267 5
 6635              		.cfi_startproc
 6636              		@ args = 0, pretend = 0, frame = 8
 6637              		@ frame_needed = 1, uses_anonymous_args = 0
 6638 0000 90B5     		push	{r4, r7, lr}
 6639              	.LCFI540:
 6640              		.cfi_def_cfa_offset 12
 6641              		.cfi_offset 4, -12
 6642              		.cfi_offset 7, -8
 6643              		.cfi_offset 14, -4
 6644 0002 83B0     		sub	sp, sp, #12
 6645              	.LCFI541:
 6646              		.cfi_def_cfa_offset 24
 6647 0004 00AF     		add	r7, sp, #0
 6648              	.LCFI542:
 6649              		.cfi_def_cfa_register 7
 6650 0006 3871     		strb	r0, [r7, #4]
 6651 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 6652              		.loc 3 270 30
 6653 000a 3868     		ldr	r0, [r7]
 6654 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 6655 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
ARM GAS  /tmp/ccSXOI3d.s 			page 217


 6656              		.loc 3 269 30
 6657 0012 1946     		mov	r1, r3
 6658 0014 2046     		mov	r0, r4
 6659 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_plac
 6660 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6661              		.loc 3 271 5
 6662 001c 1846     		mov	r0, r3
 6663 001e 0C37     		adds	r7, r7, #12
 6664              	.LCFI543:
 6665              		.cfi_def_cfa_offset 12
 6666 0020 BD46     		mov	sp, r7
 6667              	.LCFI544:
 6668              		.cfi_def_cfa_register 13
 6669              		@ sp needed
 6670 0022 90BD     		pop	{r4, r7, pc}
 6671              		.cfi_endproc
 6672              	.LFE3663:
 6674              		.section	.text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 6675              		.align	1
 6676              		.weak	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 6677              		.syntax unified
 6678              		.thumb
 6679              		.thumb_func
 6680              		.fpu fpv4-sp-d16
 6682              	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 6683              	.LFB3662:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 6684              		.loc 3 276 5
 6685              		.cfi_startproc
 6686              		@ args = 0, pretend = 0, frame = 8
 6687              		@ frame_needed = 1, uses_anonymous_args = 0
 6688 0000 90B5     		push	{r4, r7, lr}
 6689              	.LCFI545:
 6690              		.cfi_def_cfa_offset 12
 6691              		.cfi_offset 4, -12
 6692              		.cfi_offset 7, -8
 6693              		.cfi_offset 14, -4
 6694 0002 83B0     		sub	sp, sp, #12
 6695              	.LCFI546:
 6696              		.cfi_def_cfa_offset 24
 6697 0004 00AF     		add	r7, sp, #0
 6698              	.LCFI547:
 6699              		.cfi_def_cfa_register 7
 6700 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 6701              		.loc 3 279 32
 6702 0008 7868     		ldr	r0, [r7, #4]
 6703 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 6704 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 6705              		.loc 3 278 30
 6706 0010 1946     		mov	r1, r3
 6707 0012 2046     		mov	r0, r4
 6708 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_pla
 6709 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 218


 6710              		.loc 3 280 5
 6711 001a 1846     		mov	r0, r3
 6712 001c 0C37     		adds	r7, r7, #12
 6713              	.LCFI548:
 6714              		.cfi_def_cfa_offset 12
 6715 001e BD46     		mov	sp, r7
 6716              	.LCFI549:
 6717              		.cfi_def_cfa_register 13
 6718              		@ sp needed
 6719 0020 90BD     		pop	{r4, r7, pc}
 6720              		.cfi_endproc
 6721              	.LFE3662:
 6723              		.section	.text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 6724              		.align	1
 6725              		.weak	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 6726              		.syntax unified
 6727              		.thumb
 6728              		.thumb_func
 6729              		.fpu fpv4-sp-d16
 6731              	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 6732              	.LFB3661:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 6733              		.loc 3 1652 5
 6734              		.cfi_startproc
 6735              		@ args = 0, pretend = 0, frame = 8
 6736              		@ frame_needed = 1, uses_anonymous_args = 0
 6737 0000 80B5     		push	{r7, lr}
 6738              	.LCFI550:
 6739              		.cfi_def_cfa_offset 8
 6740              		.cfi_offset 7, -8
 6741              		.cfi_offset 14, -4
 6742 0002 82B0     		sub	sp, sp, #8
 6743              	.LCFI551:
 6744              		.cfi_def_cfa_offset 16
 6745 0004 00AF     		add	r7, sp, #0
 6746              	.LCFI552:
 6747              		.cfi_def_cfa_register 7
 6748 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6749              		.loc 3 1656 20
 6750 0008 7868     		ldr	r0, [r7, #4]
 6751 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 6752 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6753              		.loc 3 1656 23
 6754 0010 022B     		cmp	r3, #2
 6755 0012 14BF     		ite	ne
 6756 0014 0123     		movne	r3, #1
 6757 0016 0023     		moveq	r3, #0
 6758 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 6759              		.loc 3 1656 7
 6760 001a 002B     		cmp	r3, #0
 6761 001c 06D0     		beq	.L272
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 6762              		.loc 3 1657 28
 6763 001e 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 219


 6764 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 6765 0024 0346     		mov	r3, r0
 6766 0026 1846     		mov	r0, r3
 6767 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 6768              	.L272:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 6769              		.loc 3 1658 45
 6770 002c 7868     		ldr	r0, [r7, #4]
 6771 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 6772 0032 0346     		mov	r3, r0
 6773              		.loc 3 1659 5
 6774 0034 1846     		mov	r0, r3
 6775 0036 0837     		adds	r7, r7, #8
 6776              	.LCFI553:
 6777              		.cfi_def_cfa_offset 8
 6778 0038 BD46     		mov	sp, r7
 6779              	.LCFI554:
 6780              		.cfi_def_cfa_register 13
 6781              		@ sp needed
 6782 003a 80BD     		pop	{r7, pc}
 6783              		.cfi_endproc
 6784              	.LFE3661:
 6786              		.section	.text._ZN10OutputPortIfE7presentEv,"axG",%progbits,_ZN10OutputPortIfE7presentEv,comdat
 6787              		.align	1
 6788              		.weak	_ZN10OutputPortIfE7presentEv
 6789              		.syntax unified
 6790              		.thumb
 6791              		.thumb_func
 6792              		.fpu fpv4-sp-d16
 6794              	_ZN10OutputPortIfE7presentEv:
 6795              	.LFB3666:
  73:Inc/component.hpp ****         if (age_ == 0) {
 6796              		.loc 15 73 22
 6797              		.cfi_startproc
 6798              		@ args = 0, pretend = 0, frame = 8
 6799              		@ frame_needed = 1, uses_anonymous_args = 0
 6800 0000 80B5     		push	{r7, lr}
 6801              	.LCFI555:
 6802              		.cfi_def_cfa_offset 8
 6803              		.cfi_offset 7, -8
 6804              		.cfi_offset 14, -4
 6805 0002 82B0     		sub	sp, sp, #8
 6806              	.LCFI556:
 6807              		.cfi_def_cfa_offset 16
 6808 0004 00AF     		add	r7, sp, #0
 6809              	.LCFI557:
 6810              		.cfi_def_cfa_register 7
 6811 0006 7860     		str	r0, [r7, #4]
 6812 0008 3960     		str	r1, [r7]
  74:Inc/component.hpp ****             return content_;
 6813              		.loc 15 74 13
 6814 000a 3B68     		ldr	r3, [r7]
 6815 000c 1B68     		ldr	r3, [r3]
  74:Inc/component.hpp ****             return content_;
 6816              		.loc 15 74 9
 6817 000e 002B     		cmp	r3, #0
 6818 0010 06D1     		bne	.L275
ARM GAS  /tmp/ccSXOI3d.s 			page 220


  75:Inc/component.hpp ****         } else {
 6819              		.loc 15 75 20
 6820 0012 3B68     		ldr	r3, [r7]
 6821 0014 0433     		adds	r3, r3, #4
 6822 0016 1946     		mov	r1, r3
 6823 0018 7868     		ldr	r0, [r7, #4]
 6824 001a FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 6825 001e 03E0     		b	.L276
 6826              	.L275:
  77:Inc/component.hpp ****         }
 6827              		.loc 15 77 25
 6828 0020 1146     		mov	r1, r2
 6829 0022 7868     		ldr	r0, [r7, #4]
 6830 0024 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 6831              	.L276:
  79:Inc/component.hpp **** 
 6832              		.loc 15 79 5
 6833 0028 7868     		ldr	r0, [r7, #4]
 6834 002a 0837     		adds	r7, r7, #8
 6835              	.LCFI558:
 6836              		.cfi_def_cfa_offset 8
 6837 002c BD46     		mov	sp, r7
 6838              	.LCFI559:
 6839              		.cfi_def_cfa_register 13
 6840              		@ sp needed
 6841 002e 80BD     		pop	{r7, pc}
 6842              		.cfi_endproc
 6843              	.LFE3666:
 6845              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev,"axG",%progbits,_ZNSt22_Option
 6846              		.align	1
 6847              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev
 6848              		.syntax unified
 6849              		.thumb
 6850              		.thumb_func
 6851              		.fpu fpv4-sp-d16
 6853              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:
 6854              	.LFB3672:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6855              		.loc 2 200 14
 6856              		.cfi_startproc
 6857              		@ args = 0, pretend = 0, frame = 8
 6858              		@ frame_needed = 1, uses_anonymous_args = 0
 6859              		@ link register save eliminated.
 6860 0000 80B4     		push	{r7}
 6861              	.LCFI560:
 6862              		.cfi_def_cfa_offset 4
 6863              		.cfi_offset 7, -4
 6864 0002 83B0     		sub	sp, sp, #12
 6865              	.LCFI561:
 6866              		.cfi_def_cfa_offset 16
 6867 0004 00AF     		add	r7, sp, #0
 6868              	.LCFI562:
 6869              		.cfi_def_cfa_register 7
 6870 0006 7860     		str	r0, [r7, #4]
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6871              		.loc 2 200 49
 6872 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 221


 6873 000a 1846     		mov	r0, r3
 6874 000c 0C37     		adds	r7, r7, #12
 6875              	.LCFI563:
 6876              		.cfi_def_cfa_offset 4
 6877 000e BD46     		mov	sp, r7
 6878              	.LCFI564:
 6879              		.cfi_def_cfa_register 13
 6880              		@ sp needed
 6881 0010 5DF8047B 		ldr	r7, [sp], #4
 6882              	.LCFI565:
 6883              		.cfi_restore 7
 6884              		.cfi_def_cfa_offset 0
 6885 0014 7047     		bx	lr
 6886              		.cfi_endproc
 6887              	.LFE3672:
 6889              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 6890              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev,_ZNSt22_Optional_payload_baseIfE8_
 6891              		.section	.text._ZNSt22_Optional_payload_baseIfEC2Ev,"axG",%progbits,_ZNSt22_Optional_payload_baseI
 6892              		.align	1
 6893              		.weak	_ZNSt22_Optional_payload_baseIfEC2Ev
 6894              		.syntax unified
 6895              		.thumb
 6896              		.thumb_func
 6897              		.fpu fpv4-sp-d16
 6899              	_ZNSt22_Optional_payload_baseIfEC2Ev:
 6900              	.LFB3674:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 6901              		.loc 2 111 7
 6902              		.cfi_startproc
 6903              		@ args = 0, pretend = 0, frame = 8
 6904              		@ frame_needed = 1, uses_anonymous_args = 0
 6905 0000 80B5     		push	{r7, lr}
 6906              	.LCFI566:
 6907              		.cfi_def_cfa_offset 8
 6908              		.cfi_offset 7, -8
 6909              		.cfi_offset 14, -4
 6910 0002 82B0     		sub	sp, sp, #8
 6911              	.LCFI567:
 6912              		.cfi_def_cfa_offset 16
 6913 0004 00AF     		add	r7, sp, #0
 6914              	.LCFI568:
 6915              		.cfi_def_cfa_register 7
 6916 0006 7860     		str	r0, [r7, #4]
 6917              	.LBB47:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 6918              		.loc 2 111 7
 6919 0008 7B68     		ldr	r3, [r7, #4]
 6920 000a 1846     		mov	r0, r3
 6921 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 6922 0010 7B68     		ldr	r3, [r7, #4]
 6923 0012 0022     		movs	r2, #0
 6924 0014 1A71     		strb	r2, [r3, #4]
 6925              	.LBE47:
 6926 0016 7B68     		ldr	r3, [r7, #4]
 6927 0018 1846     		mov	r0, r3
 6928 001a 0837     		adds	r7, r7, #8
 6929              	.LCFI569:
ARM GAS  /tmp/ccSXOI3d.s 			page 222


 6930              		.cfi_def_cfa_offset 8
 6931 001c BD46     		mov	sp, r7
 6932              	.LCFI570:
 6933              		.cfi_def_cfa_register 13
 6934              		@ sp needed
 6935 001e 80BD     		pop	{r7, pc}
 6936              		.cfi_endproc
 6937              	.LFE3674:
 6939              		.weak	_ZNSt22_Optional_payload_baseIfEC1Ev
 6940              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1Ev,_ZNSt22_Optional_payload_baseIfEC2Ev
 6941              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev,"axG",%progbits,_ZNSt17_Optional_payloa
 6942              		.align	1
 6943              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
 6944              		.syntax unified
 6945              		.thumb
 6946              		.thumb_func
 6947              		.fpu fpv4-sp-d16
 6949              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:
 6950              	.LFB3676:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 6951              		.loc 2 303 7
 6952              		.cfi_startproc
 6953              		@ args = 0, pretend = 0, frame = 8
 6954              		@ frame_needed = 1, uses_anonymous_args = 0
 6955 0000 80B5     		push	{r7, lr}
 6956              	.LCFI571:
 6957              		.cfi_def_cfa_offset 8
 6958              		.cfi_offset 7, -8
 6959              		.cfi_offset 14, -4
 6960 0002 82B0     		sub	sp, sp, #8
 6961              	.LCFI572:
 6962              		.cfi_def_cfa_offset 16
 6963 0004 00AF     		add	r7, sp, #0
 6964              	.LCFI573:
 6965              		.cfi_def_cfa_register 7
 6966 0006 7860     		str	r0, [r7, #4]
 6967              	.LBB48:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 6968              		.loc 2 303 7
 6969 0008 7B68     		ldr	r3, [r7, #4]
 6970 000a 1846     		mov	r0, r3
 6971 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2Ev
 6972              	.LBE48:
 6973 0010 7B68     		ldr	r3, [r7, #4]
 6974 0012 1846     		mov	r0, r3
 6975 0014 0837     		adds	r7, r7, #8
 6976              	.LCFI574:
 6977              		.cfi_def_cfa_offset 8
 6978 0016 BD46     		mov	sp, r7
 6979              	.LCFI575:
 6980              		.cfi_def_cfa_register 13
 6981              		@ sp needed
 6982 0018 80BD     		pop	{r7, pc}
 6983              		.cfi_endproc
 6984              	.LFE3676:
 6986              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 6987              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev,_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
ARM GAS  /tmp/ccSXOI3d.s 			page 223


 6988              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev,"axG",%progbits,_ZNSt14_Optional_baseIfLb1ELb1
 6989              		.align	1
 6990              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 6991              		.syntax unified
 6992              		.thumb
 6993              		.thumb_func
 6994              		.fpu fpv4-sp-d16
 6996              	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:
 6997              	.LFB3678:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6998              		.loc 2 603 17
 6999              		.cfi_startproc
 7000              		@ args = 0, pretend = 0, frame = 8
 7001              		@ frame_needed = 1, uses_anonymous_args = 0
 7002 0000 80B5     		push	{r7, lr}
 7003              	.LCFI576:
 7004              		.cfi_def_cfa_offset 8
 7005              		.cfi_offset 7, -8
 7006              		.cfi_offset 14, -4
 7007 0002 82B0     		sub	sp, sp, #8
 7008              	.LCFI577:
 7009              		.cfi_def_cfa_offset 16
 7010 0004 00AF     		add	r7, sp, #0
 7011              	.LCFI578:
 7012              		.cfi_def_cfa_register 7
 7013 0006 7860     		str	r0, [r7, #4]
 7014              	.LBB49:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7015              		.loc 2 603 17
 7016 0008 7B68     		ldr	r3, [r7, #4]
 7017 000a 1846     		mov	r0, r3
 7018 000c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 7019              	.LBE49:
 7020 0010 7B68     		ldr	r3, [r7, #4]
 7021 0012 1846     		mov	r0, r3
 7022 0014 0837     		adds	r7, r7, #8
 7023              	.LCFI579:
 7024              		.cfi_def_cfa_offset 8
 7025 0016 BD46     		mov	sp, r7
 7026              	.LCFI580:
 7027              		.cfi_def_cfa_register 13
 7028              		@ sp needed
 7029 0018 80BD     		pop	{r7, pc}
 7030              		.cfi_endproc
 7031              	.LFE3678:
 7033              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
 7034              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev,_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 7035              		.section	.text._ZNSt8optionalIfEC2ESt9nullopt_t,"axG",%progbits,_ZNSt8optionalIfEC5ESt9nullopt_t,c
 7036              		.align	1
 7037              		.weak	_ZNSt8optionalIfEC2ESt9nullopt_t
 7038              		.syntax unified
 7039              		.thumb
 7040              		.thumb_func
 7041              		.fpu fpv4-sp-d16
 7043              	_ZNSt8optionalIfEC2ESt9nullopt_t:
 7044              	.LFB3680:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 224


 7045              		.loc 2 693 17
 7046              		.cfi_startproc
 7047              		@ args = 0, pretend = 0, frame = 8
 7048              		@ frame_needed = 1, uses_anonymous_args = 0
 7049 0000 80B5     		push	{r7, lr}
 7050              	.LCFI581:
 7051              		.cfi_def_cfa_offset 8
 7052              		.cfi_offset 7, -8
 7053              		.cfi_offset 14, -4
 7054 0002 82B0     		sub	sp, sp, #8
 7055              	.LCFI582:
 7056              		.cfi_def_cfa_offset 16
 7057 0004 00AF     		add	r7, sp, #0
 7058              	.LCFI583:
 7059              		.cfi_def_cfa_register 7
 7060 0006 7860     		str	r0, [r7, #4]
 7061 0008 3970     		strb	r1, [r7]
 7062              	.LBB50:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7063              		.loc 2 693 46
 7064 000a 7B68     		ldr	r3, [r7, #4]
 7065 000c 1846     		mov	r0, r3
 7066 000e FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 7067              	.LBE50:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7068              		.loc 2 693 48
 7069 0012 7B68     		ldr	r3, [r7, #4]
 7070 0014 1846     		mov	r0, r3
 7071 0016 0837     		adds	r7, r7, #8
 7072              	.LCFI584:
 7073              		.cfi_def_cfa_offset 8
 7074 0018 BD46     		mov	sp, r7
 7075              	.LCFI585:
 7076              		.cfi_def_cfa_register 13
 7077              		@ sp needed
 7078 001a 80BD     		pop	{r7, pc}
 7079              		.cfi_endproc
 7080              	.LFE3680:
 7082              		.weak	_ZNSt8optionalIfEC1ESt9nullopt_t
 7083              		.thumb_set _ZNSt8optionalIfEC1ESt9nullopt_t,_ZNSt8optionalIfEC2ESt9nullopt_t
 7084              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt1
 7085              		.align	1
 7086              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place
 7087              		.syntax unified
 7088              		.thumb
 7089              		.thumb_func
 7090              		.fpu fpv4-sp-d16
 7092              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_
 7093              	.LFB3685:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 7094              		.loc 3 262 5
 7095              		.cfi_startproc
 7096              		@ args = 0, pretend = 0, frame = 8
 7097              		@ frame_needed = 1, uses_anonymous_args = 0
 7098 0000 80B5     		push	{r7, lr}
 7099              	.LCFI586:
 7100              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccSXOI3d.s 			page 225


 7101              		.cfi_offset 7, -8
 7102              		.cfi_offset 14, -4
 7103 0002 82B0     		sub	sp, sp, #8
 7104              	.LCFI587:
 7105              		.cfi_def_cfa_offset 16
 7106 0004 00AF     		add	r7, sp, #0
 7107              	.LCFI588:
 7108              		.cfi_def_cfa_register 7
 7109 0006 3871     		strb	r0, [r7, #4]
 7110 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7111              		.loc 3 263 34
 7112 000a 3868     		ldr	r0, [r7]
 7113 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_re
 7114 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7115              		.loc 3 263 55
 7116 0012 1846     		mov	r0, r3
 7117 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
 7118 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7119              		.loc 3 263 59
 7120 001a 1846     		mov	r0, r3
 7121 001c 0837     		adds	r7, r7, #8
 7122              	.LCFI589:
 7123              		.cfi_def_cfa_offset 8
 7124 001e BD46     		mov	sp, r7
 7125              	.LCFI590:
 7126              		.cfi_def_cfa_register 13
 7127              		@ sp needed
 7128 0020 80BD     		pop	{r7, pc}
 7129              		.cfi_endproc
 7130              	.LFE3685:
 7132              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEE
 7133              		.align	1
 7134              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_
 7135              		.syntax unified
 7136              		.thumb
 7137              		.thumb_func
 7138              		.fpu fpv4-sp-d16
 7140              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 7141              	.LFB3684:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7142              		.loc 3 267 5
 7143              		.cfi_startproc
 7144              		@ args = 0, pretend = 0, frame = 8
 7145              		@ frame_needed = 1, uses_anonymous_args = 0
 7146 0000 90B5     		push	{r4, r7, lr}
 7147              	.LCFI591:
 7148              		.cfi_def_cfa_offset 12
 7149              		.cfi_offset 4, -12
 7150              		.cfi_offset 7, -8
 7151              		.cfi_offset 14, -4
 7152 0002 83B0     		sub	sp, sp, #12
 7153              	.LCFI592:
 7154              		.cfi_def_cfa_offset 24
 7155 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccSXOI3d.s 			page 226


 7156              	.LCFI593:
 7157              		.cfi_def_cfa_register 7
 7158 0006 3871     		strb	r0, [r7, #4]
 7159 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7160              		.loc 3 270 30
 7161 000a 3868     		ldr	r0, [r7]
 7162 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 7163 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 7164              		.loc 3 269 30
 7165 0012 1946     		mov	r1, r3
 7166 0014 2046     		mov	r0, r4
 7167 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_in
 7168 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7169              		.loc 3 271 5
 7170 001c 1846     		mov	r0, r3
 7171 001e 0C37     		adds	r7, r7, #12
 7172              	.LCFI594:
 7173              		.cfi_def_cfa_offset 12
 7174 0020 BD46     		mov	sp, r7
 7175              	.LCFI595:
 7176              		.cfi_def_cfa_register 13
 7177              		@ sp needed
 7178 0022 90BD     		pop	{r4, r7, pc}
 7179              		.cfi_endproc
 7180              	.LFE3684:
 7182              		.section	.text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 7183              		.align	1
 7184              		.weak	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7185              		.syntax unified
 7186              		.thumb
 7187              		.thumb_func
 7188              		.fpu fpv4-sp-d16
 7190              	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 7191              	.LFB3683:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7192              		.loc 3 276 5
 7193              		.cfi_startproc
 7194              		@ args = 0, pretend = 0, frame = 8
 7195              		@ frame_needed = 1, uses_anonymous_args = 0
 7196 0000 90B5     		push	{r4, r7, lr}
 7197              	.LCFI596:
 7198              		.cfi_def_cfa_offset 12
 7199              		.cfi_offset 4, -12
 7200              		.cfi_offset 7, -8
 7201              		.cfi_offset 14, -4
 7202 0002 83B0     		sub	sp, sp, #12
 7203              	.LCFI597:
 7204              		.cfi_def_cfa_offset 24
 7205 0004 00AF     		add	r7, sp, #0
 7206              	.LCFI598:
 7207              		.cfi_def_cfa_register 7
 7208 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7209              		.loc 3 279 32
ARM GAS  /tmp/ccSXOI3d.s 			page 227


 7210 0008 7868     		ldr	r0, [r7, #4]
 7211 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 7212 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 7213              		.loc 3 278 30
 7214 0010 1946     		mov	r1, r3
 7215 0012 2046     		mov	r0, r4
 7216 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_pla
 7217 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7218              		.loc 3 280 5
 7219 001a 1846     		mov	r0, r3
 7220 001c 0C37     		adds	r7, r7, #12
 7221              	.LCFI599:
 7222              		.cfi_def_cfa_offset 12
 7223 001e BD46     		mov	sp, r7
 7224              	.LCFI600:
 7225              		.cfi_def_cfa_register 13
 7226              		@ sp needed
 7227 0020 90BD     		pop	{r4, r7, pc}
 7228              		.cfi_endproc
 7229              	.LFE3683:
 7231              		.section	.text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 7232              		.align	1
 7233              		.weak	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 7234              		.syntax unified
 7235              		.thumb
 7236              		.thumb_func
 7237              		.fpu fpv4-sp-d16
 7239              	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 7240              	.LFB3682:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7241              		.loc 3 1652 5
 7242              		.cfi_startproc
 7243              		@ args = 0, pretend = 0, frame = 8
 7244              		@ frame_needed = 1, uses_anonymous_args = 0
 7245 0000 80B5     		push	{r7, lr}
 7246              	.LCFI601:
 7247              		.cfi_def_cfa_offset 8
 7248              		.cfi_offset 7, -8
 7249              		.cfi_offset 14, -4
 7250 0002 82B0     		sub	sp, sp, #8
 7251              	.LCFI602:
 7252              		.cfi_def_cfa_offset 16
 7253 0004 00AF     		add	r7, sp, #0
 7254              	.LCFI603:
 7255              		.cfi_def_cfa_register 7
 7256 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7257              		.loc 3 1656 20
 7258 0008 7868     		ldr	r0, [r7, #4]
 7259 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 7260 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7261              		.loc 3 1656 23
 7262 0010 012B     		cmp	r3, #1
 7263 0012 14BF     		ite	ne
ARM GAS  /tmp/ccSXOI3d.s 			page 228


 7264 0014 0123     		movne	r3, #1
 7265 0016 0023     		moveq	r3, #0
 7266 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7267              		.loc 3 1656 7
 7268 001a 002B     		cmp	r3, #0
 7269 001c 06D0     		beq	.L294
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 7270              		.loc 3 1657 28
 7271 001e 7868     		ldr	r0, [r7, #4]
 7272 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 7273 0024 0346     		mov	r3, r0
 7274 0026 1846     		mov	r0, r3
 7275 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 7276              	.L294:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7277              		.loc 3 1658 45
 7278 002c 7868     		ldr	r0, [r7, #4]
 7279 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7280 0032 0346     		mov	r3, r0
 7281              		.loc 3 1659 5
 7282 0034 1846     		mov	r0, r3
 7283 0036 0837     		adds	r7, r7, #8
 7284              	.LCFI604:
 7285              		.cfi_def_cfa_offset 8
 7286 0038 BD46     		mov	sp, r7
 7287              	.LCFI605:
 7288              		.cfi_def_cfa_register 13
 7289              		@ sp needed
 7290 003a 80BD     		pop	{r7, pc}
 7291              		.cfi_endproc
 7292              	.LFE3682:
 7294              		.section	.text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_,"axG",%progbits,_ZSt13m
 7295              		.align	1
 7296              		.weak	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
 7297              		.syntax unified
 7298              		.thumb
 7299              		.thumb_func
 7300              		.fpu fpv4-sp-d16
 7302              	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:
 7303              	.LFB3686:
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 7304              		.loc 2 1206 5
 7305              		.cfi_startproc
 7306              		@ args = 0, pretend = 0, frame = 8
 7307              		@ frame_needed = 1, uses_anonymous_args = 0
 7308 0000 80B5     		push	{r7, lr}
 7309              	.LCFI606:
 7310              		.cfi_def_cfa_offset 8
 7311              		.cfi_offset 7, -8
 7312              		.cfi_offset 14, -4
 7313 0002 82B0     		sub	sp, sp, #8
 7314              	.LCFI607:
 7315              		.cfi_def_cfa_offset 16
 7316 0004 00AF     		add	r7, sp, #0
 7317              	.LCFI608:
 7318              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccSXOI3d.s 			page 229


 7319 0006 7860     		str	r0, [r7, #4]
 7320 0008 3960     		str	r1, [r7]
 7321              		.loc 2 1207 62
 7322 000a 3868     		ldr	r0, [r7]
 7323 000c FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 7324 0010 0346     		mov	r3, r0
 7325 0012 1946     		mov	r1, r3
 7326 0014 7868     		ldr	r0, [r7, #4]
 7327 0016 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 7328              		.loc 2 1207 65
 7329 001a 7868     		ldr	r0, [r7, #4]
 7330 001c 0837     		adds	r7, r7, #8
 7331              	.LCFI609:
 7332              		.cfi_def_cfa_offset 8
 7333 001e BD46     		mov	sp, r7
 7334              	.LCFI610:
 7335              		.cfi_def_cfa_register 13
 7336              		@ sp needed
 7337 0020 80BD     		pop	{r7, pc}
 7338              		.cfi_endproc
 7339              	.LFE3686:
 7341              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt
 7342              		.align	1
 7343              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_plac
 7344              		.syntax unified
 7345              		.thumb
 7346              		.thumb_func
 7347              		.fpu fpv4-sp-d16
 7349              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index
 7350              	.LFB3689:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 7351              		.loc 3 262 5
 7352              		.cfi_startproc
 7353              		@ args = 0, pretend = 0, frame = 8
 7354              		@ frame_needed = 1, uses_anonymous_args = 0
 7355 0000 80B5     		push	{r7, lr}
 7356              	.LCFI611:
 7357              		.cfi_def_cfa_offset 8
 7358              		.cfi_offset 7, -8
 7359              		.cfi_offset 14, -4
 7360 0002 82B0     		sub	sp, sp, #8
 7361              	.LCFI612:
 7362              		.cfi_def_cfa_offset 16
 7363 0004 00AF     		add	r7, sp, #0
 7364              	.LCFI613:
 7365              		.cfi_def_cfa_register 7
 7366 0006 3871     		strb	r0, [r7, #4]
 7367 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7368              		.loc 3 263 34
 7369 000a 3868     		ldr	r0, [r7]
 7370 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 7371 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7372              		.loc 3 263 55
 7373 0012 1846     		mov	r0, r3
 7374 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
ARM GAS  /tmp/ccSXOI3d.s 			page 230


 7375 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7376              		.loc 3 263 59
 7377 001a 1846     		mov	r0, r3
 7378 001c 0837     		adds	r7, r7, #8
 7379              	.LCFI614:
 7380              		.cfi_def_cfa_offset 8
 7381 001e BD46     		mov	sp, r7
 7382              	.LCFI615:
 7383              		.cfi_def_cfa_register 13
 7384              		@ sp needed
 7385 0020 80BD     		pop	{r7, pc}
 7386              		.cfi_endproc
 7387              	.LFE3689:
 7389              		.section	.text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 7390              		.align	1
 7391              		.weak	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7392              		.syntax unified
 7393              		.thumb
 7394              		.thumb_func
 7395              		.fpu fpv4-sp-d16
 7397              	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 7398              	.LFB3688:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7399              		.loc 3 276 5
 7400              		.cfi_startproc
 7401              		@ args = 0, pretend = 0, frame = 8
 7402              		@ frame_needed = 1, uses_anonymous_args = 0
 7403 0000 90B5     		push	{r4, r7, lr}
 7404              	.LCFI616:
 7405              		.cfi_def_cfa_offset 12
 7406              		.cfi_offset 4, -12
 7407              		.cfi_offset 7, -8
 7408              		.cfi_offset 14, -4
 7409 0002 83B0     		sub	sp, sp, #12
 7410              	.LCFI617:
 7411              		.cfi_def_cfa_offset 24
 7412 0004 00AF     		add	r7, sp, #0
 7413              	.LCFI618:
 7414              		.cfi_def_cfa_register 7
 7415 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7416              		.loc 3 279 32
 7417 0008 7868     		ldr	r0, [r7, #4]
 7418 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 7419 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 7420              		.loc 3 278 30
 7421 0010 1946     		mov	r1, r3
 7422 0012 2046     		mov	r0, r4
 7423 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 7424 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7425              		.loc 3 280 5
 7426 001a 1846     		mov	r0, r3
 7427 001c 0C37     		adds	r7, r7, #12
 7428              	.LCFI619:
ARM GAS  /tmp/ccSXOI3d.s 			page 231


 7429              		.cfi_def_cfa_offset 12
 7430 001e BD46     		mov	sp, r7
 7431              	.LCFI620:
 7432              		.cfi_def_cfa_register 13
 7433              		@ sp needed
 7434 0020 90BD     		pop	{r4, r7, pc}
 7435              		.cfi_endproc
 7436              	.LFE3688:
 7438              		.section	.text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 7439              		.align	1
 7440              		.weak	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 7441              		.syntax unified
 7442              		.thumb
 7443              		.thumb_func
 7444              		.fpu fpv4-sp-d16
 7446              	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 7447              	.LFB3687:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7448              		.loc 3 1652 5
 7449              		.cfi_startproc
 7450              		@ args = 0, pretend = 0, frame = 8
 7451              		@ frame_needed = 1, uses_anonymous_args = 0
 7452 0000 80B5     		push	{r7, lr}
 7453              	.LCFI621:
 7454              		.cfi_def_cfa_offset 8
 7455              		.cfi_offset 7, -8
 7456              		.cfi_offset 14, -4
 7457 0002 82B0     		sub	sp, sp, #8
 7458              	.LCFI622:
 7459              		.cfi_def_cfa_offset 16
 7460 0004 00AF     		add	r7, sp, #0
 7461              	.LCFI623:
 7462              		.cfi_def_cfa_register 7
 7463 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7464              		.loc 3 1656 20
 7465 0008 7868     		ldr	r0, [r7, #4]
 7466 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 7467 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7468              		.loc 3 1656 23
 7469 0010 002B     		cmp	r3, #0
 7470 0012 14BF     		ite	ne
 7471 0014 0123     		movne	r3, #1
 7472 0016 0023     		moveq	r3, #0
 7473 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7474              		.loc 3 1656 7
 7475 001a 002B     		cmp	r3, #0
 7476 001c 06D0     		beq	.L303
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 7477              		.loc 3 1657 28
 7478 001e 7868     		ldr	r0, [r7, #4]
 7479 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 7480 0024 0346     		mov	r3, r0
 7481 0026 1846     		mov	r0, r3
 7482 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
ARM GAS  /tmp/ccSXOI3d.s 			page 232


 7483              	.L303:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7484              		.loc 3 1658 45
 7485 002c 7868     		ldr	r0, [r7, #4]
 7486 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7487 0032 0346     		mov	r3, r0
 7488              		.loc 3 1659 5
 7489 0034 1846     		mov	r0, r3
 7490 0036 0837     		adds	r7, r7, #8
 7491              	.LCFI624:
 7492              		.cfi_def_cfa_offset 8
 7493 0038 BD46     		mov	sp, r7
 7494              	.LCFI625:
 7495              		.cfi_def_cfa_register 13
 7496              		@ sp needed
 7497 003a 80BD     		pop	{r7, pc}
 7498              		.cfi_endproc
 7499              	.LFE3687:
 7501              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_,"axG",
 7502              		.align	1
 7503              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
 7504              		.syntax unified
 7505              		.thumb
 7506              		.thumb_func
 7507              		.fpu fpv4-sp-d16
 7509              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:
 7510              	.LFB3695:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 7511              		.loc 2 204 6
 7512              		.cfi_startproc
 7513              		@ args = 0, pretend = 0, frame = 16
 7514              		@ frame_needed = 1, uses_anonymous_args = 0
 7515 0000 80B5     		push	{r7, lr}
 7516              	.LCFI626:
 7517              		.cfi_def_cfa_offset 8
 7518              		.cfi_offset 7, -8
 7519              		.cfi_offset 14, -4
 7520 0002 84B0     		sub	sp, sp, #16
 7521              	.LCFI627:
 7522              		.cfi_def_cfa_offset 24
 7523 0004 00AF     		add	r7, sp, #0
 7524              	.LCFI628:
 7525              		.cfi_def_cfa_register 7
 7526 0006 F860     		str	r0, [r7, #12]
 7527 0008 3972     		strb	r1, [r7, #8]
 7528 000a 7A60     		str	r2, [r7, #4]
 7529              	.LBB51:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 7530              		.loc 2 205 36
 7531 000c 7868     		ldr	r0, [r7, #4]
 7532 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 7533 0012 0346     		mov	r3, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 7534              		.loc 2 205 47
 7535 0014 1A68     		ldr	r2, [r3]	@ float
 7536 0016 FB68     		ldr	r3, [r7, #12]
 7537 0018 1A60     		str	r2, [r3]	@ float
ARM GAS  /tmp/ccSXOI3d.s 			page 233


 7538              	.LBE51:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7539              		.loc 2 206 8
 7540 001a FB68     		ldr	r3, [r7, #12]
 7541 001c 1846     		mov	r0, r3
 7542 001e 1037     		adds	r7, r7, #16
 7543              	.LCFI629:
 7544              		.cfi_def_cfa_offset 8
 7545 0020 BD46     		mov	sp, r7
 7546              	.LCFI630:
 7547              		.cfi_def_cfa_register 13
 7548              		@ sp needed
 7549 0022 80BD     		pop	{r7, pc}
 7550              		.cfi_endproc
 7551              	.LFE3695:
 7553              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 7554              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Op
 7555              		.section	.text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_,"axG",%progbits,_ZNSt2
 7556              		.align	1
 7557              		.weak	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 7558              		.syntax unified
 7559              		.thumb
 7560              		.thumb_func
 7561              		.fpu fpv4-sp-d16
 7563              	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:
 7564              	.LFB3697:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 7565              		.loc 2 116 2
 7566              		.cfi_startproc
 7567              		@ args = 0, pretend = 0, frame = 16
 7568              		@ frame_needed = 1, uses_anonymous_args = 0
 7569 0000 B0B5     		push	{r4, r5, r7, lr}
 7570              	.LCFI631:
 7571              		.cfi_def_cfa_offset 16
 7572              		.cfi_offset 4, -16
 7573              		.cfi_offset 5, -12
 7574              		.cfi_offset 7, -8
 7575              		.cfi_offset 14, -4
 7576 0002 84B0     		sub	sp, sp, #16
 7577              	.LCFI632:
 7578              		.cfi_def_cfa_offset 32
 7579 0004 00AF     		add	r7, sp, #0
 7580              	.LCFI633:
 7581              		.cfi_def_cfa_register 7
 7582 0006 F860     		str	r0, [r7, #12]
 7583 0008 3972     		strb	r1, [r7, #8]
 7584 000a 7A60     		str	r2, [r7, #4]
 7585              	.LBB52:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 7586              		.loc 2 118 19
 7587 000c FC68     		ldr	r4, [r7, #12]
 7588 000e 7868     		ldr	r0, [r7, #4]
 7589 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 7590 0014 0346     		mov	r3, r0
 7591 0016 1A46     		mov	r2, r3
 7592 0018 2946     		mov	r1, r5
 7593 001a 2046     		mov	r0, r4
ARM GAS  /tmp/ccSXOI3d.s 			page 234


 7594 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 7595 0020 FB68     		ldr	r3, [r7, #12]
 7596 0022 0122     		movs	r2, #1
 7597 0024 1A71     		strb	r2, [r3, #4]
 7598              	.LBE52:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7599              		.loc 2 119 4
 7600 0026 FB68     		ldr	r3, [r7, #12]
 7601 0028 1846     		mov	r0, r3
 7602 002a 1037     		adds	r7, r7, #16
 7603              	.LCFI634:
 7604              		.cfi_def_cfa_offset 16
 7605 002c BD46     		mov	sp, r7
 7606              	.LCFI635:
 7607              		.cfi_def_cfa_register 13
 7608              		@ sp needed
 7609 002e B0BD     		pop	{r4, r5, r7, pc}
 7610              		.cfi_endproc
 7611              	.LFE3697:
 7613              		.weak	_ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
 7614              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Optional_payload_b
 7615              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10i
 7616              		.align	1
 7617              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 7618              		.syntax unified
 7619              		.thumb
 7620              		.thumb_func
 7621              		.fpu fpv4-sp-d16
 7623              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:
 7624              	.LFB3699:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7625              		.loc 2 301 42
 7626              		.cfi_startproc
 7627              		@ args = 0, pretend = 0, frame = 16
 7628              		@ frame_needed = 1, uses_anonymous_args = 0
 7629 0000 90B5     		push	{r4, r7, lr}
 7630              	.LCFI636:
 7631              		.cfi_def_cfa_offset 12
 7632              		.cfi_offset 4, -12
 7633              		.cfi_offset 7, -8
 7634              		.cfi_offset 14, -4
 7635 0002 85B0     		sub	sp, sp, #20
 7636              	.LCFI637:
 7637              		.cfi_def_cfa_offset 32
 7638 0004 00AF     		add	r7, sp, #0
 7639              	.LCFI638:
 7640              		.cfi_def_cfa_register 7
 7641 0006 F860     		str	r0, [r7, #12]
 7642 0008 3972     		strb	r1, [r7, #8]
 7643 000a 7A60     		str	r2, [r7, #4]
 7644              	.LBB53:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7645              		.loc 2 301 42
 7646 000c FB68     		ldr	r3, [r7, #12]
 7647 000e 7A68     		ldr	r2, [r7, #4]
 7648 0010 2146     		mov	r1, r4
 7649 0012 1846     		mov	r0, r3
ARM GAS  /tmp/ccSXOI3d.s 			page 235


 7650 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 7651              	.LBE53:
 7652 0018 FB68     		ldr	r3, [r7, #12]
 7653 001a 1846     		mov	r0, r3
 7654 001c 1437     		adds	r7, r7, #20
 7655              	.LCFI639:
 7656              		.cfi_def_cfa_offset 12
 7657 001e BD46     		mov	sp, r7
 7658              	.LCFI640:
 7659              		.cfi_def_cfa_register 13
 7660              		@ sp needed
 7661 0020 90BD     		pop	{r4, r7, pc}
 7662              		.cfi_endproc
 7663              	.LFE3699:
 7665              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 7666              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_pl
 7667              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_,"axG",%progbits,_Z
 7668              		.align	1
 7669              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
 7670              		.syntax unified
 7671              		.thumb
 7672              		.thumb_func
 7673              		.fpu fpv4-sp-d16
 7675              	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:
 7676              	.LFB3701:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 7677              		.loc 2 608 28
 7678              		.cfi_startproc
 7679              		@ args = 0, pretend = 0, frame = 16
 7680              		@ frame_needed = 1, uses_anonymous_args = 0
 7681 0000 B0B5     		push	{r4, r5, r7, lr}
 7682              	.LCFI641:
 7683              		.cfi_def_cfa_offset 16
 7684              		.cfi_offset 4, -16
 7685              		.cfi_offset 5, -12
 7686              		.cfi_offset 7, -8
 7687              		.cfi_offset 14, -4
 7688 0002 84B0     		sub	sp, sp, #16
 7689              	.LCFI642:
 7690              		.cfi_def_cfa_offset 32
 7691 0004 00AF     		add	r7, sp, #0
 7692              	.LCFI643:
 7693              		.cfi_def_cfa_register 7
 7694 0006 F860     		str	r0, [r7, #12]
 7695 0008 3972     		strb	r1, [r7, #8]
 7696 000a 7A60     		str	r2, [r7, #4]
 7697              	.LBB54:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7698              		.loc 2 610 38
 7699 000c FC68     		ldr	r4, [r7, #12]
 7700 000e 7868     		ldr	r0, [r7, #4]
 7701 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 7702 0014 0346     		mov	r3, r0
 7703 0016 1A46     		mov	r2, r3
 7704 0018 2946     		mov	r1, r5
 7705 001a 2046     		mov	r0, r4
 7706 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpO
ARM GAS  /tmp/ccSXOI3d.s 			page 236


 7707              	.LBE54:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7708              		.loc 2 610 42
 7709 0020 FB68     		ldr	r3, [r7, #12]
 7710 0022 1846     		mov	r0, r3
 7711 0024 1037     		adds	r7, r7, #16
 7712              	.LCFI644:
 7713              		.cfi_def_cfa_offset 16
 7714 0026 BD46     		mov	sp, r7
 7715              	.LCFI645:
 7716              		.cfi_def_cfa_register 13
 7717              		@ sp needed
 7718 0028 B0BD     		pop	{r4, r5, r7, pc}
 7719              		.cfi_endproc
 7720              	.LFE3701:
 7722              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
 7723              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_,_ZNSt14_Optional_baseI
 7724              		.section	.text._ZNSt8optionalIfEC2IRfLb1EEEOT_,"axG",%progbits,_ZNSt8optionalIfEC5IRfLb1EEEOT_,com
 7725              		.align	1
 7726              		.weak	_ZNSt8optionalIfEC2IRfLb1EEEOT_
 7727              		.syntax unified
 7728              		.thumb
 7729              		.thumb_func
 7730              		.fpu fpv4-sp-d16
 7732              	_ZNSt8optionalIfEC2IRfLb1EEEOT_:
 7733              	.LFB3703:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 7734              		.loc 2 701 2
 7735              		.cfi_startproc
 7736              		@ args = 0, pretend = 0, frame = 8
 7737              		@ frame_needed = 1, uses_anonymous_args = 0
 7738 0000 B0B5     		push	{r4, r5, r7, lr}
 7739              	.LCFI646:
 7740              		.cfi_def_cfa_offset 16
 7741              		.cfi_offset 4, -16
 7742              		.cfi_offset 5, -12
 7743              		.cfi_offset 7, -8
 7744              		.cfi_offset 14, -4
 7745 0002 82B0     		sub	sp, sp, #8
 7746              	.LCFI647:
 7747              		.cfi_def_cfa_offset 24
 7748 0004 00AF     		add	r7, sp, #0
 7749              	.LCFI648:
 7750              		.cfi_def_cfa_register 7
 7751 0006 7860     		str	r0, [r7, #4]
 7752 0008 3960     		str	r1, [r7]
 7753              	.LBB55:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7754              		.loc 2 702 47
 7755 000a 7C68     		ldr	r4, [r7, #4]
 7756 000c 3868     		ldr	r0, [r7]
 7757 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 7758 0012 0346     		mov	r3, r0
 7759 0014 1A46     		mov	r2, r3
 7760 0016 2946     		mov	r1, r5
 7761 0018 2046     		mov	r0, r4
 7762 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
ARM GAS  /tmp/ccSXOI3d.s 			page 237


 7763              	.LBE55:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7764              		.loc 2 702 51
 7765 001e 7B68     		ldr	r3, [r7, #4]
 7766 0020 1846     		mov	r0, r3
 7767 0022 0837     		adds	r7, r7, #8
 7768              	.LCFI649:
 7769              		.cfi_def_cfa_offset 16
 7770 0024 BD46     		mov	sp, r7
 7771              	.LCFI650:
 7772              		.cfi_def_cfa_register 13
 7773              		@ sp needed
 7774 0026 B0BD     		pop	{r4, r5, r7, pc}
 7775              		.cfi_endproc
 7776              	.LFE3703:
 7778              		.weak	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 7779              		.thumb_set _ZNSt8optionalIfEC1IRfLb1EEEOT_,_ZNSt8optionalIfEC2IRfLb1EEEOT_
 7780              		.section	.text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS
 7781              		.align	1
 7782              		.weak	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 7783              		.syntax unified
 7784              		.thumb
 7785              		.thumb_func
 7786              		.fpu fpv4-sp-d16
 7788              	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:
 7789              	.LFB3726:
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
 7790              		.loc 12 49 5
 7791              		.cfi_startproc
 7792              		@ args = 0, pretend = 0, frame = 8
 7793              		@ frame_needed = 1, uses_anonymous_args = 0
 7794              		@ link register save eliminated.
 7795 0000 80B4     		push	{r7}
 7796              	.LCFI651:
 7797              		.cfi_def_cfa_offset 4
 7798              		.cfi_offset 7, -4
 7799 0002 83B0     		sub	sp, sp, #12
 7800              	.LCFI652:
 7801              		.cfi_def_cfa_offset 16
 7802 0004 00AF     		add	r7, sp, #0
 7803              	.LCFI653:
 7804              		.cfi_def_cfa_register 7
 7805 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7806              		.loc 12 50 37
 7807 0008 7B68     		ldr	r3, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7808              		.loc 12 50 40
 7809 000a 1846     		mov	r0, r3
 7810 000c 0C37     		adds	r7, r7, #12
 7811              	.LCFI654:
 7812              		.cfi_def_cfa_offset 4
 7813 000e BD46     		mov	sp, r7
 7814              	.LCFI655:
 7815              		.cfi_def_cfa_register 13
 7816              		@ sp needed
 7817 0010 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccSXOI3d.s 			page 238


 7818              	.LCFI656:
 7819              		.cfi_restore 7
 7820              		.cfi_def_cfa_offset 0
 7821 0014 7047     		bx	lr
 7822              		.cfi_endproc
 7823              	.LFE3726:
 7825              		.section	.text._ZNSt22_Optional_payload_baseIfE8_M_resetEv,"axG",%progbits,_ZNSt22_Optional_payloa
 7826              		.align	1
 7827              		.weak	_ZNSt22_Optional_payload_baseIfE8_M_resetEv
 7828              		.syntax unified
 7829              		.thumb
 7830              		.thumb_func
 7831              		.fpu fpv4-sp-d16
 7833              	_ZNSt22_Optional_payload_baseIfE8_M_resetEv:
 7834              	.LFB3727:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 7835              		.loc 2 277 7
 7836              		.cfi_startproc
 7837              		@ args = 0, pretend = 0, frame = 8
 7838              		@ frame_needed = 1, uses_anonymous_args = 0
 7839 0000 80B5     		push	{r7, lr}
 7840              	.LCFI657:
 7841              		.cfi_def_cfa_offset 8
 7842              		.cfi_offset 7, -8
 7843              		.cfi_offset 14, -4
 7844 0002 82B0     		sub	sp, sp, #8
 7845              	.LCFI658:
 7846              		.cfi_def_cfa_offset 16
 7847 0004 00AF     		add	r7, sp, #0
 7848              	.LCFI659:
 7849              		.cfi_def_cfa_register 7
 7850 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 7851              		.loc 2 279 12
 7852 0008 7B68     		ldr	r3, [r7, #4]
 7853 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 7854              		.loc 2 279 2
 7855 000c 002B     		cmp	r3, #0
 7856 000e 02D0     		beq	.L319
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 7857              		.loc 2 280 14
 7858 0010 7868     		ldr	r0, [r7, #4]
 7859 0012 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv
 7860              	.L319:
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 7861              		.loc 2 281 7
 7862 0016 00BF     		nop
 7863 0018 0837     		adds	r7, r7, #8
 7864              	.LCFI660:
 7865              		.cfi_def_cfa_offset 8
 7866 001a BD46     		mov	sp, r7
 7867              	.LCFI661:
 7868              		.cfi_def_cfa_register 13
 7869              		@ sp needed
 7870 001c 80BD     		pop	{r7, pc}
 7871              		.cfi_endproc
ARM GAS  /tmp/ccSXOI3d.s 			page 239


 7872              	.LFE3727:
 7874              		.section	.text._ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE,"axG",%progbits,_ZS
 7875              		.align	1
 7876              		.weak	_ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE
 7877              		.syntax unified
 7878              		.thumb
 7879              		.thumb_func
 7880              		.fpu fpv4-sp-d16
 7882              	_ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE:
 7883              	.LFB3728:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7884              		.loc 12 76 5
 7885              		.cfi_startproc
 7886              		@ args = 0, pretend = 0, frame = 8
 7887              		@ frame_needed = 1, uses_anonymous_args = 0
 7888              		@ link register save eliminated.
 7889 0000 80B4     		push	{r7}
 7890              	.LCFI662:
 7891              		.cfi_def_cfa_offset 4
 7892              		.cfi_offset 7, -4
 7893 0002 83B0     		sub	sp, sp, #12
 7894              	.LCFI663:
 7895              		.cfi_def_cfa_offset 16
 7896 0004 00AF     		add	r7, sp, #0
 7897              	.LCFI664:
 7898              		.cfi_def_cfa_register 7
 7899 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7900              		.loc 12 77 36
 7901 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7902              		.loc 12 77 39
 7903 000a 1846     		mov	r0, r3
 7904 000c 0C37     		adds	r7, r7, #12
 7905              	.LCFI665:
 7906              		.cfi_def_cfa_offset 4
 7907 000e BD46     		mov	sp, r7
 7908              	.LCFI666:
 7909              		.cfi_def_cfa_register 13
 7910              		@ sp needed
 7911 0010 5DF8047B 		ldr	r7, [sp], #4
 7912              	.LCFI667:
 7913              		.cfi_restore 7
 7914              		.cfi_def_cfa_offset 0
 7915 0014 7047     		bx	lr
 7916              		.cfi_endproc
 7917              	.LFE3728:
 7919              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv,"axG",%progbits,_ZNSt22_Op
 7920              		.align	1
 7921              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv
 7922              		.syntax unified
 7923              		.thumb
 7924              		.thumb_func
 7925              		.fpu fpv4-sp-d16
 7927              	_ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv:
 7928              	.LFB3729:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
ARM GAS  /tmp/ccSXOI3d.s 			page 240


 7929              		.loc 2 257 7
 7930              		.cfi_startproc
 7931              		@ args = 0, pretend = 0, frame = 8
 7932              		@ frame_needed = 1, uses_anonymous_args = 0
 7933              		@ link register save eliminated.
 7934 0000 80B4     		push	{r7}
 7935              	.LCFI668:
 7936              		.cfi_def_cfa_offset 4
 7937              		.cfi_offset 7, -4
 7938 0002 83B0     		sub	sp, sp, #12
 7939              	.LCFI669:
 7940              		.cfi_def_cfa_offset 16
 7941 0004 00AF     		add	r7, sp, #0
 7942              	.LCFI670:
 7943              		.cfi_def_cfa_register 7
 7944 0006 7860     		str	r0, [r7, #4]
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 7945              		.loc 2 259 13
 7946 0008 7B68     		ldr	r3, [r7, #4]
 7947 000a 0022     		movs	r2, #0
 7948 000c 1A72     		strb	r2, [r3, #8]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7949              		.loc 2 261 7
 7950 000e 00BF     		nop
 7951 0010 0C37     		adds	r7, r7, #12
 7952              	.LCFI671:
 7953              		.cfi_def_cfa_offset 4
 7954 0012 BD46     		mov	sp, r7
 7955              	.LCFI672:
 7956              		.cfi_def_cfa_register 13
 7957              		@ sp needed
 7958 0014 5DF8047B 		ldr	r7, [sp], #4
 7959              	.LCFI673:
 7960              		.cfi_restore 7
 7961              		.cfi_def_cfa_offset 0
 7962 0018 7047     		bx	lr
 7963              		.cfi_endproc
 7964              	.LFE3729:
 7966              		.section	.text._ZNSt22_Optional_payload_baseIfE6_M_getEv,"axG",%progbits,_ZNSt22_Optional_payload_
 7967              		.align	1
 7968              		.weak	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 7969              		.syntax unified
 7970              		.thumb
 7971              		.thumb_func
 7972              		.fpu fpv4-sp-d16
 7974              	_ZNSt22_Optional_payload_baseIfE6_M_getEv:
 7975              	.LFB3730:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 7976              		.loc 2 268 7
 7977              		.cfi_startproc
 7978              		@ args = 0, pretend = 0, frame = 8
 7979              		@ frame_needed = 1, uses_anonymous_args = 0
 7980              		@ link register save eliminated.
 7981 0000 80B4     		push	{r7}
 7982              	.LCFI674:
 7983              		.cfi_def_cfa_offset 4
 7984              		.cfi_offset 7, -4
ARM GAS  /tmp/ccSXOI3d.s 			page 241


 7985 0002 83B0     		sub	sp, sp, #12
 7986              	.LCFI675:
 7987              		.cfi_def_cfa_offset 16
 7988 0004 00AF     		add	r7, sp, #0
 7989              	.LCFI676:
 7990              		.cfi_def_cfa_register 7
 7991 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7992              		.loc 2 269 33
 7993 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7994              		.loc 2 269 43
 7995 000a 1846     		mov	r0, r3
 7996 000c 0C37     		adds	r7, r7, #12
 7997              	.LCFI677:
 7998              		.cfi_def_cfa_offset 4
 7999 000e BD46     		mov	sp, r7
 8000              	.LCFI678:
 8001              		.cfi_def_cfa_register 13
 8002              		@ sp needed
 8003 0010 5DF8047B 		ldr	r7, [sp], #4
 8004              	.LCFI679:
 8005              		.cfi_restore 7
 8006              		.cfi_def_cfa_offset 0
 8007 0014 7047     		bx	lr
 8008              		.cfi_endproc
 8009              	.LFE3730:
 8011              		.section	.text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv,"axG"
 8012              		.align	1
 8013              		.weak	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 8014              		.syntax unified
 8015              		.thumb
 8016              		.thumb_func
 8017              		.fpu fpv4-sp-d16
 8019              	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:
 8020              	.LFB3731:
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
 8021              		.loc 3 1559 22
 8022              		.cfi_startproc
 8023              		@ args = 0, pretend = 0, frame = 8
 8024              		@ frame_needed = 1, uses_anonymous_args = 0
 8025 0000 80B5     		push	{r7, lr}
 8026              	.LCFI680:
 8027              		.cfi_def_cfa_offset 8
 8028              		.cfi_offset 7, -8
 8029              		.cfi_offset 14, -4
 8030 0002 82B0     		sub	sp, sp, #8
 8031              	.LCFI681:
 8032              		.cfi_def_cfa_offset 16
 8033 0004 00AF     		add	r7, sp, #0
 8034              	.LCFI682:
 8035              		.cfi_def_cfa_register 7
 8036 0006 7860     		str	r0, [r7, #4]
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8037              		.loc 3 1560 31
 8038 0008 7B68     		ldr	r3, [r7, #4]
 8039 000a 1846     		mov	r0, r3
ARM GAS  /tmp/ccSXOI3d.s 			page 242


 8040 000c FFF7FEFF 		bl	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv
 8041 0010 0346     		mov	r3, r0
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8042              		.loc 3 1560 32
 8043 0012 83F00103 		eor	r3, r3, #1
 8044 0016 DBB2     		uxtb	r3, r3
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8045              		.loc 3 1560 35
 8046 0018 1846     		mov	r0, r3
 8047 001a 0837     		adds	r7, r7, #8
 8048              	.LCFI683:
 8049              		.cfi_def_cfa_offset 8
 8050 001c BD46     		mov	sp, r7
 8051              	.LCFI684:
 8052              		.cfi_def_cfa_register 13
 8053              		@ sp needed
 8054 001e 80BD     		pop	{r7, pc}
 8055              		.cfi_endproc
 8056              	.LFE3731:
 8058              		.section	.text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_refer
 8059              		.align	1
 8060              		.weak	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E
 8061              		.syntax unified
 8062              		.thumb
 8063              		.thumb_func
 8064              		.fpu fpv4-sp-d16
 8066              	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:
 8067              	.LFB3732:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8068              		.loc 12 76 5
 8069              		.cfi_startproc
 8070              		@ args = 0, pretend = 0, frame = 8
 8071              		@ frame_needed = 1, uses_anonymous_args = 0
 8072              		@ link register save eliminated.
 8073 0000 80B4     		push	{r7}
 8074              	.LCFI685:
 8075              		.cfi_def_cfa_offset 4
 8076              		.cfi_offset 7, -4
 8077 0002 83B0     		sub	sp, sp, #12
 8078              	.LCFI686:
 8079              		.cfi_def_cfa_offset 16
 8080 0004 00AF     		add	r7, sp, #0
 8081              	.LCFI687:
 8082              		.cfi_def_cfa_register 7
 8083 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8084              		.loc 12 77 36
 8085 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8086              		.loc 12 77 39
 8087 000a 1846     		mov	r0, r3
 8088 000c 0C37     		adds	r7, r7, #12
 8089              	.LCFI688:
 8090              		.cfi_def_cfa_offset 4
 8091 000e BD46     		mov	sp, r7
 8092              	.LCFI689:
 8093              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccSXOI3d.s 			page 243


 8094              		@ sp needed
 8095 0010 5DF8047B 		ldr	r7, [sp], #4
 8096              	.LCFI690:
 8097              		.cfi_restore 7
 8098              		.cfi_def_cfa_offset 0
 8099 0014 7047     		bx	lr
 8100              		.cfi_endproc
 8101              	.LFE3732:
 8103              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPort
 8104              		.align	1
 8105              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEE
 8106              		.syntax unified
 8107              		.thumb
 8108              		.thumb_func
 8109              		.fpu fpv4-sp-d16
 8111              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt
 8112              	.LFB3733:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8113              		.loc 12 76 5
 8114              		.cfi_startproc
 8115              		@ args = 0, pretend = 0, frame = 8
 8116              		@ frame_needed = 1, uses_anonymous_args = 0
 8117              		@ link register save eliminated.
 8118 0000 80B4     		push	{r7}
 8119              	.LCFI691:
 8120              		.cfi_def_cfa_offset 4
 8121              		.cfi_offset 7, -4
 8122 0002 83B0     		sub	sp, sp, #12
 8123              	.LCFI692:
 8124              		.cfi_def_cfa_offset 16
 8125 0004 00AF     		add	r7, sp, #0
 8126              	.LCFI693:
 8127              		.cfi_def_cfa_register 7
 8128 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8129              		.loc 12 77 36
 8130 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8131              		.loc 12 77 39
 8132 000a 1846     		mov	r0, r3
 8133 000c 0C37     		adds	r7, r7, #12
 8134              	.LCFI694:
 8135              		.cfi_def_cfa_offset 4
 8136 000e BD46     		mov	sp, r7
 8137              	.LCFI695:
 8138              		.cfi_def_cfa_register 13
 8139              		@ sp needed
 8140 0010 5DF8047B 		ldr	r7, [sp], #4
 8141              	.LCFI696:
 8142              		.cfi_restore 7
 8143              		.cfi_def_cfa_offset 0
 8144 0014 7047     		bx	lr
 8145              		.cfi_endproc
 8146              	.LFE3733:
 8148              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4
 8149              		.align	1
 8150              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_
ARM GAS  /tmp/ccSXOI3d.s 			page 244


 8151              		.syntax unified
 8152              		.thumb
 8153              		.thumb_func
 8154              		.fpu fpv4-sp-d16
 8156              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16r
 8157              	.LFB3734:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8158              		.loc 12 76 5
 8159              		.cfi_startproc
 8160              		@ args = 0, pretend = 0, frame = 8
 8161              		@ frame_needed = 1, uses_anonymous_args = 0
 8162              		@ link register save eliminated.
 8163 0000 80B4     		push	{r7}
 8164              	.LCFI697:
 8165              		.cfi_def_cfa_offset 4
 8166              		.cfi_offset 7, -4
 8167 0002 83B0     		sub	sp, sp, #12
 8168              	.LCFI698:
 8169              		.cfi_def_cfa_offset 16
 8170 0004 00AF     		add	r7, sp, #0
 8171              	.LCFI699:
 8172              		.cfi_def_cfa_register 7
 8173 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8174              		.loc 12 77 36
 8175 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8176              		.loc 12 77 39
 8177 000a 1846     		mov	r0, r3
 8178 000c 0C37     		adds	r7, r7, #12
 8179              	.LCFI700:
 8180              		.cfi_def_cfa_offset 4
 8181 000e BD46     		mov	sp, r7
 8182              	.LCFI701:
 8183              		.cfi_def_cfa_register 13
 8184              		@ sp needed
 8185 0010 5DF8047B 		ldr	r7, [sp], #4
 8186              	.LCFI702:
 8187              		.cfi_restore 7
 8188              		.cfi_def_cfa_offset 0
 8189 0014 7047     		bx	lr
 8190              		.cfi_endproc
 8191              	.LFE3734:
 8193              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEE
 8194              		.align	1
 8195              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt
 8196              		.syntax unified
 8197              		.thumb
 8198              		.thumb_func
 8199              		.fpu fpv4-sp-d16
 8201              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remov
 8202              	.LFB3735:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8203              		.loc 12 76 5
 8204              		.cfi_startproc
 8205              		@ args = 0, pretend = 0, frame = 8
 8206              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccSXOI3d.s 			page 245


 8207              		@ link register save eliminated.
 8208 0000 80B4     		push	{r7}
 8209              	.LCFI703:
 8210              		.cfi_def_cfa_offset 4
 8211              		.cfi_offset 7, -4
 8212 0002 83B0     		sub	sp, sp, #12
 8213              	.LCFI704:
 8214              		.cfi_def_cfa_offset 16
 8215 0004 00AF     		add	r7, sp, #0
 8216              	.LCFI705:
 8217              		.cfi_def_cfa_register 7
 8218 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8219              		.loc 12 77 36
 8220 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8221              		.loc 12 77 39
 8222 000a 1846     		mov	r0, r3
 8223 000c 0C37     		adds	r7, r7, #12
 8224              	.LCFI706:
 8225              		.cfi_def_cfa_offset 4
 8226 000e BD46     		mov	sp, r7
 8227              	.LCFI707:
 8228              		.cfi_def_cfa_register 13
 8229              		@ sp needed
 8230 0010 5DF8047B 		ldr	r7, [sp], #4
 8231              	.LCFI708:
 8232              		.cfi_restore 7
 8233              		.cfi_def_cfa_offset 0
 8234 0014 7047     		bx	lr
 8235              		.cfi_endproc
 8236              	.LFE3735:
 8238              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv,
 8239              		.align	1
 8240              		.weak	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
 8241              		.syntax unified
 8242              		.thumb
 8243              		.thumb_func
 8244              		.fpu fpv4-sp-d16
 8246              	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:
 8247              	.LFB3736:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8248              		.loc 3 222 24
 8249              		.cfi_startproc
 8250              		@ args = 0, pretend = 0, frame = 8
 8251              		@ frame_needed = 1, uses_anonymous_args = 0
 8252              		@ link register save eliminated.
 8253 0000 80B4     		push	{r7}
 8254              	.LCFI709:
 8255              		.cfi_def_cfa_offset 4
 8256              		.cfi_offset 7, -4
 8257 0002 83B0     		sub	sp, sp, #12
 8258              	.LCFI710:
 8259              		.cfi_def_cfa_offset 16
 8260 0004 00AF     		add	r7, sp, #0
 8261              	.LCFI711:
 8262              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccSXOI3d.s 			page 246


 8263 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8264              		.loc 3 223 16
 8265 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8266              		.loc 3 223 28
 8267 000a 1846     		mov	r0, r3
 8268 000c 0C37     		adds	r7, r7, #12
 8269              	.LCFI712:
 8270              		.cfi_def_cfa_offset 4
 8271 000e BD46     		mov	sp, r7
 8272              	.LCFI713:
 8273              		.cfi_def_cfa_register 13
 8274              		@ sp needed
 8275 0010 5DF8047B 		ldr	r7, [sp], #4
 8276              	.LCFI714:
 8277              		.cfi_restore 7
 8278              		.cfi_def_cfa_offset 0
 8279 0014 7047     		bx	lr
 8280              		.cfi_endproc
 8281              	.LFE3736:
 8283              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv,"axG",%progbit
 8284              		.align	1
 8285              		.weak	_ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv
 8286              		.syntax unified
 8287              		.thumb
 8288              		.thumb_func
 8289              		.fpu fpv4-sp-d16
 8291              	_ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv:
 8292              	.LFB3737:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8293              		.loc 3 222 24
 8294              		.cfi_startproc
 8295              		@ args = 0, pretend = 0, frame = 8
 8296              		@ frame_needed = 1, uses_anonymous_args = 0
 8297              		@ link register save eliminated.
 8298 0000 80B4     		push	{r7}
 8299              	.LCFI715:
 8300              		.cfi_def_cfa_offset 4
 8301              		.cfi_offset 7, -4
 8302 0002 83B0     		sub	sp, sp, #12
 8303              	.LCFI716:
 8304              		.cfi_def_cfa_offset 16
 8305 0004 00AF     		add	r7, sp, #0
 8306              	.LCFI717:
 8307              		.cfi_def_cfa_register 7
 8308 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8309              		.loc 3 223 16
 8310 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8311              		.loc 3 223 28
 8312 000a 1846     		mov	r0, r3
 8313 000c 0C37     		adds	r7, r7, #12
 8314              	.LCFI718:
 8315              		.cfi_def_cfa_offset 4
 8316 000e BD46     		mov	sp, r7
ARM GAS  /tmp/ccSXOI3d.s 			page 247


 8317              	.LCFI719:
 8318              		.cfi_def_cfa_register 13
 8319              		@ sp needed
 8320 0010 5DF8047B 		ldr	r7, [sp], #4
 8321              	.LCFI720:
 8322              		.cfi_restore 7
 8323              		.cfi_def_cfa_offset 0
 8324 0014 7047     		bx	lr
 8325              		.cfi_endproc
 8326              	.LFE3737:
 8328              		.section	.text._ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv,"axG",%progbits
 8329              		.align	1
 8330              		.weak	_ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv
 8331              		.syntax unified
 8332              		.thumb
 8333              		.thumb_func
 8334              		.fpu fpv4-sp-d16
 8336              	_ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv:
 8337              	.LFB3738:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8338              		.loc 3 222 24
 8339              		.cfi_startproc
 8340              		@ args = 0, pretend = 0, frame = 8
 8341              		@ frame_needed = 1, uses_anonymous_args = 0
 8342              		@ link register save eliminated.
 8343 0000 80B4     		push	{r7}
 8344              	.LCFI721:
 8345              		.cfi_def_cfa_offset 4
 8346              		.cfi_offset 7, -4
 8347 0002 83B0     		sub	sp, sp, #12
 8348              	.LCFI722:
 8349              		.cfi_def_cfa_offset 16
 8350 0004 00AF     		add	r7, sp, #0
 8351              	.LCFI723:
 8352              		.cfi_def_cfa_register 7
 8353 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8354              		.loc 3 223 16
 8355 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8356              		.loc 3 223 28
 8357 000a 1846     		mov	r0, r3
 8358 000c 0C37     		adds	r7, r7, #12
 8359              	.LCFI724:
 8360              		.cfi_def_cfa_offset 4
 8361 000e BD46     		mov	sp, r7
 8362              	.LCFI725:
 8363              		.cfi_def_cfa_register 13
 8364              		@ sp needed
 8365 0010 5DF8047B 		ldr	r7, [sp], #4
 8366              	.LCFI726:
 8367              		.cfi_restore 7
 8368              		.cfi_def_cfa_offset 0
 8369 0014 7047     		bx	lr
 8370              		.cfi_endproc
 8371              	.LFE3738:
 8373              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv,"axG",%progbits,_ZN
ARM GAS  /tmp/ccSXOI3d.s 			page 248


 8374              		.align	1
 8375              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 8376              		.syntax unified
 8377              		.thumb
 8378              		.thumb_func
 8379              		.fpu fpv4-sp-d16
 8381              	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:
 8382              	.LFB3739:
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
 8383              		.loc 3 1559 22
 8384              		.cfi_startproc
 8385              		@ args = 0, pretend = 0, frame = 8
 8386              		@ frame_needed = 1, uses_anonymous_args = 0
 8387 0000 80B5     		push	{r7, lr}
 8388              	.LCFI727:
 8389              		.cfi_def_cfa_offset 8
 8390              		.cfi_offset 7, -8
 8391              		.cfi_offset 14, -4
 8392 0002 82B0     		sub	sp, sp, #8
 8393              	.LCFI728:
 8394              		.cfi_def_cfa_offset 16
 8395 0004 00AF     		add	r7, sp, #0
 8396              	.LCFI729:
 8397              		.cfi_def_cfa_register 7
 8398 0006 7860     		str	r0, [r7, #4]
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8399              		.loc 3 1560 31
 8400 0008 7B68     		ldr	r3, [r7, #4]
 8401 000a 1846     		mov	r0, r3
 8402 000c FFF7FEFF 		bl	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 8403 0010 0346     		mov	r3, r0
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8404              		.loc 3 1560 32
 8405 0012 83F00103 		eor	r3, r3, #1
 8406 0016 DBB2     		uxtb	r3, r3
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8407              		.loc 3 1560 35
 8408 0018 1846     		mov	r0, r3
 8409 001a 0837     		adds	r7, r7, #8
 8410              	.LCFI730:
 8411              		.cfi_def_cfa_offset 8
 8412 001c BD46     		mov	sp, r7
 8413              	.LCFI731:
 8414              		.cfi_def_cfa_register 13
 8415              		@ sp needed
 8416 001e 80BD     		pop	{r7, pc}
 8417              		.cfi_endproc
 8418              	.LFE3739:
 8420              		.section	.text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4type
 8421              		.align	1
 8422              		.weak	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 8423              		.syntax unified
 8424              		.thumb
 8425              		.thumb_func
 8426              		.fpu fpv4-sp-d16
 8428              	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:
 8429              	.LFB3740:
ARM GAS  /tmp/ccSXOI3d.s 			page 249


  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8430              		.loc 12 76 5
 8431              		.cfi_startproc
 8432              		@ args = 0, pretend = 0, frame = 8
 8433              		@ frame_needed = 1, uses_anonymous_args = 0
 8434              		@ link register save eliminated.
 8435 0000 80B4     		push	{r7}
 8436              	.LCFI732:
 8437              		.cfi_def_cfa_offset 4
 8438              		.cfi_offset 7, -4
 8439 0002 83B0     		sub	sp, sp, #12
 8440              	.LCFI733:
 8441              		.cfi_def_cfa_offset 16
 8442 0004 00AF     		add	r7, sp, #0
 8443              	.LCFI734:
 8444              		.cfi_def_cfa_register 7
 8445 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8446              		.loc 12 77 36
 8447 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8448              		.loc 12 77 39
 8449 000a 1846     		mov	r0, r3
 8450 000c 0C37     		adds	r7, r7, #12
 8451              	.LCFI735:
 8452              		.cfi_def_cfa_offset 4
 8453 000e BD46     		mov	sp, r7
 8454              	.LCFI736:
 8455              		.cfi_def_cfa_register 13
 8456              		@ sp needed
 8457 0010 5DF8047B 		ldr	r7, [sp], #4
 8458              	.LCFI737:
 8459              		.cfi_restore 7
 8460              		.cfi_def_cfa_offset 0
 8461 0014 7047     		bx	lr
 8462              		.cfi_endproc
 8463              	.LFE3740:
 8465              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RN
 8466              		.align	1
 8467              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remov
 8468              		.syntax unified
 8469              		.thumb
 8470              		.thumb_func
 8471              		.fpu fpv4-sp-d16
 8473              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_refer
 8474              	.LFB3741:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8475              		.loc 12 76 5
 8476              		.cfi_startproc
 8477              		@ args = 0, pretend = 0, frame = 8
 8478              		@ frame_needed = 1, uses_anonymous_args = 0
 8479              		@ link register save eliminated.
 8480 0000 80B4     		push	{r7}
 8481              	.LCFI738:
 8482              		.cfi_def_cfa_offset 4
 8483              		.cfi_offset 7, -4
 8484 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccSXOI3d.s 			page 250


 8485              	.LCFI739:
 8486              		.cfi_def_cfa_offset 16
 8487 0004 00AF     		add	r7, sp, #0
 8488              	.LCFI740:
 8489              		.cfi_def_cfa_register 7
 8490 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8491              		.loc 12 77 36
 8492 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8493              		.loc 12 77 39
 8494 000a 1846     		mov	r0, r3
 8495 000c 0C37     		adds	r7, r7, #12
 8496              	.LCFI741:
 8497              		.cfi_def_cfa_offset 4
 8498 000e BD46     		mov	sp, r7
 8499              	.LCFI742:
 8500              		.cfi_def_cfa_register 13
 8501              		@ sp needed
 8502 0010 5DF8047B 		ldr	r7, [sp], #4
 8503              	.LCFI743:
 8504              		.cfi_restore 7
 8505              		.cfi_def_cfa_offset 0
 8506 0014 7047     		bx	lr
 8507              		.cfi_endproc
 8508              	.LFE3741:
 8510              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNS
 8511              		.align	1
 8512              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove
 8513              		.syntax unified
 8514              		.thumb
 8515              		.thumb_func
 8516              		.fpu fpv4-sp-d16
 8518              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_refere
 8519              	.LFB3742:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8520              		.loc 12 76 5
 8521              		.cfi_startproc
 8522              		@ args = 0, pretend = 0, frame = 8
 8523              		@ frame_needed = 1, uses_anonymous_args = 0
 8524              		@ link register save eliminated.
 8525 0000 80B4     		push	{r7}
 8526              	.LCFI744:
 8527              		.cfi_def_cfa_offset 4
 8528              		.cfi_offset 7, -4
 8529 0002 83B0     		sub	sp, sp, #12
 8530              	.LCFI745:
 8531              		.cfi_def_cfa_offset 16
 8532 0004 00AF     		add	r7, sp, #0
 8533              	.LCFI746:
 8534              		.cfi_def_cfa_register 7
 8535 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8536              		.loc 12 77 36
 8537 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8538              		.loc 12 77 39
ARM GAS  /tmp/ccSXOI3d.s 			page 251


 8539 000a 1846     		mov	r0, r3
 8540 000c 0C37     		adds	r7, r7, #12
 8541              	.LCFI747:
 8542              		.cfi_def_cfa_offset 4
 8543 000e BD46     		mov	sp, r7
 8544              	.LCFI748:
 8545              		.cfi_def_cfa_register 13
 8546              		@ sp needed
 8547 0010 5DF8047B 		ldr	r7, [sp], #4
 8548              	.LCFI749:
 8549              		.cfi_restore 7
 8550              		.cfi_def_cfa_offset 0
 8551 0014 7047     		bx	lr
 8552              		.cfi_endproc
 8553              	.LFE3742:
 8555              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt1
 8556              		.align	1
 8557              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_r
 8558              		.syntax unified
 8559              		.thumb
 8560              		.thumb_func
 8561              		.fpu fpv4-sp-d16
 8563              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenc
 8564              	.LFB3743:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8565              		.loc 12 76 5
 8566              		.cfi_startproc
 8567              		@ args = 0, pretend = 0, frame = 8
 8568              		@ frame_needed = 1, uses_anonymous_args = 0
 8569              		@ link register save eliminated.
 8570 0000 80B4     		push	{r7}
 8571              	.LCFI750:
 8572              		.cfi_def_cfa_offset 4
 8573              		.cfi_offset 7, -4
 8574 0002 83B0     		sub	sp, sp, #12
 8575              	.LCFI751:
 8576              		.cfi_def_cfa_offset 16
 8577 0004 00AF     		add	r7, sp, #0
 8578              	.LCFI752:
 8579              		.cfi_def_cfa_register 7
 8580 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8581              		.loc 12 77 36
 8582 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8583              		.loc 12 77 39
 8584 000a 1846     		mov	r0, r3
 8585 000c 0C37     		adds	r7, r7, #12
 8586              	.LCFI753:
 8587              		.cfi_def_cfa_offset 4
 8588 000e BD46     		mov	sp, r7
 8589              	.LCFI754:
 8590              		.cfi_def_cfa_register 13
 8591              		@ sp needed
 8592 0010 5DF8047B 		ldr	r7, [sp], #4
 8593              	.LCFI755:
 8594              		.cfi_restore 7
ARM GAS  /tmp/ccSXOI3d.s 			page 252


 8595              		.cfi_def_cfa_offset 0
 8596 0014 7047     		bx	lr
 8597              		.cfi_endproc
 8598              	.LFE3743:
 8600              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv,"axG",%pro
 8601              		.align	1
 8602              		.weak	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 8603              		.syntax unified
 8604              		.thumb
 8605              		.thumb_func
 8606              		.fpu fpv4-sp-d16
 8608              	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:
 8609              	.LFB3744:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8610              		.loc 3 222 24
 8611              		.cfi_startproc
 8612              		@ args = 0, pretend = 0, frame = 8
 8613              		@ frame_needed = 1, uses_anonymous_args = 0
 8614              		@ link register save eliminated.
 8615 0000 80B4     		push	{r7}
 8616              	.LCFI756:
 8617              		.cfi_def_cfa_offset 4
 8618              		.cfi_offset 7, -4
 8619 0002 83B0     		sub	sp, sp, #12
 8620              	.LCFI757:
 8621              		.cfi_def_cfa_offset 16
 8622 0004 00AF     		add	r7, sp, #0
 8623              	.LCFI758:
 8624              		.cfi_def_cfa_register 7
 8625 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8626              		.loc 3 223 16
 8627 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8628              		.loc 3 223 28
 8629 000a 1846     		mov	r0, r3
 8630 000c 0C37     		adds	r7, r7, #12
 8631              	.LCFI759:
 8632              		.cfi_def_cfa_offset 4
 8633 000e BD46     		mov	sp, r7
 8634              	.LCFI760:
 8635              		.cfi_def_cfa_register 13
 8636              		@ sp needed
 8637 0010 5DF8047B 		ldr	r7, [sp], #4
 8638              	.LCFI761:
 8639              		.cfi_restore 7
 8640              		.cfi_def_cfa_offset 0
 8641 0014 7047     		bx	lr
 8642              		.cfi_endproc
 8643              	.LFE3744:
 8645              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv,"axG",%progbits,_ZNRSt8_
 8646              		.align	1
 8647              		.weak	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
 8648              		.syntax unified
 8649              		.thumb
 8650              		.thumb_func
 8651              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccSXOI3d.s 			page 253


 8653              	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:
 8654              	.LFB3745:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8655              		.loc 3 222 24
 8656              		.cfi_startproc
 8657              		@ args = 0, pretend = 0, frame = 8
 8658              		@ frame_needed = 1, uses_anonymous_args = 0
 8659              		@ link register save eliminated.
 8660 0000 80B4     		push	{r7}
 8661              	.LCFI762:
 8662              		.cfi_def_cfa_offset 4
 8663              		.cfi_offset 7, -4
 8664 0002 83B0     		sub	sp, sp, #12
 8665              	.LCFI763:
 8666              		.cfi_def_cfa_offset 16
 8667 0004 00AF     		add	r7, sp, #0
 8668              	.LCFI764:
 8669              		.cfi_def_cfa_register 7
 8670 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8671              		.loc 3 223 16
 8672 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8673              		.loc 3 223 28
 8674 000a 1846     		mov	r0, r3
 8675 000c 0C37     		adds	r7, r7, #12
 8676              	.LCFI765:
 8677              		.cfi_def_cfa_offset 4
 8678 000e BD46     		mov	sp, r7
 8679              	.LCFI766:
 8680              		.cfi_def_cfa_register 13
 8681              		@ sp needed
 8682 0010 5DF8047B 		ldr	r7, [sp], #4
 8683              	.LCFI767:
 8684              		.cfi_restore 7
 8685              		.cfi_def_cfa_offset 0
 8686 0014 7047     		bx	lr
 8687              		.cfi_endproc
 8688              	.LFE3745:
 8690              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv,"axG",%progbits,_ZNRSt8__
 8691              		.align	1
 8692              		.weak	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
 8693              		.syntax unified
 8694              		.thumb
 8695              		.thumb_func
 8696              		.fpu fpv4-sp-d16
 8698              	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:
 8699              	.LFB3746:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8700              		.loc 3 222 24
 8701              		.cfi_startproc
 8702              		@ args = 0, pretend = 0, frame = 8
 8703              		@ frame_needed = 1, uses_anonymous_args = 0
 8704              		@ link register save eliminated.
 8705 0000 80B4     		push	{r7}
 8706              	.LCFI768:
 8707              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccSXOI3d.s 			page 254


 8708              		.cfi_offset 7, -4
 8709 0002 83B0     		sub	sp, sp, #12
 8710              	.LCFI769:
 8711              		.cfi_def_cfa_offset 16
 8712 0004 00AF     		add	r7, sp, #0
 8713              	.LCFI770:
 8714              		.cfi_def_cfa_register 7
 8715 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8716              		.loc 3 223 16
 8717 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8718              		.loc 3 223 28
 8719 000a 1846     		mov	r0, r3
 8720 000c 0C37     		adds	r7, r7, #12
 8721              	.LCFI771:
 8722              		.cfi_def_cfa_offset 4
 8723 000e BD46     		mov	sp, r7
 8724              	.LCFI772:
 8725              		.cfi_def_cfa_register 13
 8726              		@ sp needed
 8727 0010 5DF8047B 		ldr	r7, [sp], #4
 8728              	.LCFI773:
 8729              		.cfi_restore 7
 8730              		.cfi_def_cfa_offset 0
 8731 0014 7047     		bx	lr
 8732              		.cfi_endproc
 8733              	.LFE3746:
 8735              		.section	.text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv,"axG",%progbits,_ZNSt22_Optional_pay
 8736              		.align	1
 8737              		.weak	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv
 8738              		.syntax unified
 8739              		.thumb
 8740              		.thumb_func
 8741              		.fpu fpv4-sp-d16
 8743              	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv:
 8744              	.LFB3757:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 8745              		.loc 2 257 7
 8746              		.cfi_startproc
 8747              		@ args = 0, pretend = 0, frame = 8
 8748              		@ frame_needed = 1, uses_anonymous_args = 0
 8749              		@ link register save eliminated.
 8750 0000 80B4     		push	{r7}
 8751              	.LCFI774:
 8752              		.cfi_def_cfa_offset 4
 8753              		.cfi_offset 7, -4
 8754 0002 83B0     		sub	sp, sp, #12
 8755              	.LCFI775:
 8756              		.cfi_def_cfa_offset 16
 8757 0004 00AF     		add	r7, sp, #0
 8758              	.LCFI776:
 8759              		.cfi_def_cfa_register 7
 8760 0006 7860     		str	r0, [r7, #4]
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 8761              		.loc 2 259 13
 8762 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccSXOI3d.s 			page 255


 8763 000a 0022     		movs	r2, #0
 8764 000c 1A71     		strb	r2, [r3, #4]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8765              		.loc 2 261 7
 8766 000e 00BF     		nop
 8767 0010 0C37     		adds	r7, r7, #12
 8768              	.LCFI777:
 8769              		.cfi_def_cfa_offset 4
 8770 0012 BD46     		mov	sp, r7
 8771              	.LCFI778:
 8772              		.cfi_def_cfa_register 13
 8773              		@ sp needed
 8774 0014 5DF8047B 		ldr	r7, [sp], #4
 8775              	.LCFI779:
 8776              		.cfi_restore 7
 8777              		.cfi_def_cfa_offset 0
 8778 0018 7047     		bx	lr
 8779              		.cfi_endproc
 8780              	.LFE3757:
 8782              		.section	.text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EE
 8783              		.align	1
 8784              		.weak	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_vali
 8785              		.syntax unified
 8786              		.thumb
 8787              		.thumb_func
 8788              		.fpu fpv4-sp-d16
 8790              	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:
 8791              	.LFB3758:
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 8792              		.loc 3 462 7
 8793              		.cfi_startproc
 8794              		@ args = 0, pretend = 0, frame = 8
 8795              		@ frame_needed = 1, uses_anonymous_args = 0
 8796              		@ link register save eliminated.
 8797 0000 80B4     		push	{r7}
 8798              	.LCFI780:
 8799              		.cfi_def_cfa_offset 4
 8800              		.cfi_offset 7, -4
 8801 0002 83B0     		sub	sp, sp, #12
 8802              	.LCFI781:
 8803              		.cfi_def_cfa_offset 16
 8804 0004 00AF     		add	r7, sp, #0
 8805              	.LCFI782:
 8806              		.cfi_def_cfa_register 7
 8807 0006 7860     		str	r0, [r7, #4]
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 8808              		.loc 3 466 15
 8809 0008 7B68     		ldr	r3, [r7, #4]
 8810 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 8811              		.loc 3 466 65
 8812 000c FF2B     		cmp	r3, #255
 8813 000e 14BF     		ite	ne
 8814 0010 0123     		movne	r3, #1
 8815 0012 0023     		moveq	r3, #0
 8816 0014 DBB2     		uxtb	r3, r3
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccSXOI3d.s 			page 256


 8817              		.loc 3 467 7
 8818 0016 1846     		mov	r0, r3
 8819 0018 0C37     		adds	r7, r7, #12
 8820              	.LCFI783:
 8821              		.cfi_def_cfa_offset 4
 8822 001a BD46     		mov	sp, r7
 8823              	.LCFI784:
 8824              		.cfi_def_cfa_register 13
 8825              		@ sp needed
 8826 001c 5DF8047B 		ldr	r7, [sp], #4
 8827              	.LCFI785:
 8828              		.cfi_restore 7
 8829              		.cfi_def_cfa_offset 0
 8830 0020 7047     		bx	lr
 8831              		.cfi_endproc
 8832              	.LFE3758:
 8834              		.section	.text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv,"
 8835              		.align	1
 8836              		.weak	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 8837              		.syntax unified
 8838              		.thumb
 8839              		.thumb_func
 8840              		.fpu fpv4-sp-d16
 8842              	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:
 8843              	.LFB3759:
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 8844              		.loc 3 462 7
 8845              		.cfi_startproc
 8846              		@ args = 0, pretend = 0, frame = 8
 8847              		@ frame_needed = 1, uses_anonymous_args = 0
 8848              		@ link register save eliminated.
 8849 0000 80B4     		push	{r7}
 8850              	.LCFI786:
 8851              		.cfi_def_cfa_offset 4
 8852              		.cfi_offset 7, -4
 8853 0002 83B0     		sub	sp, sp, #12
 8854              	.LCFI787:
 8855              		.cfi_def_cfa_offset 16
 8856 0004 00AF     		add	r7, sp, #0
 8857              	.LCFI788:
 8858              		.cfi_def_cfa_register 7
 8859 0006 7860     		str	r0, [r7, #4]
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 8860              		.loc 3 465 11
 8861 0008 0123     		movs	r3, #1
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8862              		.loc 3 467 7
 8863 000a 1846     		mov	r0, r3
 8864 000c 0C37     		adds	r7, r7, #12
 8865              	.LCFI789:
 8866              		.cfi_def_cfa_offset 4
 8867 000e BD46     		mov	sp, r7
 8868              	.LCFI790:
 8869              		.cfi_def_cfa_register 13
 8870              		@ sp needed
 8871 0010 5DF8047B 		ldr	r7, [sp], #4
 8872              	.LCFI791:
ARM GAS  /tmp/ccSXOI3d.s 			page 257


 8873              		.cfi_restore 7
 8874              		.cfi_def_cfa_offset 0
 8875 0014 7047     		bx	lr
 8876              		.cfi_endproc
 8877              	.LFE3759:
 8879              		.global	_ZTV23FieldOrientedController
 8880              		.section	.rodata._ZTV23FieldOrientedController,"a"
 8881              		.align	2
 8884              	_ZTV23FieldOrientedController:
 8885 0000 00000000 		.word	0
 8886 0004 00000000 		.word	0
 8887 0008 00000000 		.word	_ZN23FieldOrientedController5resetEv
 8888 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 8889 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 8890 0014 00000000 		.word	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 8891 0018 00000000 		.word	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 8892 001c 00000000 		.word	_ZN23FieldOrientedController6updateEm
 8893 0020 FCFFFFFF 		.word	-4
 8894 0024 00000000 		.word	0
 8895 0028 00000000 		.word	_ZThn4_N23FieldOrientedController6updateEm
 8896              		.global	_ZTV24AlphaBetaFrameController
 8897              		.section	.rodata._ZTV24AlphaBetaFrameController,"a"
 8898              		.align	2
 8901              	_ZTV24AlphaBetaFrameController:
 8902 0000 00000000 		.word	0
 8903 0004 00000000 		.word	0
 8904 0008 00000000 		.word	__cxa_pure_virtual
 8905 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 8906 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 8907 0014 00000000 		.word	__cxa_pure_virtual
 8908 0018 00000000 		.word	__cxa_pure_virtual
 8909              		.text
 8910              	.Letext0:
 8911              		.file 16 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 8912              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 8913              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 8914              		.file 19 "Inc/interfaces.hpp"
 8915              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 8916              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 8917              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 8918              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 8919              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 8920              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 8921              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 8922              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 8923              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 8924              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 8925              		.file 30 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 8926              		.file 31 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 8927              		.file 32 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 8928              		.file 33 "Inc/phase_control_law.hpp"
 8929              		.file 34 "<built-in>"
 8930              		.file 35 "Inc/main.h"
ARM GAS  /tmp/ccSXOI3d.s 			page 258


DEFINED SYMBOLS
                            *ABS*:0000000000000000 foc.cpp
     /tmp/ccSXOI3d.s:18     .text._ZnwjPv:0000000000000000 $t
     /tmp/ccSXOI3d.s:26     .text._ZnwjPv:0000000000000000 _ZnwjPv
     /tmp/ccSXOI3d.s:66     .text._ZSt27__throw_bad_optional_accessv:0000000000000000 $t
     /tmp/ccSXOI3d.s:73     .text._ZSt27__throw_bad_optional_accessv:0000000000000000 _ZSt27__throw_bad_optional_accessv
     /tmp/ccSXOI3d.s:94     .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $t
     /tmp/ccSXOI3d.s:101    .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 _ZSt26__throw_bad_variant_accessPKc
     /tmp/ccSXOI3d.s:126    .rodata:0000000000000000 $d
     /tmp/ccSXOI3d.s:133    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 $t
     /tmp/ccSXOI3d.s:140    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 _ZSt26__throw_bad_variant_accessb
     /tmp/ccSXOI3d.s:186    .text._ZSt26__throw_bad_variant_accessb:0000000000000028 $d
     /tmp/ccSXOI3d.s:192    .text.cpu_enter_critical:0000000000000000 $t
     /tmp/ccSXOI3d.s:199    .text.cpu_enter_critical:0000000000000000 cpu_enter_critical
     /tmp/ccSXOI3d.s:267    .text.cpu_exit_critical:0000000000000000 $t
     /tmp/ccSXOI3d.s:274    .text.cpu_exit_critical:0000000000000000 cpu_exit_critical
     /tmp/ccSXOI3d.s:326    .text._ZSt3absl:0000000000000000 $t
     /tmp/ccSXOI3d.s:333    .text._ZSt3absl:0000000000000000 _ZSt3absl
     /tmp/ccSXOI3d.s:375    .text._ZSt4sqrtf:0000000000000000 $t
     /tmp/ccSXOI3d.s:382    .text._ZSt4sqrtf:0000000000000000 _ZSt4sqrtf
     /tmp/ccSXOI3d.s:419    .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccSXOI3d.s:422    .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccSXOI3d.s:425    .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccSXOI3d.s:428    .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccSXOI3d.s:431    .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccSXOI3d.s:434    .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccSXOI3d.s:437    .text._Z6is_nanf:0000000000000000 $t
     /tmp/ccSXOI3d.s:444    .text._Z6is_nanf:0000000000000000 _Z6is_nanf
     /tmp/ccSXOI3d.s:496    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccSXOI3d.s:499    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccSXOI3d.s:502    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccSXOI3d.s:505    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccSXOI3d.s:508    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccSXOI3d.s:511    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccSXOI3d.s:514    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccSXOI3d.s:517    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccSXOI3d.s:520    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccSXOI3d.s:523    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccSXOI3d.s:526    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccSXOI3d.s:529    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccSXOI3d.s:543    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccSXOI3d.s:546    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccSXOI3d.s:549    .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:556    .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
     /tmp/ccSXOI3d.s:593    .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:600    .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
     /tmp/ccSXOI3d.s:600    .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev
     /tmp/ccSXOI3d.s:643    .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:650    .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev
     /tmp/ccSXOI3d.s:650    .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
     /tmp/ccSXOI3d.s:690    .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:697    .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
     /tmp/ccSXOI3d.s:697    .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev
     /tmp/ccSXOI3d.s:737    .text._ZNSt5arrayIfLj3EEixEj:0000000000000000 $t
     /tmp/ccSXOI3d.s:744    .text._ZNSt5arrayIfLj3EEixEj:0000000000000000 _ZNSt5arrayIfLj3EEixEj
     /tmp/ccSXOI3d.s:924    .text._ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj:0000000000000000 _ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj
     /tmp/ccSXOI3d.s:785    .text._ZNRSt8optionalISt5arrayIfLj3EEEdeEv:0000000000000000 $t
ARM GAS  /tmp/ccSXOI3d.s 			page 259


     /tmp/ccSXOI3d.s:792    .text._ZNRSt8optionalISt5arrayIfLj3EEEdeEv:0000000000000000 _ZNRSt8optionalISt5arrayIfLj3EEEdeEv
     /tmp/ccSXOI3d.s:835    .text._ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
     /tmp/ccSXOI3d.s:828    .text._ZNSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:879    .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv
     /tmp/ccSXOI3d.s:872    .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:917    .text._ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj:0000000000000000 $t
     /tmp/ccSXOI3d.s:966    .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 $t
     /tmp/ccSXOI3d.s:973    .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 _ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
     /tmp/ccSXOI3d.s:3279   .text._ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv:0000000000000000 _ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv
     /tmp/ccSXOI3d.s:3322   .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:3385   .text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_:0000000000000000 _ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_
     /tmp/ccSXOI3d.s:1115   .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:00000000000000e4 $d
     /tmp/ccSXOI3d.s:1120   .text._ZNKSt8optionalISt4pairIffEE9has_valueEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:1127   .text._ZNKSt8optionalISt4pairIffEE9has_valueEv:0000000000000000 _ZNKSt8optionalISt4pairIffEE9has_valueEv
     /tmp/ccSXOI3d.s:1170   .text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
     /tmp/ccSXOI3d.s:1163   .text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:1209   .text._ZNSt8optionalISt4pairIffEEptEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:1216   .text._ZNSt8optionalISt4pairIffEEptEv:0000000000000000 _ZNSt8optionalISt4pairIffEEptEv
     /tmp/ccSXOI3d.s:2041   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
     /tmp/ccSXOI3d.s:1996   .text._ZSt11__addressofISt4pairIffEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIffEEPT_RS2_
     /tmp/ccSXOI3d.s:1255   .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 $t
     /tmp/ccSXOI3d.s:1262   .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 _ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
     /tmp/ccSXOI3d.s:1437   .text._ZN23FieldOrientedController5resetEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:1444   .text._ZN23FieldOrientedController5resetEv:0000000000000000 _ZN23FieldOrientedController5resetEv
     /tmp/ccSXOI3d.s:3457   .text._ZNSt8optionalIfEaSESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEaSESt9nullopt_t
     /tmp/ccSXOI3d.s:3502   .text._ZNSt8optionalISt4pairIffEEaSESt9nullopt_t:0000000000000000 _ZNSt8optionalISt4pairIffEEaSESt9nullopt_t
     /tmp/ccSXOI3d.s:1500   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1507   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSERKS2_
     /tmp/ccSXOI3d.s:3547   .text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_
     /tmp/ccSXOI3d.s:1548   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1555   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSERKS2_
     /tmp/ccSXOI3d.s:1594   .text._ZNSt8optionalISt4pairIffEEaSERKS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1601   .text._ZNSt8optionalISt4pairIffEEaSERKS2_:0000000000000000 _ZNSt8optionalISt4pairIffEEaSERKS2_
     /tmp/ccSXOI3d.s:1640   .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccSXOI3d.s:1647   .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccSXOI3d.s:1712   .text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1719   .text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 _ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
     /tmp/ccSXOI3d.s:1812   .text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 _ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
     /tmp/ccSXOI3d.s:1767   .text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:0000000000000000 _ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
     /tmp/ccSXOI3d.s:1760   .text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:0000000000000000 $t
     /tmp/ccSXOI3d.s:1858   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 _ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
     /tmp/ccSXOI3d.s:1805   .text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1851   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:1896   .text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 $t
     /tmp/ccSXOI3d.s:1903   .text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 _ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
     /tmp/ccSXOI3d.s:1950   .text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:0000000000000000 _ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
     /tmp/ccSXOI3d.s:1943   .text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:0000000000000000 $t
     /tmp/ccSXOI3d.s:1989   .text._ZSt11__addressofISt4pairIffEEPT_RS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:2034   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:2085   .text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
     /tmp/ccSXOI3d.s:2078   .text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:2123   .text._ZNRSt8optionalISt4pairIffEEdeEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:2130   .text._ZNRSt8optionalISt4pairIffEEdeEv:0000000000000000 _ZNRSt8optionalISt4pairIffEEdeEv
     /tmp/ccSXOI3d.s:2166   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccSXOI3d.s:2173   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccSXOI3d.s:3637   .text._ZNKSt8optionalIfE9has_valueEv:0000000000000000 _ZNKSt8optionalIfE9has_valueEv
     /tmp/ccSXOI3d.s:3680   .text._ZNRSt8optionalIfEdeEv:0000000000000000 _ZNRSt8optionalIfEdeEv
ARM GAS  /tmp/ccSXOI3d.s 			page 260


     /tmp/ccSXOI3d.s:3723   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IffLb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:2768   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000510 $d
     /tmp/ccSXOI3d.s:2774   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000520 $t
     /tmp/ccSXOI3d.s:3785   .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:4070   .text._ZNSt8optionalIfEC2IfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC1IfLb1EEEOT_
     /tmp/ccSXOI3d.s:4172   .text._ZNRSt8optionalIfE5valueEv:0000000000000000 _ZNRSt8optionalIfE5valueEv
     /tmp/ccSXOI3d.s:2993   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000710 $d
     /tmp/ccSXOI3d.s:2999   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3006   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEaSEOS2_
     /tmp/ccSXOI3d.s:4374   .text._ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 _ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS6_
     /tmp/ccSXOI3d.s:4419   .text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_
     /tmp/ccSXOI3d.s:3052   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3059   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEaSEOS2_
     /tmp/ccSXOI3d.s:3098   .text._ZNSt8optionalISt4pairIffEEaSEOS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3105   .text._ZNSt8optionalISt4pairIffEEaSEOS2_:0000000000000000 _ZNSt8optionalISt4pairIffEEaSEOS2_
     /tmp/ccSXOI3d.s:3144   .text._ZN23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccSXOI3d.s:3151   .text._ZN23FieldOrientedController6updateEm:0000000000000000 _ZN23FieldOrientedController6updateEm
     /tmp/ccSXOI3d.s:4228   .text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 _ZN9InputPortISt4pairIffEE7presentEv
     /tmp/ccSXOI3d.s:4516   .text._ZN9InputPortIfE7presentEv:0000000000000000 _ZN9InputPortIfE7presentEv
     /tmp/ccSXOI3d.s:3151   .text._ZN23FieldOrientedController6updateEm:0000000000000000 .LTHUNK0
     /tmp/ccSXOI3d.s:3252   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccSXOI3d.s:3259   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 _ZThn4_N23FieldOrientedController6updateEm
     /tmp/ccSXOI3d.s:3272   .text._ZNKSt8optionalISt5arrayIfLj3EEE9has_valueEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:4661   .text._ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
     /tmp/ccSXOI3d.s:3315   .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3322   .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:4707   .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 _ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
     /tmp/ccSXOI3d.s:3378   .text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_:0000000000000000 $t
     /tmp/ccSXOI3d.s:4752   .text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccSXOI3d.s:4797   .text._ZNSt4pairIffEaSEOS0_:0000000000000000 _ZNSt4pairIffEaSEOS0_
     /tmp/ccSXOI3d.s:4860   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 _ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_
     /tmp/ccSXOI3d.s:3450   .text._ZNSt8optionalIfEaSESt9nullopt_t:0000000000000000 $t
     /tmp/ccSXOI3d.s:4923   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:0000000000000000 _ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
     /tmp/ccSXOI3d.s:3495   .text._ZNSt8optionalISt4pairIffEEaSESt9nullopt_t:0000000000000000 $t
     /tmp/ccSXOI3d.s:4966   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv:0000000000000000 _ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv
     /tmp/ccSXOI3d.s:3540   .text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_copy_assignERKS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5009   .text._ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 _ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
     /tmp/ccSXOI3d.s:5054   .text._ZNSt4pairIffEaSERKS0_:0000000000000000 _ZNSt4pairIffEaSERKS0_
     /tmp/ccSXOI3d.s:5112   .text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_
     /tmp/ccSXOI3d.s:5175   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv
     /tmp/ccSXOI3d.s:3630   .text._ZNKSt8optionalIfE9has_valueEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:4126   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
     /tmp/ccSXOI3d.s:3673   .text._ZNRSt8optionalIfEdeEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5224   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
     /tmp/ccSXOI3d.s:3716   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3723   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IffLb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:3778   .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3785   .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
     /tmp/ccSXOI3d.s:3840   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3847   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:3847   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:3894   .text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3901   .text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:3901   .text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1IJfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:3954   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:3961   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:3961   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
ARM GAS  /tmp/ccSXOI3d.s 			page 261


     /tmp/ccSXOI3d.s:4006   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:4013   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:4013   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1IJfELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:4063   .text._ZNSt8optionalIfEC2IfLb1EEEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:4070   .text._ZNSt8optionalIfEC2IfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC2IfLb1EEEOT_
     /tmp/ccSXOI3d.s:4119   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:4165   .text._ZNRSt8optionalIfE5valueEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:4221   .text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5268   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:0000000000000000 _ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
     /tmp/ccSXOI3d.s:5513   .text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 _ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_
     /tmp/ccSXOI3d.s:5576   .text._ZN10OutputPortISt4pairIffEE7presentEv:0000000000000000 _ZN10OutputPortISt4pairIffEE7presentEv
     /tmp/ccSXOI3d.s:5635   .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
     /tmp/ccSXOI3d.s:5831   .text._ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 _ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_
     /tmp/ccSXOI3d.s:5894   .text._ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_:0000000000000000 _ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_
     /tmp/ccSXOI3d.s:6038   .text._ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 _ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_
     /tmp/ccSXOI3d.s:6369   .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
     /tmp/ccSXOI3d.s:4367   .text._ZSt4moveIRSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 $t
     /tmp/ccSXOI3d.s:4412   .text._ZNSt22_Optional_payload_baseISt4pairIffEE14_M_move_assignEOS2_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6425   .text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_
     /tmp/ccSXOI3d.s:4509   .text._ZN9InputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:6488   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
     /tmp/ccSXOI3d.s:6731   .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccSXOI3d.s:6794   .text._ZN10OutputPortIfE7presentEv:0000000000000000 _ZN10OutputPortIfE7presentEv
     /tmp/ccSXOI3d.s:7043   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC1ESt9nullopt_t
     /tmp/ccSXOI3d.s:7239   .text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccSXOI3d.s:7302   .text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:0000000000000000 _ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
     /tmp/ccSXOI3d.s:7446   .text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccSXOI3d.s:7732   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC1IRfLb1EEEOT_
     /tmp/ccSXOI3d.s:4654   .text._ZNKSt19_Optional_base_implISt5arrayIfLj3EESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:4700   .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:4745   .text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:4790   .text._ZNSt4pairIffEaSEOS0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:4853   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7788   .text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:0000000000000000 _ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
     /tmp/ccSXOI3d.s:4916   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:7833   .text._ZNSt22_Optional_payload_baseIfE8_M_resetEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_M_resetEv
     /tmp/ccSXOI3d.s:4959   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE8_M_resetEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5002   .text._ZNKSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5047   .text._ZNSt4pairIffEaSERKS0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5105   .text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJRKS1_EEEvDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7882   .text._ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 _ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE
     /tmp/ccSXOI3d.s:5168   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_M_resetEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:7927   .text._ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv
     /tmp/ccSXOI3d.s:5217   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:7974   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE6_M_getEv
     /tmp/ccSXOI3d.s:5261   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5309   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5316   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8201   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE
     /tmp/ccSXOI3d.s:8246   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
     /tmp/ccSXOI3d.s:5357   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5364   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:8156   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE
     /tmp/ccSXOI3d.s:5407   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5414   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:8111   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE
     /tmp/ccSXOI3d.s:5457   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 $t
ARM GAS  /tmp/ccSXOI3d.s 			page 262


     /tmp/ccSXOI3d.s:5464   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
     /tmp/ccSXOI3d.s:8066   .text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccSXOI3d.s:5506   .text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 $t
     /tmp/ccSXOI3d.s:8019   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:0000000000000000 _ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
     /tmp/ccSXOI3d.s:5569   .text._ZN10OutputPortISt4pairIffEE7presentEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:5628   .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 $t
     /tmp/ccSXOI3d.s:5635   .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
     /tmp/ccSXOI3d.s:5677   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5684   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8291   .text._ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv
     /tmp/ccSXOI3d.s:5725   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5732   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:5775   .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5782   .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
     /tmp/ccSXOI3d.s:5824   .text._ZSt3getILj1EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5887   .text._ZSt13make_optionalIRSt4pairIffEESt8optionalINSt5decayIT_E4typeEEOS5_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6155   .text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:0000000000000000 _ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
     /tmp/ccSXOI3d.s:5934   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5941   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8336   .text._ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv
     /tmp/ccSXOI3d.s:5982   .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:5989   .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj0ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
     /tmp/ccSXOI3d.s:6031   .text._ZSt3getILj0EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6094   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6101   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6101   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6148   .text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:6193   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6200   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6200   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6253   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6260   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6260   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6305   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6312   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6312   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:6362   .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6369   .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
     /tmp/ccSXOI3d.s:6418   .text._ZNSt22_Optional_payload_baseISt4pairIffEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6481   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:6527   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6534   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8563   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccSXOI3d.s:8608   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
     /tmp/ccSXOI3d.s:6575   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6582   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:8518   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccSXOI3d.s:6625   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6632   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:8473   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccSXOI3d.s:6675   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:6682   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccSXOI3d.s:8428   .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 _ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
     /tmp/ccSXOI3d.s:6724   .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccSXOI3d.s:8381   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
     /tmp/ccSXOI3d.s:6787   .text._ZN10OutputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:6846   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 $t
ARM GAS  /tmp/ccSXOI3d.s 			page 263


     /tmp/ccSXOI3d.s:6853   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev
     /tmp/ccSXOI3d.s:6853   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
     /tmp/ccSXOI3d.s:6892   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:6899   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2Ev
     /tmp/ccSXOI3d.s:6899   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1Ev
     /tmp/ccSXOI3d.s:6942   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:6949   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
     /tmp/ccSXOI3d.s:6949   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
     /tmp/ccSXOI3d.s:6989   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccSXOI3d.s:6996   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
     /tmp/ccSXOI3d.s:6996   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
     /tmp/ccSXOI3d.s:7036   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 $t
     /tmp/ccSXOI3d.s:7043   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC2ESt9nullopt_t
     /tmp/ccSXOI3d.s:7085   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7092   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8653   .text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
     /tmp/ccSXOI3d.s:7133   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7140   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccSXOI3d.s:7183   .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7190   .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccSXOI3d.s:7232   .text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7295   .text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7342   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7349   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccSXOI3d.s:8698   .text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
     /tmp/ccSXOI3d.s:7390   .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7397   .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccSXOI3d.s:7439   .text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7502   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7509   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7509   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7556   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7563   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7563   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7616   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7623   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7623   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7668   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7675   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7675   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccSXOI3d.s:7725   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7732   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC2IRfLb1EEEOT_
     /tmp/ccSXOI3d.s:7781   .text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:0000000000000000 $t
     /tmp/ccSXOI3d.s:7826   .text._ZNSt22_Optional_payload_baseIfE8_M_resetEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8743   .text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE10_M_destroyEv
     /tmp/ccSXOI3d.s:7875   .text._ZSt7forwardIRKSt4pairIffEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:7920   .text._ZNSt22_Optional_payload_baseISt4pairIffEE10_M_destroyEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:7967   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8012   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8790   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:0000000000000000 _ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv
     /tmp/ccSXOI3d.s:8059   .text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8104   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8149   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8194   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8239   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8284   .text._ZNRSt8__detail9__variant14_UninitializedIPSt4pairIffELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8329   .text._ZNRSt8__detail9__variant14_UninitializedISt4pairIffELb1EE6_M_getEv:0000000000000000 $t
ARM GAS  /tmp/ccSXOI3d.s 			page 264


     /tmp/ccSXOI3d.s:8374   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8842   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 _ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
     /tmp/ccSXOI3d.s:8421   .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8466   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8511   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8556   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccSXOI3d.s:8601   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8646   .text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8691   .text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8736   .text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8783   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8835   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 $t
     /tmp/ccSXOI3d.s:8884   .rodata._ZTV23FieldOrientedController:0000000000000000 _ZTV23FieldOrientedController
     /tmp/ccSXOI3d.s:8881   .rodata._ZTV23FieldOrientedController:0000000000000000 $d
     /tmp/ccSXOI3d.s:8901   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 _ZTV24AlphaBetaFrameController
     /tmp/ccSXOI3d.s:8898   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 $d
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC5Ev
                           .group:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt4pairIffEC5IRffLb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt4pairIffEC5IffLb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt4pairIffEC5IRfS2_Lb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5IJfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5IJfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI5St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5IJfELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalIfEC5IfLb1EEEOT_
                           .group:0000000000000000 _ZNSt8optionalISt4pairIffEEC5ESt9nullopt_t
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC5IJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC5IJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI5St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC5IJRS1_ELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalISt4pairIffEEC5IRS1_Lb1EEEOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5Ev
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt8optionalIfEC5ESt9nullopt_t
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI5St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5IJRfELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalIfEC5IRfLb1EEEOT_

UNDEFINED SYMBOLS
abort
sqrtf
SVM
our_arm_cos_f32
our_arm_sin_f32
current_meas_period
__cxa_pure_virtual
