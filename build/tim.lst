ARM GAS  /tmp/ccjZrRT3.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata.SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.rodata.USART_PRESCALER_TAB,"a"
  48              		.align	2
  51              	USART_PRESCALER_TAB:
  52 0000 01000000 		.word	1
  53 0004 02000000 		.word	2
  54 0008 04000000 		.word	4
  55 000c 06000000 		.word	6
  56 0010 08000000 		.word	8
  57 0014 0A000000 		.word	10
  58 0018 0C000000 		.word	12
  59 001c 10000000 		.word	16
ARM GAS  /tmp/ccjZrRT3.s 			page 2


  60 0020 20000000 		.word	32
  61 0024 40000000 		.word	64
  62 0028 80000000 		.word	128
  63 002c 00010000 		.word	256
  64              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  65              		.align	2
  68              	CHANNEL_OFFSET_TAB:
  69 0000 081C3044 		.ascii	"\010\0340DXl"
  69      586C
  70              		.section	.text.OC4_PWM_Override,"ax",%progbits
  71              		.align	1
  72              		.global	OC4_PWM_Override
  73              		.arch armv7e-m
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	OC4_PWM_Override:
  80              	.LFB1988:
  81              		.file 1 "Src/tim.c"
   1:Src/tim.c     **** /**
   2:Src/tim.c     ****   ******************************************************************************
   3:Src/tim.c     ****   * File Name          : TIM.c
   4:Src/tim.c     ****   * Description        : This file provides code for the configuration
   5:Src/tim.c     ****   *                      of the TIM instances.
   6:Src/tim.c     ****   ******************************************************************************
   7:Src/tim.c     ****   * This notice applies to any and all portions of this file
   8:Src/tim.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/tim.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/tim.c     ****   * inserted by the user or by software development tools
  11:Src/tim.c     ****   * are owned by their respective copyright owners.
  12:Src/tim.c     ****   *
  13:Src/tim.c     ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/tim.c     ****   * All rights reserved.
  15:Src/tim.c     ****   *
  16:Src/tim.c     ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/tim.c     ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/tim.c     ****   *
  19:Src/tim.c     ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/tim.c     ****   *    this list of conditions and the following disclaimer.
  21:Src/tim.c     ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/tim.c     ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/tim.c     ****   *    and/or other materials provided with the distribution.
  24:Src/tim.c     ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/tim.c     ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/tim.c     ****   *    derived from this software without specific written permission.
  27:Src/tim.c     ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/tim.c     ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/tim.c     ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/tim.c     ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/tim.c     ****   *    this license is void and will automatically terminate your rights under 
  32:Src/tim.c     ****   *    this license. 
  33:Src/tim.c     ****   *
  34:Src/tim.c     ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/tim.c     ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/tim.c     ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/tim.c     ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
ARM GAS  /tmp/ccjZrRT3.s 			page 3


  38:Src/tim.c     ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/tim.c     ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/tim.c     ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/tim.c     ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/tim.c     ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/tim.c     ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/tim.c     ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/tim.c     ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/tim.c     ****   *
  47:Src/tim.c     ****   ******************************************************************************
  48:Src/tim.c     ****   */
  49:Src/tim.c     **** 
  50:Src/tim.c     **** /* Includes ------------------------------------------------------------------*/
  51:Src/tim.c     **** #include "tim.h"
  52:Src/tim.c     **** 
  53:Src/tim.c     **** #include "gpio.h"
  54:Src/tim.c     **** #include  "main.h"
  55:Src/tim.c     **** /* USER CODE BEGIN 0 */
  56:Src/tim.c     **** 
  57:Src/tim.c     **** // To trigger the ADC, we must use an output channel that is in PWM mode
  58:Src/tim.c     **** // However, CubeMX does not allow you to set up a channel as PWM without an output pin.
  59:Src/tim.c     **** // This will set OC4 to PWM mode. Also, triggering doesn't work if the compare register
  60:Src/tim.c     **** // (called pulse here) is 0, so we initialise it to 1.
  61:Src/tim.c     **** void OC4_PWM_Override(TIM_HandleTypeDef* htim) {
  82              		.loc 1 61 48
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 40
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 8AB0     		sub	sp, sp, #40
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 48
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI2:
  96              		.cfi_def_cfa_register 7
  97 0006 7860     		str	r0, [r7, #4]
  62:Src/tim.c     **** 
  63:Src/tim.c     ****     TIM_OC_InitTypeDef sConfigOC;
  64:Src/tim.c     ****     sConfigOC.OCMode = TIM_OCMODE_PWM2;
  98              		.loc 1 64 22
  99 0008 7023     		movs	r3, #112
 100 000a FB60     		str	r3, [r7, #12]
  65:Src/tim.c     ****     sConfigOC.Pulse = 1;
 101              		.loc 1 65 21
 102 000c 0123     		movs	r3, #1
 103 000e 3B61     		str	r3, [r7, #16]
  66:Src/tim.c     ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 104              		.loc 1 66 26
 105 0010 0023     		movs	r3, #0
 106 0012 7B61     		str	r3, [r7, #20]
  67:Src/tim.c     ****     sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 107              		.loc 1 67 27
 108 0014 0023     		movs	r3, #0
ARM GAS  /tmp/ccjZrRT3.s 			page 4


 109 0016 BB61     		str	r3, [r7, #24]
  68:Src/tim.c     ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 110              		.loc 1 68 26
 111 0018 0023     		movs	r3, #0
 112 001a FB61     		str	r3, [r7, #28]
  69:Src/tim.c     ****     sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 113              		.loc 1 69 27
 114 001c 0023     		movs	r3, #0
 115 001e 3B62     		str	r3, [r7, #32]
  70:Src/tim.c     ****     sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 116              		.loc 1 70 28
 117 0020 0023     		movs	r3, #0
 118 0022 7B62     		str	r3, [r7, #36]
  71:Src/tim.c     **** 
  72:Src/tim.c     ****     HAL_TIM_OC_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_4);
 119              		.loc 1 72 5
 120 0024 07F10C03 		add	r3, r7, #12
 121 0028 0C22     		movs	r2, #12
 122 002a 1946     		mov	r1, r3
 123 002c 7868     		ldr	r0, [r7, #4]
 124 002e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
  73:Src/tim.c     **** }
 125              		.loc 1 73 1
 126 0032 00BF     		nop
 127 0034 2837     		adds	r7, r7, #40
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130 0036 BD46     		mov	sp, r7
 131              	.LCFI4:
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 0038 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE1988:
 138              		.global	htim1
 139              		.section	.bss.htim1,"aw",%nobits
 140              		.align	2
 143              	htim1:
 144 0000 00000000 		.space	76
 144      00000000 
 144      00000000 
 144      00000000 
 144      00000000 
 145              		.global	htim2
 146              		.section	.bss.htim2,"aw",%nobits
 147              		.align	2
 150              	htim2:
 151 0000 00000000 		.space	76
 151      00000000 
 151      00000000 
 151      00000000 
 151      00000000 
 152              		.global	htim3
 153              		.section	.bss.htim3,"aw",%nobits
 154              		.align	2
 157              	htim3:
 158 0000 00000000 		.space	76
ARM GAS  /tmp/ccjZrRT3.s 			page 5


 158      00000000 
 158      00000000 
 158      00000000 
 158      00000000 
 159              		.global	htim4
 160              		.section	.bss.htim4,"aw",%nobits
 161              		.align	2
 164              	htim4:
 165 0000 00000000 		.space	76
 165      00000000 
 165      00000000 
 165      00000000 
 165      00000000 
 166              		.global	htim8
 167              		.section	.bss.htim8,"aw",%nobits
 168              		.align	2
 171              	htim8:
 172 0000 00000000 		.space	76
 172      00000000 
 172      00000000 
 172      00000000 
 172      00000000 
 173              		.global	htim15
 174              		.section	.bss.htim15,"aw",%nobits
 175              		.align	2
 178              	htim15:
 179 0000 00000000 		.space	76
 179      00000000 
 179      00000000 
 179      00000000 
 179      00000000 
 180              		.section	.text.MX_TIM1_Init,"ax",%progbits
 181              		.align	1
 182              		.global	MX_TIM1_Init
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	MX_TIM1_Init:
 189              	.LFB1989:
  74:Src/tim.c     **** 
  75:Src/tim.c     **** /* USER CODE END 0 */
  76:Src/tim.c     **** 
  77:Src/tim.c     **** TIM_HandleTypeDef htim1;
  78:Src/tim.c     **** TIM_HandleTypeDef htim2;
  79:Src/tim.c     **** TIM_HandleTypeDef htim3;
  80:Src/tim.c     **** TIM_HandleTypeDef htim4;
  81:Src/tim.c     **** 
  82:Src/tim.c     **** TIM_HandleTypeDef htim8;
  83:Src/tim.c     **** TIM_HandleTypeDef htim15;
  84:Src/tim.c     **** 
  85:Src/tim.c     **** /* TIM1 init function */
  86:Src/tim.c     **** void MX_TIM1_Init(void)
  87:Src/tim.c     **** {
 190              		.loc 1 87 1
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 112
ARM GAS  /tmp/ccjZrRT3.s 			page 6


 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI5:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 9CB0     		sub	sp, sp, #112
 200              	.LCFI6:
 201              		.cfi_def_cfa_offset 120
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI7:
 204              		.cfi_def_cfa_register 7
  88:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
  89:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
  90:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
  91:Src/tim.c     ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  92:Src/tim.c     **** 
  93:Src/tim.c     ****   htim1.Instance = TIM1;
 205              		.loc 1 93 18
 206 0006 554B     		ldr	r3, .L13
 207 0008 554A     		ldr	r2, .L13+4
 208 000a 1A60     		str	r2, [r3]
  94:Src/tim.c     ****   htim1.Init.Prescaler = 0;
 209              		.loc 1 94 24
 210 000c 534B     		ldr	r3, .L13
 211 000e 0022     		movs	r2, #0
 212 0010 5A60     		str	r2, [r3, #4]
  95:Src/tim.c     ****   htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 213              		.loc 1 95 26
 214 0012 524B     		ldr	r3, .L13
 215 0014 6022     		movs	r2, #96
 216 0016 9A60     		str	r2, [r3, #8]
  96:Src/tim.c     ****   htim1.Init.Period = TIM_1_8_PERIOD_CLOCKS;
 217              		.loc 1 96 21
 218 0018 504B     		ldr	r3, .L13
 219 001a 41F29A02 		movw	r2, #4250
 220 001e DA60     		str	r2, [r3, #12]
  97:Src/tim.c     ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 221              		.loc 1 97 28
 222 0020 4E4B     		ldr	r3, .L13
 223 0022 0022     		movs	r2, #0
 224 0024 1A61     		str	r2, [r3, #16]
  98:Src/tim.c     ****   htim1.Init.RepetitionCounter = TIM_1_8_RCR;
 225              		.loc 1 98 32
 226 0026 4D4B     		ldr	r3, .L13
 227 0028 0022     		movs	r2, #0
 228 002a 5A61     		str	r2, [r3, #20]
  99:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 229              		.loc 1 99 7
 230 002c 4B48     		ldr	r0, .L13
 231 002e FFF7FEFF 		bl	HAL_TIM_Base_Init
 232 0032 0346     		mov	r3, r0
 233              		.loc 1 99 6
 234 0034 002B     		cmp	r3, #0
 235 0036 01D0     		beq	.L3
 100:Src/tim.c     ****   {
 101:Src/tim.c     ****     Error_Handler();
ARM GAS  /tmp/ccjZrRT3.s 			page 7


 236              		.loc 1 101 5
 237 0038 FFF7FEFF 		bl	Error_Handler
 238              	.L3:
 102:Src/tim.c     ****   }
 103:Src/tim.c     **** 
 104:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 239              		.loc 1 104 34
 240 003c 4FF48053 		mov	r3, #4096
 241 0040 3B66     		str	r3, [r7, #96]
 105:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 242              		.loc 1 105 7
 243 0042 07F16003 		add	r3, r7, #96
 244 0046 1946     		mov	r1, r3
 245 0048 4448     		ldr	r0, .L13
 246 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 247 004e 0346     		mov	r3, r0
 248              		.loc 1 105 6
 249 0050 002B     		cmp	r3, #0
 250 0052 01D0     		beq	.L4
 106:Src/tim.c     ****   {
 107:Src/tim.c     ****     Error_Handler();
 251              		.loc 1 107 5
 252 0054 FFF7FEFF 		bl	Error_Handler
 253              	.L4:
 108:Src/tim.c     ****   }
 109:Src/tim.c     **** 
 110:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 254              		.loc 1 110 7
 255 0058 4048     		ldr	r0, .L13
 256 005a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 257 005e 0346     		mov	r3, r0
 258              		.loc 1 110 6
 259 0060 002B     		cmp	r3, #0
 260 0062 01D0     		beq	.L5
 111:Src/tim.c     ****   {
 112:Src/tim.c     ****     Error_Handler();
 261              		.loc 1 112 5
 262 0064 FFF7FEFF 		bl	Error_Handler
 263              	.L5:
 113:Src/tim.c     ****   }
 114:Src/tim.c     **** 
 115:Src/tim.c     ****   if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 264              		.loc 1 115 7
 265 0068 3C48     		ldr	r0, .L13
 266 006a FFF7FEFF 		bl	HAL_TIM_OC_Init
 267 006e 0346     		mov	r3, r0
 268              		.loc 1 115 6
 269 0070 002B     		cmp	r3, #0
 270 0072 01D0     		beq	.L6
 116:Src/tim.c     ****   {
 117:Src/tim.c     ****     Error_Handler();
 271              		.loc 1 117 5
 272 0074 FFF7FEFF 		bl	Error_Handler
 273              	.L6:
 118:Src/tim.c     ****   }
 119:Src/tim.c     **** 
 120:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
ARM GAS  /tmp/ccjZrRT3.s 			page 8


 274              		.loc 1 120 37
 275 0078 2023     		movs	r3, #32
 276 007a 7B65     		str	r3, [r7, #84]
 121:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 277              		.loc 1 121 33
 278 007c 0023     		movs	r3, #0
 279 007e FB65     		str	r3, [r7, #92]
 122:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 280              		.loc 1 122 7
 281 0080 07F15403 		add	r3, r7, #84
 282 0084 1946     		mov	r1, r3
 283 0086 3548     		ldr	r0, .L13
 284 0088 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 285 008c 0346     		mov	r3, r0
 286              		.loc 1 122 6
 287 008e 002B     		cmp	r3, #0
 288 0090 01D0     		beq	.L7
 123:Src/tim.c     ****   {
 124:Src/tim.c     ****     Error_Handler();
 289              		.loc 1 124 5
 290 0092 FFF7FEFF 		bl	Error_Handler
 291              	.L7:
 125:Src/tim.c     ****   }
 126:Src/tim.c     **** 
 127:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 292              		.loc 1 127 20
 293 0096 7023     		movs	r3, #112
 294 0098 BB63     		str	r3, [r7, #56]
 128:Src/tim.c     ****   sConfigOC.Pulse = 0;
 295              		.loc 1 128 19
 296 009a 0023     		movs	r3, #0
 297 009c FB63     		str	r3, [r7, #60]
 129:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 298              		.loc 1 129 24
 299 009e 0023     		movs	r3, #0
 300 00a0 3B64     		str	r3, [r7, #64]
 130:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 301              		.loc 1 130 25
 302 00a2 0023     		movs	r3, #0
 303 00a4 7B64     		str	r3, [r7, #68]
 131:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 304              		.loc 1 131 24
 305 00a6 0023     		movs	r3, #0
 306 00a8 BB64     		str	r3, [r7, #72]
 132:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 307              		.loc 1 132 25
 308 00aa 0023     		movs	r3, #0
 309 00ac FB64     		str	r3, [r7, #76]
 133:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 310              		.loc 1 133 26
 311 00ae 0023     		movs	r3, #0
 312 00b0 3B65     		str	r3, [r7, #80]
 134:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 313              		.loc 1 134 7
 314 00b2 07F13803 		add	r3, r7, #56
 315 00b6 0022     		movs	r2, #0
 316 00b8 1946     		mov	r1, r3
ARM GAS  /tmp/ccjZrRT3.s 			page 9


 317 00ba 2848     		ldr	r0, .L13
 318 00bc FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 319 00c0 0346     		mov	r3, r0
 320              		.loc 1 134 6
 321 00c2 002B     		cmp	r3, #0
 322 00c4 01D0     		beq	.L8
 135:Src/tim.c     ****   {
 136:Src/tim.c     ****     Error_Handler();
 323              		.loc 1 136 5
 324 00c6 FFF7FEFF 		bl	Error_Handler
 325              	.L8:
 137:Src/tim.c     ****   }
 138:Src/tim.c     **** 
 139:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 326              		.loc 1 139 7
 327 00ca 07F13803 		add	r3, r7, #56
 328 00ce 0422     		movs	r2, #4
 329 00d0 1946     		mov	r1, r3
 330 00d2 2248     		ldr	r0, .L13
 331 00d4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 332 00d8 0346     		mov	r3, r0
 333              		.loc 1 139 6
 334 00da 002B     		cmp	r3, #0
 335 00dc 01D0     		beq	.L9
 140:Src/tim.c     ****   {
 141:Src/tim.c     ****     Error_Handler();
 336              		.loc 1 141 5
 337 00de FFF7FEFF 		bl	Error_Handler
 338              	.L9:
 142:Src/tim.c     ****   }
 143:Src/tim.c     **** 
 144:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 339              		.loc 1 144 7
 340 00e2 07F13803 		add	r3, r7, #56
 341 00e6 0822     		movs	r2, #8
 342 00e8 1946     		mov	r1, r3
 343 00ea 1C48     		ldr	r0, .L13
 344 00ec FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 345 00f0 0346     		mov	r3, r0
 346              		.loc 1 144 6
 347 00f2 002B     		cmp	r3, #0
 348 00f4 01D0     		beq	.L10
 145:Src/tim.c     ****   {
 146:Src/tim.c     ****     Error_Handler();
 349              		.loc 1 146 5
 350 00f6 FFF7FEFF 		bl	Error_Handler
 351              	.L10:
 147:Src/tim.c     ****   }
 148:Src/tim.c     **** 
 149:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 352              		.loc 1 149 20
 353 00fa 0023     		movs	r3, #0
 354 00fc BB63     		str	r3, [r7, #56]
 150:Src/tim.c     ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 355              		.loc 1 150 7
 356 00fe 07F13803 		add	r3, r7, #56
 357 0102 0C22     		movs	r2, #12
ARM GAS  /tmp/ccjZrRT3.s 			page 10


 358 0104 1946     		mov	r1, r3
 359 0106 1548     		ldr	r0, .L13
 360 0108 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 361 010c 0346     		mov	r3, r0
 362              		.loc 1 150 6
 363 010e 002B     		cmp	r3, #0
 364 0110 01D0     		beq	.L11
 151:Src/tim.c     ****   {
 152:Src/tim.c     ****     Error_Handler();
 365              		.loc 1 152 5
 366 0112 FFF7FEFF 		bl	Error_Handler
 367              	.L11:
 153:Src/tim.c     ****   }
 154:Src/tim.c     **** 
 155:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 368              		.loc 1 155 40
 369 0116 4FF40063 		mov	r3, #2048
 370 011a 7B60     		str	r3, [r7, #4]
 156:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 371              		.loc 1 156 41
 372 011c 4FF48063 		mov	r3, #1024
 373 0120 BB60     		str	r3, [r7, #8]
 157:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 374              		.loc 1 157 34
 375 0122 0023     		movs	r3, #0
 376 0124 FB60     		str	r3, [r7, #12]
 158:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = TIM_1_8_DEADTIME_CLOCKS;
 377              		.loc 1 158 33
 378 0126 2823     		movs	r3, #40
 379 0128 3B61     		str	r3, [r7, #16]
 159:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 380              		.loc 1 159 35
 381 012a 0023     		movs	r3, #0
 382 012c 7B61     		str	r3, [r7, #20]
 160:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 383              		.loc 1 160 38
 384 012e 4FF40053 		mov	r3, #8192
 385 0132 BB61     		str	r3, [r7, #24]
 161:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 386              		.loc 1 161 40
 387 0134 0023     		movs	r3, #0
 388 0136 7B63     		str	r3, [r7, #52]
 162:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 389              		.loc 1 162 7
 390 0138 3B1D     		adds	r3, r7, #4
 391 013a 1946     		mov	r1, r3
 392 013c 0748     		ldr	r0, .L13
 393 013e FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 394 0142 0346     		mov	r3, r0
 395              		.loc 1 162 6
 396 0144 002B     		cmp	r3, #0
 397 0146 01D0     		beq	.L12
 163:Src/tim.c     ****   {
 164:Src/tim.c     ****     Error_Handler();
 398              		.loc 1 164 5
 399 0148 FFF7FEFF 		bl	Error_Handler
 400              	.L12:
ARM GAS  /tmp/ccjZrRT3.s 			page 11


 165:Src/tim.c     ****   }
 166:Src/tim.c     **** 
 167:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim1);
 401              		.loc 1 167 3
 402 014c 0348     		ldr	r0, .L13
 403 014e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 168:Src/tim.c     **** 
 169:Src/tim.c     **** }
 404              		.loc 1 169 1
 405 0152 00BF     		nop
 406 0154 7037     		adds	r7, r7, #112
 407              	.LCFI8:
 408              		.cfi_def_cfa_offset 8
 409 0156 BD46     		mov	sp, r7
 410              	.LCFI9:
 411              		.cfi_def_cfa_register 13
 412              		@ sp needed
 413 0158 80BD     		pop	{r7, pc}
 414              	.L14:
 415 015a 00BF     		.align	2
 416              	.L13:
 417 015c 00000000 		.word	htim1
 418 0160 002C0140 		.word	1073818624
 419              		.cfi_endproc
 420              	.LFE1989:
 422              		.section	.text.MX_TIM2_Init,"ax",%progbits
 423              		.align	1
 424              		.global	MX_TIM2_Init
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu fpv4-sp-d16
 430              	MX_TIM2_Init:
 431              	.LFB1990:
 170:Src/tim.c     **** /* TIM2 init function */
 171:Src/tim.c     **** void MX_TIM2_Init(void)
 172:Src/tim.c     **** {
 432              		.loc 1 172 1
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 40
 435              		@ frame_needed = 1, uses_anonymous_args = 0
 436 0000 80B5     		push	{r7, lr}
 437              	.LCFI10:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 0002 8AB0     		sub	sp, sp, #40
 442              	.LCFI11:
 443              		.cfi_def_cfa_offset 48
 444 0004 00AF     		add	r7, sp, #0
 445              	.LCFI12:
 446              		.cfi_def_cfa_register 7
 173:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 174:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 175:Src/tim.c     **** 
 176:Src/tim.c     ****   htim2.Instance = TIM2;
 447              		.loc 1 176 18
ARM GAS  /tmp/ccjZrRT3.s 			page 12


 448 0006 294B     		ldr	r3, .L20
 449 0008 4FF08042 		mov	r2, #1073741824
 450 000c 1A60     		str	r2, [r3]
 177:Src/tim.c     ****   htim2.Init.Prescaler = 0;
 451              		.loc 1 177 24
 452 000e 274B     		ldr	r3, .L20
 453 0010 0022     		movs	r2, #0
 454 0012 5A60     		str	r2, [r3, #4]
 178:Src/tim.c     ****   htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 455              		.loc 1 178 26
 456 0014 254B     		ldr	r3, .L20
 457 0016 6022     		movs	r2, #96
 458 0018 9A60     		str	r2, [r3, #8]
 179:Src/tim.c     ****   htim2.Init.Period = TIM_APB1_PERIOD_CLOCKS;
 459              		.loc 1 179 21
 460 001a 244B     		ldr	r3, .L20
 461 001c 4FF48052 		mov	r2, #4096
 462 0020 DA60     		str	r2, [r3, #12]
 180:Src/tim.c     ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 463              		.loc 1 180 28
 464 0022 224B     		ldr	r3, .L20
 465 0024 0022     		movs	r2, #0
 466 0026 1A61     		str	r2, [r3, #16]
 181:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 467              		.loc 1 181 7
 468 0028 2048     		ldr	r0, .L20
 469 002a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 470 002e 0346     		mov	r3, r0
 471              		.loc 1 181 6
 472 0030 002B     		cmp	r3, #0
 473 0032 01D0     		beq	.L16
 182:Src/tim.c     ****   {
 183:Src/tim.c     ****     Error_Handler();
 474              		.loc 1 183 5
 475 0034 FFF7FEFF 		bl	Error_Handler
 476              	.L16:
 184:Src/tim.c     ****   }
 185:Src/tim.c     **** 
 186:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 477              		.loc 1 186 37
 478 0038 0023     		movs	r3, #0
 479 003a FB61     		str	r3, [r7, #28]
 187:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 480              		.loc 1 187 33
 481 003c 0023     		movs	r3, #0
 482 003e 7B62     		str	r3, [r7, #36]
 188:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 483              		.loc 1 188 7
 484 0040 07F11C03 		add	r3, r7, #28
 485 0044 1946     		mov	r1, r3
 486 0046 1948     		ldr	r0, .L20
 487 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 488 004c 0346     		mov	r3, r0
 489              		.loc 1 188 6
 490 004e 002B     		cmp	r3, #0
 491 0050 01D0     		beq	.L17
 189:Src/tim.c     ****   {
ARM GAS  /tmp/ccjZrRT3.s 			page 13


 190:Src/tim.c     ****     Error_Handler();
 492              		.loc 1 190 5
 493 0052 FFF7FEFF 		bl	Error_Handler
 494              	.L17:
 191:Src/tim.c     ****   }
 192:Src/tim.c     **** 
 193:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 495              		.loc 1 193 20
 496 0056 7023     		movs	r3, #112
 497 0058 3B60     		str	r3, [r7]
 194:Src/tim.c     ****   sConfigOC.Pulse = 0;
 498              		.loc 1 194 19
 499 005a 0023     		movs	r3, #0
 500 005c 7B60     		str	r3, [r7, #4]
 195:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 501              		.loc 1 195 24
 502 005e 0223     		movs	r3, #2
 503 0060 BB60     		str	r3, [r7, #8]
 196:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 504              		.loc 1 196 24
 505 0062 0023     		movs	r3, #0
 506 0064 3B61     		str	r3, [r7, #16]
 197:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 507              		.loc 1 197 7
 508 0066 3B46     		mov	r3, r7
 509 0068 0822     		movs	r2, #8
 510 006a 1946     		mov	r1, r3
 511 006c 0F48     		ldr	r0, .L20
 512 006e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 513 0072 0346     		mov	r3, r0
 514              		.loc 1 197 6
 515 0074 002B     		cmp	r3, #0
 516 0076 01D0     		beq	.L18
 198:Src/tim.c     ****   {
 199:Src/tim.c     ****     Error_Handler();
 517              		.loc 1 199 5
 518 0078 FFF7FEFF 		bl	Error_Handler
 519              	.L18:
 200:Src/tim.c     ****   }
 201:Src/tim.c     **** 
 202:Src/tim.c     ****   sConfigOC.Pulse = TIM_APB1_PERIOD_CLOCKS+1;
 520              		.loc 1 202 19
 521 007c 41F20103 		movw	r3, #4097
 522 0080 7B60     		str	r3, [r7, #4]
 203:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 523              		.loc 1 203 24
 524 0082 0023     		movs	r3, #0
 525 0084 BB60     		str	r3, [r7, #8]
 204:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 526              		.loc 1 204 7
 527 0086 3B46     		mov	r3, r7
 528 0088 0C22     		movs	r2, #12
 529 008a 1946     		mov	r1, r3
 530 008c 0748     		ldr	r0, .L20
 531 008e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 532 0092 0346     		mov	r3, r0
 533              		.loc 1 204 6
ARM GAS  /tmp/ccjZrRT3.s 			page 14


 534 0094 002B     		cmp	r3, #0
 535 0096 01D0     		beq	.L19
 205:Src/tim.c     ****   {
 206:Src/tim.c     ****     Error_Handler();
 536              		.loc 1 206 5
 537 0098 FFF7FEFF 		bl	Error_Handler
 538              	.L19:
 207:Src/tim.c     ****   }
 208:Src/tim.c     **** 
 209:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim2);
 539              		.loc 1 209 3
 540 009c 0348     		ldr	r0, .L20
 541 009e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 210:Src/tim.c     **** 
 211:Src/tim.c     **** }
 542              		.loc 1 211 1
 543 00a2 00BF     		nop
 544 00a4 2837     		adds	r7, r7, #40
 545              	.LCFI13:
 546              		.cfi_def_cfa_offset 8
 547 00a6 BD46     		mov	sp, r7
 548              	.LCFI14:
 549              		.cfi_def_cfa_register 13
 550              		@ sp needed
 551 00a8 80BD     		pop	{r7, pc}
 552              	.L21:
 553 00aa 00BF     		.align	2
 554              	.L20:
 555 00ac 00000000 		.word	htim2
 556              		.cfi_endproc
 557              	.LFE1990:
 559              		.section	.text.MX_TIM3_Init,"ax",%progbits
 560              		.align	1
 561              		.global	MX_TIM3_Init
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu fpv4-sp-d16
 567              	MX_TIM3_Init:
 568              	.LFB1991:
 212:Src/tim.c     **** /* TIM3 init function */
 213:Src/tim.c     **** void MX_TIM3_Init(void)
 214:Src/tim.c     **** {
 569              		.loc 1 214 1
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 48
 572              		@ frame_needed = 1, uses_anonymous_args = 0
 573 0000 80B5     		push	{r7, lr}
 574              	.LCFI15:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 8CB0     		sub	sp, sp, #48
 579              	.LCFI16:
 580              		.cfi_def_cfa_offset 56
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI17:
ARM GAS  /tmp/ccjZrRT3.s 			page 15


 583              		.cfi_def_cfa_register 7
 215:Src/tim.c     ****   TIM_Encoder_InitTypeDef sConfig;
 216:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 217:Src/tim.c     **** 
 218:Src/tim.c     ****   htim3.Instance = TIM3;
 584              		.loc 1 218 18
 585 0006 1F4B     		ldr	r3, .L26
 586 0008 1F4A     		ldr	r2, .L26+4
 587 000a 1A60     		str	r2, [r3]
 219:Src/tim.c     ****   htim3.Init.Prescaler = 0;
 588              		.loc 1 219 24
 589 000c 1D4B     		ldr	r3, .L26
 590 000e 0022     		movs	r2, #0
 591 0010 5A60     		str	r2, [r3, #4]
 220:Src/tim.c     ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 592              		.loc 1 220 26
 593 0012 1C4B     		ldr	r3, .L26
 594 0014 0022     		movs	r2, #0
 595 0016 9A60     		str	r2, [r3, #8]
 221:Src/tim.c     ****   htim3.Init.Period = 0xffff;
 596              		.loc 1 221 21
 597 0018 1A4B     		ldr	r3, .L26
 598 001a 4FF6FF72 		movw	r2, #65535
 599 001e DA60     		str	r2, [r3, #12]
 222:Src/tim.c     ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 600              		.loc 1 222 28
 601 0020 184B     		ldr	r3, .L26
 602 0022 0022     		movs	r2, #0
 603 0024 1A61     		str	r2, [r3, #16]
 223:Src/tim.c     ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 604              		.loc 1 223 23
 605 0026 0323     		movs	r3, #3
 606 0028 FB60     		str	r3, [r7, #12]
 224:Src/tim.c     ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 607              		.loc 1 224 23
 608 002a 0023     		movs	r3, #0
 609 002c 3B61     		str	r3, [r7, #16]
 225:Src/tim.c     ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 610              		.loc 1 225 24
 611 002e 0123     		movs	r3, #1
 612 0030 7B61     		str	r3, [r7, #20]
 226:Src/tim.c     ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 613              		.loc 1 226 24
 614 0032 0023     		movs	r3, #0
 615 0034 BB61     		str	r3, [r7, #24]
 227:Src/tim.c     ****   sConfig.IC1Filter = 4;
 616              		.loc 1 227 21
 617 0036 0423     		movs	r3, #4
 618 0038 FB61     		str	r3, [r7, #28]
 228:Src/tim.c     ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 619              		.loc 1 228 23
 620 003a 0023     		movs	r3, #0
 621 003c 3B62     		str	r3, [r7, #32]
 229:Src/tim.c     ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 622              		.loc 1 229 24
 623 003e 0123     		movs	r3, #1
 624 0040 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccjZrRT3.s 			page 16


 230:Src/tim.c     ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 625              		.loc 1 230 24
 626 0042 0023     		movs	r3, #0
 627 0044 BB62     		str	r3, [r7, #40]
 231:Src/tim.c     ****   sConfig.IC2Filter = 4;
 628              		.loc 1 231 21
 629 0046 0423     		movs	r3, #4
 630 0048 FB62     		str	r3, [r7, #44]
 232:Src/tim.c     ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 631              		.loc 1 232 7
 632 004a 07F10C03 		add	r3, r7, #12
 633 004e 1946     		mov	r1, r3
 634 0050 0C48     		ldr	r0, .L26
 635 0052 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 636 0056 0346     		mov	r3, r0
 637              		.loc 1 232 6
 638 0058 002B     		cmp	r3, #0
 639 005a 01D0     		beq	.L23
 233:Src/tim.c     ****   {
 234:Src/tim.c     ****     Error_Handler();
 640              		.loc 1 234 5
 641 005c FFF7FEFF 		bl	Error_Handler
 642              	.L23:
 235:Src/tim.c     ****   }
 236:Src/tim.c     **** 
 237:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 643              		.loc 1 237 37
 644 0060 0023     		movs	r3, #0
 645 0062 3B60     		str	r3, [r7]
 238:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 646              		.loc 1 238 33
 647 0064 0023     		movs	r3, #0
 648 0066 BB60     		str	r3, [r7, #8]
 239:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 649              		.loc 1 239 7
 650 0068 3B46     		mov	r3, r7
 651 006a 1946     		mov	r1, r3
 652 006c 0548     		ldr	r0, .L26
 653 006e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 654 0072 0346     		mov	r3, r0
 655              		.loc 1 239 6
 656 0074 002B     		cmp	r3, #0
 657 0076 01D0     		beq	.L25
 240:Src/tim.c     ****   {
 241:Src/tim.c     ****     Error_Handler();
 658              		.loc 1 241 5
 659 0078 FFF7FEFF 		bl	Error_Handler
 660              	.L25:
 242:Src/tim.c     ****   }
 243:Src/tim.c     **** 
 244:Src/tim.c     **** }
 661              		.loc 1 244 1
 662 007c 00BF     		nop
 663 007e 3037     		adds	r7, r7, #48
 664              	.LCFI18:
 665              		.cfi_def_cfa_offset 8
 666 0080 BD46     		mov	sp, r7
ARM GAS  /tmp/ccjZrRT3.s 			page 17


 667              	.LCFI19:
 668              		.cfi_def_cfa_register 13
 669              		@ sp needed
 670 0082 80BD     		pop	{r7, pc}
 671              	.L27:
 672              		.align	2
 673              	.L26:
 674 0084 00000000 		.word	htim3
 675 0088 00040040 		.word	1073742848
 676              		.cfi_endproc
 677              	.LFE1991:
 679              		.section	.text.MX_TIM4_Init,"ax",%progbits
 680              		.align	1
 681              		.global	MX_TIM4_Init
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu fpv4-sp-d16
 687              	MX_TIM4_Init:
 688              	.LFB1992:
 245:Src/tim.c     **** /* TIM4 init function */
 246:Src/tim.c     **** void MX_TIM4_Init(void)
 247:Src/tim.c     **** {
 689              		.loc 1 247 1
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 48
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              	.LCFI20:
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 7, -8
 697              		.cfi_offset 14, -4
 698 0002 8CB0     		sub	sp, sp, #48
 699              	.LCFI21:
 700              		.cfi_def_cfa_offset 56
 701 0004 00AF     		add	r7, sp, #0
 702              	.LCFI22:
 703              		.cfi_def_cfa_register 7
 248:Src/tim.c     ****   TIM_Encoder_InitTypeDef sConfig;
 249:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 250:Src/tim.c     **** 
 251:Src/tim.c     ****   htim4.Instance = TIM4;
 704              		.loc 1 251 18
 705 0006 1F4B     		ldr	r3, .L32
 706 0008 1F4A     		ldr	r2, .L32+4
 707 000a 1A60     		str	r2, [r3]
 252:Src/tim.c     ****   htim4.Init.Prescaler = 0;
 708              		.loc 1 252 24
 709 000c 1D4B     		ldr	r3, .L32
 710 000e 0022     		movs	r2, #0
 711 0010 5A60     		str	r2, [r3, #4]
 253:Src/tim.c     ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 712              		.loc 1 253 26
 713 0012 1C4B     		ldr	r3, .L32
 714 0014 0022     		movs	r2, #0
 715 0016 9A60     		str	r2, [r3, #8]
 254:Src/tim.c     ****   htim4.Init.Period = 0xffff;
ARM GAS  /tmp/ccjZrRT3.s 			page 18


 716              		.loc 1 254 21
 717 0018 1A4B     		ldr	r3, .L32
 718 001a 4FF6FF72 		movw	r2, #65535
 719 001e DA60     		str	r2, [r3, #12]
 255:Src/tim.c     ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 720              		.loc 1 255 28
 721 0020 184B     		ldr	r3, .L32
 722 0022 0022     		movs	r2, #0
 723 0024 1A61     		str	r2, [r3, #16]
 256:Src/tim.c     ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 724              		.loc 1 256 23
 725 0026 0323     		movs	r3, #3
 726 0028 FB60     		str	r3, [r7, #12]
 257:Src/tim.c     ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 727              		.loc 1 257 23
 728 002a 0023     		movs	r3, #0
 729 002c 3B61     		str	r3, [r7, #16]
 258:Src/tim.c     ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 730              		.loc 1 258 24
 731 002e 0123     		movs	r3, #1
 732 0030 7B61     		str	r3, [r7, #20]
 259:Src/tim.c     ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 733              		.loc 1 259 24
 734 0032 0023     		movs	r3, #0
 735 0034 BB61     		str	r3, [r7, #24]
 260:Src/tim.c     ****   sConfig.IC1Filter = 4;
 736              		.loc 1 260 21
 737 0036 0423     		movs	r3, #4
 738 0038 FB61     		str	r3, [r7, #28]
 261:Src/tim.c     ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 739              		.loc 1 261 23
 740 003a 0023     		movs	r3, #0
 741 003c 3B62     		str	r3, [r7, #32]
 262:Src/tim.c     ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 742              		.loc 1 262 24
 743 003e 0123     		movs	r3, #1
 744 0040 7B62     		str	r3, [r7, #36]
 263:Src/tim.c     ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 745              		.loc 1 263 24
 746 0042 0023     		movs	r3, #0
 747 0044 BB62     		str	r3, [r7, #40]
 264:Src/tim.c     ****   sConfig.IC2Filter = 4;
 748              		.loc 1 264 21
 749 0046 0423     		movs	r3, #4
 750 0048 FB62     		str	r3, [r7, #44]
 265:Src/tim.c     ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 751              		.loc 1 265 7
 752 004a 07F10C03 		add	r3, r7, #12
 753 004e 1946     		mov	r1, r3
 754 0050 0C48     		ldr	r0, .L32
 755 0052 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 756 0056 0346     		mov	r3, r0
 757              		.loc 1 265 6
 758 0058 002B     		cmp	r3, #0
 759 005a 01D0     		beq	.L29
 266:Src/tim.c     ****   {
 267:Src/tim.c     ****     Error_Handler();
ARM GAS  /tmp/ccjZrRT3.s 			page 19


 760              		.loc 1 267 5
 761 005c FFF7FEFF 		bl	Error_Handler
 762              	.L29:
 268:Src/tim.c     ****   }
 269:Src/tim.c     **** 
 270:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 763              		.loc 1 270 37
 764 0060 0023     		movs	r3, #0
 765 0062 3B60     		str	r3, [r7]
 271:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 766              		.loc 1 271 33
 767 0064 0023     		movs	r3, #0
 768 0066 BB60     		str	r3, [r7, #8]
 272:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 769              		.loc 1 272 7
 770 0068 3B46     		mov	r3, r7
 771 006a 1946     		mov	r1, r3
 772 006c 0548     		ldr	r0, .L32
 773 006e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 774 0072 0346     		mov	r3, r0
 775              		.loc 1 272 6
 776 0074 002B     		cmp	r3, #0
 777 0076 01D0     		beq	.L31
 273:Src/tim.c     ****   {
 274:Src/tim.c     ****     Error_Handler();
 778              		.loc 1 274 5
 779 0078 FFF7FEFF 		bl	Error_Handler
 780              	.L31:
 275:Src/tim.c     ****   }
 276:Src/tim.c     **** 
 277:Src/tim.c     **** }
 781              		.loc 1 277 1
 782 007c 00BF     		nop
 783 007e 3037     		adds	r7, r7, #48
 784              	.LCFI23:
 785              		.cfi_def_cfa_offset 8
 786 0080 BD46     		mov	sp, r7
 787              	.LCFI24:
 788              		.cfi_def_cfa_register 13
 789              		@ sp needed
 790 0082 80BD     		pop	{r7, pc}
 791              	.L33:
 792              		.align	2
 793              	.L32:
 794 0084 00000000 		.word	htim4
 795 0088 00080040 		.word	1073743872
 796              		.cfi_endproc
 797              	.LFE1992:
 799              		.section	.text.MX_TIM8_Init,"ax",%progbits
 800              		.align	1
 801              		.global	MX_TIM8_Init
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv4-sp-d16
 807              	MX_TIM8_Init:
 808              	.LFB1993:
ARM GAS  /tmp/ccjZrRT3.s 			page 20


 278:Src/tim.c     **** 
 279:Src/tim.c     **** /* TIM8 init function */
 280:Src/tim.c     **** void MX_TIM8_Init(void)
 281:Src/tim.c     **** {
 809              		.loc 1 281 1
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 96
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813 0000 80B5     		push	{r7, lr}
 814              	.LCFI25:
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 98B0     		sub	sp, sp, #96
 819              	.LCFI26:
 820              		.cfi_def_cfa_offset 104
 821 0004 00AF     		add	r7, sp, #0
 822              	.LCFI27:
 823              		.cfi_def_cfa_register 7
 282:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 283:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 284:Src/tim.c     ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 285:Src/tim.c     **** 
 286:Src/tim.c     ****   htim8.Instance = TIM8;
 824              		.loc 1 286 18
 825 0006 434B     		ldr	r3, .L41
 826 0008 434A     		ldr	r2, .L41+4
 827 000a 1A60     		str	r2, [r3]
 287:Src/tim.c     ****   htim8.Init.Prescaler = 0;
 828              		.loc 1 287 24
 829 000c 414B     		ldr	r3, .L41
 830 000e 0022     		movs	r2, #0
 831 0010 5A60     		str	r2, [r3, #4]
 288:Src/tim.c     ****   htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 832              		.loc 1 288 26
 833 0012 404B     		ldr	r3, .L41
 834 0014 6022     		movs	r2, #96
 835 0016 9A60     		str	r2, [r3, #8]
 289:Src/tim.c     ****   htim8.Init.Period = TIM_1_8_PERIOD_CLOCKS;
 836              		.loc 1 289 21
 837 0018 3E4B     		ldr	r3, .L41
 838 001a 41F29A02 		movw	r2, #4250
 839 001e DA60     		str	r2, [r3, #12]
 290:Src/tim.c     ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 840              		.loc 1 290 28
 841 0020 3C4B     		ldr	r3, .L41
 842 0022 0022     		movs	r2, #0
 843 0024 1A61     		str	r2, [r3, #16]
 291:Src/tim.c     ****   htim8.Init.RepetitionCounter = TIM_1_8_RCR;
 844              		.loc 1 291 32
 845 0026 3B4B     		ldr	r3, .L41
 846 0028 0022     		movs	r2, #0
 847 002a 5A61     		str	r2, [r3, #20]
 292:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 848              		.loc 1 292 7
 849 002c 3948     		ldr	r0, .L41
 850 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
ARM GAS  /tmp/ccjZrRT3.s 			page 21


 851 0032 0346     		mov	r3, r0
 852              		.loc 1 292 6
 853 0034 002B     		cmp	r3, #0
 854 0036 01D0     		beq	.L35
 293:Src/tim.c     ****   {
 294:Src/tim.c     ****     Error_Handler();
 855              		.loc 1 294 5
 856 0038 FFF7FEFF 		bl	Error_Handler
 857              	.L35:
 295:Src/tim.c     ****   }
 296:Src/tim.c     **** 
 297:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 858              		.loc 1 297 37
 859 003c 2023     		movs	r3, #32
 860 003e 7B65     		str	r3, [r7, #84]
 298:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 861              		.loc 1 298 33
 862 0040 0023     		movs	r3, #0
 863 0042 FB65     		str	r3, [r7, #92]
 299:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 864              		.loc 1 299 7
 865 0044 07F15403 		add	r3, r7, #84
 866 0048 1946     		mov	r1, r3
 867 004a 3248     		ldr	r0, .L41
 868 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 869 0050 0346     		mov	r3, r0
 870              		.loc 1 299 6
 871 0052 002B     		cmp	r3, #0
 872 0054 01D0     		beq	.L36
 300:Src/tim.c     ****   {
 301:Src/tim.c     ****     Error_Handler();
 873              		.loc 1 301 5
 874 0056 FFF7FEFF 		bl	Error_Handler
 875              	.L36:
 302:Src/tim.c     ****   }
 303:Src/tim.c     **** 
 304:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 876              		.loc 1 304 20
 877 005a 7023     		movs	r3, #112
 878 005c BB63     		str	r3, [r7, #56]
 305:Src/tim.c     ****   sConfigOC.Pulse = 0;
 879              		.loc 1 305 19
 880 005e 0023     		movs	r3, #0
 881 0060 FB63     		str	r3, [r7, #60]
 306:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 882              		.loc 1 306 24
 883 0062 0023     		movs	r3, #0
 884 0064 3B64     		str	r3, [r7, #64]
 307:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 885              		.loc 1 307 25
 886 0066 0023     		movs	r3, #0
 887 0068 7B64     		str	r3, [r7, #68]
 308:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 888              		.loc 1 308 24
 889 006a 0023     		movs	r3, #0
 890 006c BB64     		str	r3, [r7, #72]
 309:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
ARM GAS  /tmp/ccjZrRT3.s 			page 22


 891              		.loc 1 309 25
 892 006e 0023     		movs	r3, #0
 893 0070 FB64     		str	r3, [r7, #76]
 310:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 894              		.loc 1 310 26
 895 0072 0023     		movs	r3, #0
 896 0074 3B65     		str	r3, [r7, #80]
 311:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 897              		.loc 1 311 7
 898 0076 07F13803 		add	r3, r7, #56
 899 007a 0022     		movs	r2, #0
 900 007c 1946     		mov	r1, r3
 901 007e 2548     		ldr	r0, .L41
 902 0080 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 903 0084 0346     		mov	r3, r0
 904              		.loc 1 311 6
 905 0086 002B     		cmp	r3, #0
 906 0088 01D0     		beq	.L37
 312:Src/tim.c     ****   {
 313:Src/tim.c     ****     Error_Handler();
 907              		.loc 1 313 5
 908 008a FFF7FEFF 		bl	Error_Handler
 909              	.L37:
 314:Src/tim.c     ****   }
 315:Src/tim.c     **** 
 316:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 910              		.loc 1 316 7
 911 008e 07F13803 		add	r3, r7, #56
 912 0092 0422     		movs	r2, #4
 913 0094 1946     		mov	r1, r3
 914 0096 1F48     		ldr	r0, .L41
 915 0098 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 916 009c 0346     		mov	r3, r0
 917              		.loc 1 316 6
 918 009e 002B     		cmp	r3, #0
 919 00a0 01D0     		beq	.L38
 317:Src/tim.c     ****   {
 318:Src/tim.c     ****     Error_Handler();
 920              		.loc 1 318 5
 921 00a2 FFF7FEFF 		bl	Error_Handler
 922              	.L38:
 319:Src/tim.c     ****   }
 320:Src/tim.c     **** 
 321:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 923              		.loc 1 321 7
 924 00a6 07F13803 		add	r3, r7, #56
 925 00aa 0822     		movs	r2, #8
 926 00ac 1946     		mov	r1, r3
 927 00ae 1948     		ldr	r0, .L41
 928 00b0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 929 00b4 0346     		mov	r3, r0
 930              		.loc 1 321 6
 931 00b6 002B     		cmp	r3, #0
 932 00b8 01D0     		beq	.L39
 322:Src/tim.c     ****   {
 323:Src/tim.c     ****     Error_Handler();
 933              		.loc 1 323 5
ARM GAS  /tmp/ccjZrRT3.s 			page 23


 934 00ba FFF7FEFF 		bl	Error_Handler
 935              	.L39:
 324:Src/tim.c     ****   }
 325:Src/tim.c     **** 
 326:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 936              		.loc 1 326 40
 937 00be 4FF40063 		mov	r3, #2048
 938 00c2 7B60     		str	r3, [r7, #4]
 327:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 939              		.loc 1 327 41
 940 00c4 4FF48063 		mov	r3, #1024
 941 00c8 BB60     		str	r3, [r7, #8]
 328:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 942              		.loc 1 328 34
 943 00ca 0023     		movs	r3, #0
 944 00cc FB60     		str	r3, [r7, #12]
 329:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = TIM_1_8_DEADTIME_CLOCKS;
 945              		.loc 1 329 33
 946 00ce 2823     		movs	r3, #40
 947 00d0 3B61     		str	r3, [r7, #16]
 330:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 948              		.loc 1 330 35
 949 00d2 0023     		movs	r3, #0
 950 00d4 7B61     		str	r3, [r7, #20]
 331:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 951              		.loc 1 331 38
 952 00d6 4FF40053 		mov	r3, #8192
 953 00da BB61     		str	r3, [r7, #24]
 332:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 954              		.loc 1 332 40
 955 00dc 0023     		movs	r3, #0
 956 00de 7B63     		str	r3, [r7, #52]
 333:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 957              		.loc 1 333 7
 958 00e0 3B1D     		adds	r3, r7, #4
 959 00e2 1946     		mov	r1, r3
 960 00e4 0B48     		ldr	r0, .L41
 961 00e6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 962 00ea 0346     		mov	r3, r0
 963              		.loc 1 333 6
 964 00ec 002B     		cmp	r3, #0
 965 00ee 01D0     		beq	.L40
 334:Src/tim.c     ****   {
 335:Src/tim.c     ****     Error_Handler() ;
 966              		.loc 1 335 5
 967 00f0 FFF7FEFF 		bl	Error_Handler
 968              	.L40:
 336:Src/tim.c     ****   }
 337:Src/tim.c     **** 
 338:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim8);
 969              		.loc 1 338 3
 970 00f4 0748     		ldr	r0, .L41
 971 00f6 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 339:Src/tim.c     **** __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 972              		.loc 1 339 1
 973 00fa 064B     		ldr	r3, .L41
 974 00fc 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccjZrRT3.s 			page 24


 975 00fe 5A6C     		ldr	r2, [r3, #68]
 976 0100 044B     		ldr	r3, .L41
 977 0102 1B68     		ldr	r3, [r3]
 978 0104 22F40042 		bic	r2, r2, #32768
 979 0108 5A64     		str	r2, [r3, #68]
 340:Src/tim.c     **** }
 980              		.loc 1 340 1
 981 010a 00BF     		nop
 982 010c 6037     		adds	r7, r7, #96
 983              	.LCFI28:
 984              		.cfi_def_cfa_offset 8
 985 010e BD46     		mov	sp, r7
 986              	.LCFI29:
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0110 80BD     		pop	{r7, pc}
 990              	.L42:
 991 0112 00BF     		.align	2
 992              	.L41:
 993 0114 00000000 		.word	htim8
 994 0118 00340140 		.word	1073820672
 995              		.cfi_endproc
 996              	.LFE1993:
 998              		.section	.text.MX_TIM15_Init,"ax",%progbits
 999              		.align	1
 1000              		.global	MX_TIM15_Init
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	MX_TIM15_Init:
 1007              	.LFB1994:
 341:Src/tim.c     **** /* TIM13 init function */
 342:Src/tim.c     **** void MX_TIM15_Init(void)
 343:Src/tim.c     **** {
 1008              		.loc 1 343 1
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 0000 80B5     		push	{r7, lr}
 1013              	.LCFI30:
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0002 00AF     		add	r7, sp, #0
 1018              	.LCFI31:
 1019              		.cfi_def_cfa_register 7
 344:Src/tim.c     **** 
 345:Src/tim.c     ****   htim15.Instance = TIM15;
 1020              		.loc 1 345 19
 1021 0004 0C4B     		ldr	r3, .L46
 1022 0006 0D4A     		ldr	r2, .L46+4
 1023 0008 1A60     		str	r2, [r3]
 346:Src/tim.c     ****   htim15.Init.Prescaler = 0;
 1024              		.loc 1 346 25
 1025 000a 0B4B     		ldr	r3, .L46
 1026 000c 0022     		movs	r2, #0
ARM GAS  /tmp/ccjZrRT3.s 			page 25


 1027 000e 5A60     		str	r2, [r3, #4]
 347:Src/tim.c     ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1028              		.loc 1 347 27
 1029 0010 094B     		ldr	r3, .L46
 1030 0012 0022     		movs	r2, #0
 1031 0014 9A60     		str	r2, [r3, #8]
 348:Src/tim.c     ****   htim15.Init.Period = (2 * TIM_1_8_PERIOD_CLOCKS * (TIM_1_8_RCR+1)) * ((float)TIM_APB1_CLOCK_HZ / 
 1032              		.loc 1 348 22
 1033 0016 084B     		ldr	r3, .L46
 1034 0018 41F29902 		movw	r2, #4249
 1035 001c DA60     		str	r2, [r3, #12]
 349:Src/tim.c     ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1036              		.loc 1 349 29
 1037 001e 064B     		ldr	r3, .L46
 1038 0020 0022     		movs	r2, #0
 1039 0022 1A61     		str	r2, [r3, #16]
 350:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1040              		.loc 1 350 7
 1041 0024 0448     		ldr	r0, .L46
 1042 0026 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1043 002a 0346     		mov	r3, r0
 1044              		.loc 1 350 6
 1045 002c 002B     		cmp	r3, #0
 1046 002e 01D0     		beq	.L45
 351:Src/tim.c     ****   {
 352:Src/tim.c     ****     Error_Handler();
 1047              		.loc 1 352 5
 1048 0030 FFF7FEFF 		bl	Error_Handler
 1049              	.L45:
 353:Src/tim.c     ****   }
 354:Src/tim.c     **** 
 355:Src/tim.c     **** }
 1050              		.loc 1 355 1
 1051 0034 00BF     		nop
 1052 0036 80BD     		pop	{r7, pc}
 1053              	.L47:
 1054              		.align	2
 1055              	.L46:
 1056 0038 00000000 		.word	htim15
 1057 003c 00400140 		.word	1073823744
 1058              		.cfi_endproc
 1059              	.LFE1994:
 1061              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 1062              		.align	1
 1063              		.global	HAL_TIM_Base_MspInit
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv4-sp-d16
 1069              	HAL_TIM_Base_MspInit:
 1070              	.LFB1995:
 356:Src/tim.c     **** 
 357:Src/tim.c     **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
 358:Src/tim.c     **** {
 1071              		.loc 1 358 1
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccjZrRT3.s 			page 26


 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              	.LCFI32:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 84B0     		sub	sp, sp, #16
 1081              	.LCFI33:
 1082              		.cfi_def_cfa_offset 24
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI34:
 1085              		.cfi_def_cfa_register 7
 1086 0006 7860     		str	r0, [r7, #4]
 359:Src/tim.c     **** 
 360:Src/tim.c     ****   if(tim_baseHandle->Instance==TIM1)
 1087              		.loc 1 360 20
 1088 0008 7B68     		ldr	r3, [r7, #4]
 1089 000a 1B68     		ldr	r3, [r3]
 1090              		.loc 1 360 5
 1091 000c 174A     		ldr	r2, .L52
 1092 000e 9342     		cmp	r3, r2
 1093 0010 11D1     		bne	.L49
 1094              	.LBB2:
 361:Src/tim.c     ****   {
 362:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 363:Src/tim.c     **** 
 364:Src/tim.c     ****   /* USER CODE END TIM1_MspInit 0 */
 365:Src/tim.c     ****     /* TIM1 clock enable */
 366:Src/tim.c     ****     __HAL_RCC_TIM1_CLK_ENABLE();
 1095              		.loc 1 366 5
 1096 0012 174B     		ldr	r3, .L52+4
 1097 0014 1B6E     		ldr	r3, [r3, #96]
 1098 0016 164A     		ldr	r2, .L52+4
 1099 0018 43F40063 		orr	r3, r3, #2048
 1100 001c 1366     		str	r3, [r2, #96]
 1101 001e 144B     		ldr	r3, .L52+4
 1102 0020 1B6E     		ldr	r3, [r3, #96]
 1103 0022 03F40063 		and	r3, r3, #2048
 1104 0026 FB60     		str	r3, [r7, #12]
 1105 0028 FB68     		ldr	r3, [r7, #12]
 1106              	.LBE2:
 367:Src/tim.c     **** 
 368:Src/tim.c     ****     /* TIM1 interrupt Init */
 369:Src/tim.c     ****     HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 6, 0);
 1107              		.loc 1 369 5
 1108 002a 0022     		movs	r2, #0
 1109 002c 0621     		movs	r1, #6
 1110 002e 1920     		movs	r0, #25
 1111 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 370:Src/tim.c     ****  //   HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 371:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 372:Src/tim.c     **** 
 373:Src/tim.c     ****   /* USER CODE END TIM1_MspInit 1 */
 374:Src/tim.c     ****   }
 375:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM15)
 376:Src/tim.c     ****   {
 377:Src/tim.c     ****   /* USER CODE BEGIN TIM13_MspInit 0 */
ARM GAS  /tmp/ccjZrRT3.s 			page 27


 378:Src/tim.c     **** 
 379:Src/tim.c     ****   /* USER CODE END TIM13_MspInit 0 */
 380:Src/tim.c     ****     /* TIM13 clock enable */
 381:Src/tim.c     ****     __HAL_RCC_TIM15_CLK_ENABLE();
 382:Src/tim.c     **** 
 383:Src/tim.c     ****     /* TIM13 interrupt Init */
 384:Src/tim.c     ****     HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 385:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 386:Src/tim.c     ****   /* USER CODE BEGIN TIM13_MspInit 1 */
 387:Src/tim.c     **** 
 388:Src/tim.c     ****   /* USER CODE END TIM13_MspInit 1 */
 389:Src/tim.c     ****   }
 390:Src/tim.c     **** }
 1112              		.loc 1 390 1
 1113 0034 15E0     		b	.L51
 1114              	.L49:
 375:Src/tim.c     ****   {
 1115              		.loc 1 375 25
 1116 0036 7B68     		ldr	r3, [r7, #4]
 1117 0038 1B68     		ldr	r3, [r3]
 375:Src/tim.c     ****   {
 1118              		.loc 1 375 10
 1119 003a 0E4A     		ldr	r2, .L52+8
 1120 003c 9342     		cmp	r3, r2
 1121 003e 10D1     		bne	.L51
 1122              	.LBB3:
 381:Src/tim.c     **** 
 1123              		.loc 1 381 5
 1124 0040 0B4B     		ldr	r3, .L52+4
 1125 0042 1B6E     		ldr	r3, [r3, #96]
 1126 0044 0A4A     		ldr	r2, .L52+4
 1127 0046 43F48033 		orr	r3, r3, #65536
 1128 004a 1366     		str	r3, [r2, #96]
 1129 004c 084B     		ldr	r3, .L52+4
 1130 004e 1B6E     		ldr	r3, [r3, #96]
 1131 0050 03F48033 		and	r3, r3, #65536
 1132 0054 BB60     		str	r3, [r7, #8]
 1133 0056 BB68     		ldr	r3, [r7, #8]
 1134              	.LBE3:
 384:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 1135              		.loc 1 384 5
 1136 0058 0022     		movs	r2, #0
 1137 005a 0621     		movs	r1, #6
 1138 005c 1820     		movs	r0, #24
 1139 005e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1140              	.L51:
 1141              		.loc 1 390 1
 1142 0062 00BF     		nop
 1143 0064 1037     		adds	r7, r7, #16
 1144              	.LCFI35:
 1145              		.cfi_def_cfa_offset 8
 1146 0066 BD46     		mov	sp, r7
 1147              	.LCFI36:
 1148              		.cfi_def_cfa_register 13
 1149              		@ sp needed
 1150 0068 80BD     		pop	{r7, pc}
 1151              	.L53:
ARM GAS  /tmp/ccjZrRT3.s 			page 28


 1152 006a 00BF     		.align	2
 1153              	.L52:
 1154 006c 002C0140 		.word	1073818624
 1155 0070 00100240 		.word	1073876992
 1156 0074 00400140 		.word	1073823744
 1157              		.cfi_endproc
 1158              	.LFE1995:
 1160              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 1161              		.align	1
 1162              		.global	HAL_TIM_PWM_MspInit
 1163              		.syntax unified
 1164              		.thumb
 1165              		.thumb_func
 1166              		.fpu fpv4-sp-d16
 1168              	HAL_TIM_PWM_MspInit:
 1169              	.LFB1996:
 391:Src/tim.c     **** 
 392:Src/tim.c     **** void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
 393:Src/tim.c     **** {
 1170              		.loc 1 393 1
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 16
 1173              		@ frame_needed = 1, uses_anonymous_args = 0
 1174 0000 80B5     		push	{r7, lr}
 1175              	.LCFI37:
 1176              		.cfi_def_cfa_offset 8
 1177              		.cfi_offset 7, -8
 1178              		.cfi_offset 14, -4
 1179 0002 84B0     		sub	sp, sp, #16
 1180              	.LCFI38:
 1181              		.cfi_def_cfa_offset 24
 1182 0004 00AF     		add	r7, sp, #0
 1183              	.LCFI39:
 1184              		.cfi_def_cfa_register 7
 1185 0006 7860     		str	r0, [r7, #4]
 394:Src/tim.c     **** 
 395:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM2)
 1186              		.loc 1 395 19
 1187 0008 7B68     		ldr	r3, [r7, #4]
 1188 000a 1B68     		ldr	r3, [r3]
 1189              		.loc 1 395 5
 1190 000c B3F1804F 		cmp	r3, #1073741824
 1191 0010 0CD1     		bne	.L55
 1192              	.LBB4:
 396:Src/tim.c     ****   {
 397:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspInit 0 */
 398:Src/tim.c     **** 
 399:Src/tim.c     ****   /* USER CODE END TIM2_MspInit 0 */
 400:Src/tim.c     ****     /* TIM2 clock enable */
 401:Src/tim.c     ****     __HAL_RCC_TIM2_CLK_ENABLE();
 1193              		.loc 1 401 5
 1194 0012 164B     		ldr	r3, .L58
 1195 0014 9B6D     		ldr	r3, [r3, #88]
 1196 0016 154A     		ldr	r2, .L58
 1197 0018 43F00103 		orr	r3, r3, #1
 1198 001c 9365     		str	r3, [r2, #88]
 1199 001e 134B     		ldr	r3, .L58
ARM GAS  /tmp/ccjZrRT3.s 			page 29


 1200 0020 9B6D     		ldr	r3, [r3, #88]
 1201 0022 03F00103 		and	r3, r3, #1
 1202 0026 FB60     		str	r3, [r7, #12]
 1203 0028 FB68     		ldr	r3, [r7, #12]
 1204              	.LBE4:
 402:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspInit 1 */
 403:Src/tim.c     **** 
 404:Src/tim.c     ****   /* USER CODE END TIM2_MspInit 1 */
 405:Src/tim.c     ****   }
 406:Src/tim.c     ****   else if(tim_pwmHandle->Instance==TIM8)
 407:Src/tim.c     ****   {
 408:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 0 */
 409:Src/tim.c     **** 
 410:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 0 */
 411:Src/tim.c     ****     /* TIM8 clock enable */
 412:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_ENABLE();
 413:Src/tim.c     **** 
 414:Src/tim.c     ****     /* TIM8 interrupt Init */
 415:Src/tim.c     ****     HAL_NVIC_SetPriority(TIM8_UP_IRQn, 6, 0);
 416:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 417:Src/tim.c     ****     HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 6, 0);
 418:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 419:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 1 */
 420:Src/tim.c     **** 
 421:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 1 */
 422:Src/tim.c     ****   }
 423:Src/tim.c     **** }
 1205              		.loc 1 423 1
 1206 002a 1AE0     		b	.L57
 1207              	.L55:
 406:Src/tim.c     ****   {
 1208              		.loc 1 406 24
 1209 002c 7B68     		ldr	r3, [r7, #4]
 1210 002e 1B68     		ldr	r3, [r3]
 406:Src/tim.c     ****   {
 1211              		.loc 1 406 10
 1212 0030 0F4A     		ldr	r2, .L58+4
 1213 0032 9342     		cmp	r3, r2
 1214 0034 15D1     		bne	.L57
 1215              	.LBB5:
 412:Src/tim.c     **** 
 1216              		.loc 1 412 5
 1217 0036 0D4B     		ldr	r3, .L58
 1218 0038 1B6E     		ldr	r3, [r3, #96]
 1219 003a 0C4A     		ldr	r2, .L58
 1220 003c 43F40053 		orr	r3, r3, #8192
 1221 0040 1366     		str	r3, [r2, #96]
 1222 0042 0A4B     		ldr	r3, .L58
 1223 0044 1B6E     		ldr	r3, [r3, #96]
 1224 0046 03F40053 		and	r3, r3, #8192
 1225 004a BB60     		str	r3, [r7, #8]
 1226 004c BB68     		ldr	r3, [r7, #8]
 1227              	.LBE5:
 415:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 1228              		.loc 1 415 5
 1229 004e 0022     		movs	r2, #0
 1230 0050 0621     		movs	r1, #6
ARM GAS  /tmp/ccjZrRT3.s 			page 30


 1231 0052 2C20     		movs	r0, #44
 1232 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 417:Src/tim.c     ****   //  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 1233              		.loc 1 417 5
 1234 0058 0022     		movs	r2, #0
 1235 005a 0621     		movs	r1, #6
 1236 005c 2D20     		movs	r0, #45
 1237 005e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1238              	.L57:
 1239              		.loc 1 423 1
 1240 0062 00BF     		nop
 1241 0064 1037     		adds	r7, r7, #16
 1242              	.LCFI40:
 1243              		.cfi_def_cfa_offset 8
 1244 0066 BD46     		mov	sp, r7
 1245              	.LCFI41:
 1246              		.cfi_def_cfa_register 13
 1247              		@ sp needed
 1248 0068 80BD     		pop	{r7, pc}
 1249              	.L59:
 1250 006a 00BF     		.align	2
 1251              	.L58:
 1252 006c 00100240 		.word	1073876992
 1253 0070 00340140 		.word	1073820672
 1254              		.cfi_endproc
 1255              	.LFE1996:
 1257              		.section	.text.HAL_TIM_Encoder_MspInit,"ax",%progbits
 1258              		.align	1
 1259              		.global	HAL_TIM_Encoder_MspInit
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1263              		.fpu fpv4-sp-d16
 1265              	HAL_TIM_Encoder_MspInit:
 1266              	.LFB1997:
 424:Src/tim.c     **** 
 425:Src/tim.c     **** void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
 426:Src/tim.c     **** {
 1267              		.loc 1 426 1
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 40
 1270              		@ frame_needed = 1, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 1272 0000 80B4     		push	{r7}
 1273              	.LCFI42:
 1274              		.cfi_def_cfa_offset 4
 1275              		.cfi_offset 7, -4
 1276 0002 8BB0     		sub	sp, sp, #44
 1277              	.LCFI43:
 1278              		.cfi_def_cfa_offset 48
 1279 0004 00AF     		add	r7, sp, #0
 1280              	.LCFI44:
 1281              		.cfi_def_cfa_register 7
 1282 0006 7860     		str	r0, [r7, #4]
 427:Src/tim.c     **** 
 428:Src/tim.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 429:Src/tim.c     ****   if(tim_encoderHandle->Instance==TIM3)
ARM GAS  /tmp/ccjZrRT3.s 			page 31


 1283              		.loc 1 429 23
 1284 0008 7B68     		ldr	r3, [r7, #4]
 1285 000a 1B68     		ldr	r3, [r3]
 1286              		.loc 1 429 5
 1287 000c 134A     		ldr	r2, .L64
 1288 000e 9342     		cmp	r3, r2
 1289 0010 0CD1     		bne	.L61
 1290              	.LBB6:
 430:Src/tim.c     ****   {
 431:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspInit 0 */
 432:Src/tim.c     **** 
 433:Src/tim.c     ****   /* USER CODE END TIM3_MspInit 0 */
 434:Src/tim.c     ****     /* TIM3 clock enable */
 435:Src/tim.c     ****     __HAL_RCC_TIM3_CLK_ENABLE();
 1291              		.loc 1 435 5
 1292 0012 134B     		ldr	r3, .L64+4
 1293 0014 9B6D     		ldr	r3, [r3, #88]
 1294 0016 124A     		ldr	r2, .L64+4
 1295 0018 43F00203 		orr	r3, r3, #2
 1296 001c 9365     		str	r3, [r2, #88]
 1297 001e 104B     		ldr	r3, .L64+4
 1298 0020 9B6D     		ldr	r3, [r3, #88]
 1299 0022 03F00203 		and	r3, r3, #2
 1300 0026 3B61     		str	r3, [r7, #16]
 1301 0028 3B69     		ldr	r3, [r7, #16]
 1302              	.LBE6:
 436:Src/tim.c     ****   
 437:Src/tim.c     ****     /**TIM3 GPIO Configuration    
 438:Src/tim.c     ****     PB4     ------> TIM3_CH1
 439:Src/tim.c     ****     PB5     ------> TIM3_CH2 
 440:Src/tim.c     ****     */
 441:Src/tim.c     **** 
 442:Src/tim.c     **** 
 443:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspInit 1 */
 444:Src/tim.c     **** 
 445:Src/tim.c     ****   /* USER CODE END TIM3_MspInit 1 */
 446:Src/tim.c     ****   }
 447:Src/tim.c     ****   else if(tim_encoderHandle->Instance==TIM4)
 448:Src/tim.c     ****   {
 449:Src/tim.c     ****   /* USER CODE BEGIN TIM4_MspInit 0 */
 450:Src/tim.c     **** 
 451:Src/tim.c     ****   /* USER CODE END TIM4_MspInit 0 */
 452:Src/tim.c     ****     /* TIM4 clock enable */
 453:Src/tim.c     ****     __HAL_RCC_TIM4_CLK_ENABLE();
 454:Src/tim.c     ****   
 455:Src/tim.c     ****     /**TIM4 GPIO Configuration    
 456:Src/tim.c     ****     PB6     ------> TIM4_CH1
 457:Src/tim.c     ****     PB7     ------> TIM4_CH2 
 458:Src/tim.c     ****     */
 459:Src/tim.c     **** \
 460:Src/tim.c     **** 
 461:Src/tim.c     ****   /* USER CODE BEGIN TIM4_MspInit 1 */
 462:Src/tim.c     **** 
 463:Src/tim.c     ****   /* USER CODE END TIM4_MspInit 1 */
 464:Src/tim.c     ****   }
 465:Src/tim.c     **** }
 1303              		.loc 1 465 1
ARM GAS  /tmp/ccjZrRT3.s 			page 32


 1304 002a 10E0     		b	.L63
 1305              	.L61:
 447:Src/tim.c     ****   {
 1306              		.loc 1 447 28
 1307 002c 7B68     		ldr	r3, [r7, #4]
 1308 002e 1B68     		ldr	r3, [r3]
 447:Src/tim.c     ****   {
 1309              		.loc 1 447 10
 1310 0030 0C4A     		ldr	r2, .L64+8
 1311 0032 9342     		cmp	r3, r2
 1312 0034 0BD1     		bne	.L63
 1313              	.LBB7:
 453:Src/tim.c     ****   
 1314              		.loc 1 453 5
 1315 0036 0A4B     		ldr	r3, .L64+4
 1316 0038 9B6D     		ldr	r3, [r3, #88]
 1317 003a 094A     		ldr	r2, .L64+4
 1318 003c 43F00403 		orr	r3, r3, #4
 1319 0040 9365     		str	r3, [r2, #88]
 1320 0042 074B     		ldr	r3, .L64+4
 1321 0044 9B6D     		ldr	r3, [r3, #88]
 1322 0046 03F00403 		and	r3, r3, #4
 1323 004a FB60     		str	r3, [r7, #12]
 1324 004c FB68     		ldr	r3, [r7, #12]
 1325              	.L63:
 1326              	.LBE7:
 1327              		.loc 1 465 1
 1328 004e 00BF     		nop
 1329 0050 2C37     		adds	r7, r7, #44
 1330              	.LCFI45:
 1331              		.cfi_def_cfa_offset 4
 1332 0052 BD46     		mov	sp, r7
 1333              	.LCFI46:
 1334              		.cfi_def_cfa_register 13
 1335              		@ sp needed
 1336 0054 5DF8047B 		ldr	r7, [sp], #4
 1337              	.LCFI47:
 1338              		.cfi_restore 7
 1339              		.cfi_def_cfa_offset 0
 1340 0058 7047     		bx	lr
 1341              	.L65:
 1342 005a 00BF     		.align	2
 1343              	.L64:
 1344 005c 00040040 		.word	1073742848
 1345 0060 00100240 		.word	1073876992
 1346 0064 00080040 		.word	1073743872
 1347              		.cfi_endproc
 1348              	.LFE1997:
 1350              		.section	.text.HAL_TIM_IC_MspInit,"ax",%progbits
 1351              		.align	1
 1352              		.global	HAL_TIM_IC_MspInit
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	HAL_TIM_IC_MspInit:
 1359              	.LFB1998:
ARM GAS  /tmp/ccjZrRT3.s 			page 33


 466:Src/tim.c     **** 
 467:Src/tim.c     **** void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
 468:Src/tim.c     **** {
 1360              		.loc 1 468 1
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 32
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365 0000 80B4     		push	{r7}
 1366              	.LCFI48:
 1367              		.cfi_def_cfa_offset 4
 1368              		.cfi_offset 7, -4
 1369 0002 89B0     		sub	sp, sp, #36
 1370              	.LCFI49:
 1371              		.cfi_def_cfa_offset 40
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI50:
 1374              		.cfi_def_cfa_register 7
 1375 0006 7860     		str	r0, [r7, #4]
 469:Src/tim.c     **** 
 470:Src/tim.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 471:Src/tim.c     ****   if(tim_icHandle->Instance==TIM15)
 472:Src/tim.c     ****   {
 473:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspInit 0 */
 474:Src/tim.c     **** 
 475:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspInit 1 */
 476:Src/tim.c     **** 
 477:Src/tim.c     ****   /* USER CODE END TIM5_MspInit 1 */
 478:Src/tim.c     ****   }
 479:Src/tim.c     **** }
 1376              		.loc 1 479 1
 1377 0008 00BF     		nop
 1378 000a 2437     		adds	r7, r7, #36
 1379              	.LCFI51:
 1380              		.cfi_def_cfa_offset 4
 1381 000c BD46     		mov	sp, r7
 1382              	.LCFI52:
 1383              		.cfi_def_cfa_register 13
 1384              		@ sp needed
 1385 000e 5DF8047B 		ldr	r7, [sp], #4
 1386              	.LCFI53:
 1387              		.cfi_restore 7
 1388              		.cfi_def_cfa_offset 0
 1389 0012 7047     		bx	lr
 1390              		.cfi_endproc
 1391              	.LFE1998:
 1393              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 1394              		.align	1
 1395              		.global	HAL_TIM_MspPostInit
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu fpv4-sp-d16
 1401              	HAL_TIM_MspPostInit:
 1402              	.LFB1999:
 480:Src/tim.c     **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 481:Src/tim.c     **** {
ARM GAS  /tmp/ccjZrRT3.s 			page 34


 1403              		.loc 1 481 1
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 32
 1406              		@ frame_needed = 1, uses_anonymous_args = 0
 1407              		@ link register save eliminated.
 1408 0000 80B4     		push	{r7}
 1409              	.LCFI54:
 1410              		.cfi_def_cfa_offset 4
 1411              		.cfi_offset 7, -4
 1412 0002 89B0     		sub	sp, sp, #36
 1413              	.LCFI55:
 1414              		.cfi_def_cfa_offset 40
 1415 0004 00AF     		add	r7, sp, #0
 1416              	.LCFI56:
 1417              		.cfi_def_cfa_register 7
 1418 0006 7860     		str	r0, [r7, #4]
 482:Src/tim.c     **** 
 483:Src/tim.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 484:Src/tim.c     ****   if(timHandle->Instance==TIM1)
 1419              		.loc 1 484 15
 1420 0008 7B68     		ldr	r3, [r7, #4]
 1421 000a 1B68     		ldr	r3, [r3]
 1422              		.loc 1 484 5
 1423 000c 064A     		ldr	r2, .L70
 1424 000e 9342     		cmp	r3, r2
 1425 0010 03D0     		beq	.L69
 485:Src/tim.c     ****   {
 486:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 487:Src/tim.c     **** 
 488:Src/tim.c     ****   /* USER CODE END TIM1_MspPostInit 0 */
 489:Src/tim.c     ****     /**TIM1 GPIO Configuration    
 490:Src/tim.c     ****     PB13     ------> TIM1_CH1N
 491:Src/tim.c     ****     PB14     ------> TIM1_CH2N
 492:Src/tim.c     ****     PB15     ------> TIM1_CH3N
 493:Src/tim.c     ****     PA8     ------> TIM1_CH1
 494:Src/tim.c     ****     PA9     ------> TIM1_CH2
 495:Src/tim.c     ****     PA10     ------> TIM1_CH3 
 496:Src/tim.c     ****     */
 497:Src/tim.c     **** 
 498:Src/tim.c     **** 
 499:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 500:Src/tim.c     **** 
 501:Src/tim.c     ****   /* USER CODE END TIM1_MspPostInit 1 */
 502:Src/tim.c     ****   }
 503:Src/tim.c     ****   else if(timHandle->Instance==TIM2)
 1426              		.loc 1 503 20
 1427 0012 7B68     		ldr	r3, [r7, #4]
 1428 0014 1B68     		ldr	r3, [r3]
 1429              		.loc 1 503 10
 1430 0016 B3F1804F 		cmp	r3, #1073741824
 1431              	.L69:
 504:Src/tim.c     ****   {
 505:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspPostInit 0 */
 506:Src/tim.c     **** 
 507:Src/tim.c     ****   /* USER CODE END TIM2_MspPostInit 0 */
 508:Src/tim.c     ****   
 509:Src/tim.c     ****     /**TIM2 GPIO Configuration    
ARM GAS  /tmp/ccjZrRT3.s 			page 35


 510:Src/tim.c     ****     PB10     ------> TIM2_CH3
 511:Src/tim.c     ****     PB11     ------> TIM2_CH4 
 512:Src/tim.c     ****     */
 513:Src/tim.c     **** 
 514:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspPostInit 1 */
 515:Src/tim.c     **** 
 516:Src/tim.c     ****   /* USER CODE END TIM2_MspPostInit 1 */
 517:Src/tim.c     ****   }
 518:Src/tim.c     ****   else if(timHandle->Instance==TIM8)
 519:Src/tim.c     ****   {
 520:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspPostInit 0 */
 521:Src/tim.c     **** 
 522:Src/tim.c     ****   /* USER CODE END TIM8_MspPostInit 0 */
 523:Src/tim.c     ****   
 524:Src/tim.c     ****     /**TIM8 GPIO Configuration    
 525:Src/tim.c     ****     PA7     ------> TIM8_CH1N
 526:Src/tim.c     ****     PB0     ------> TIM8_CH2N
 527:Src/tim.c     ****     PB1     ------> TIM8_CH3N
 528:Src/tim.c     ****     PC6     ------> TIM8_CH1
 529:Src/tim.c     ****     PC7     ------> TIM8_CH2
 530:Src/tim.c     ****     PC8     ------> TIM8_CH3 
 531:Src/tim.c     ****     */
 532:Src/tim.c     **** 
 533:Src/tim.c     **** 
 534:Src/tim.c     **** 
 535:Src/tim.c     **** 
 536:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspPostInit 1 */
 537:Src/tim.c     **** 
 538:Src/tim.c     ****   /* USER CODE END TIM8_MspPostInit 1 */
 539:Src/tim.c     ****   }
 540:Src/tim.c     **** 
 541:Src/tim.c     **** }
 1432              		.loc 1 541 1
 1433 001a 00BF     		nop
 1434 001c 2437     		adds	r7, r7, #36
 1435              	.LCFI57:
 1436              		.cfi_def_cfa_offset 4
 1437 001e BD46     		mov	sp, r7
 1438              	.LCFI58:
 1439              		.cfi_def_cfa_register 13
 1440              		@ sp needed
 1441 0020 5DF8047B 		ldr	r7, [sp], #4
 1442              	.LCFI59:
 1443              		.cfi_restore 7
 1444              		.cfi_def_cfa_offset 0
 1445 0024 7047     		bx	lr
 1446              	.L71:
 1447 0026 00BF     		.align	2
 1448              	.L70:
 1449 0028 002C0140 		.word	1073818624
 1450              		.cfi_endproc
 1451              	.LFE1999:
 1453              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 1454              		.align	1
 1455              		.global	HAL_TIM_Base_MspDeInit
 1456              		.syntax unified
 1457              		.thumb
ARM GAS  /tmp/ccjZrRT3.s 			page 36


 1458              		.thumb_func
 1459              		.fpu fpv4-sp-d16
 1461              	HAL_TIM_Base_MspDeInit:
 1462              	.LFB2000:
 542:Src/tim.c     **** 
 543:Src/tim.c     **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 544:Src/tim.c     **** {
 1463              		.loc 1 544 1
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 8
 1466              		@ frame_needed = 1, uses_anonymous_args = 0
 1467 0000 80B5     		push	{r7, lr}
 1468              	.LCFI60:
 1469              		.cfi_def_cfa_offset 8
 1470              		.cfi_offset 7, -8
 1471              		.cfi_offset 14, -4
 1472 0002 82B0     		sub	sp, sp, #8
 1473              	.LCFI61:
 1474              		.cfi_def_cfa_offset 16
 1475 0004 00AF     		add	r7, sp, #0
 1476              	.LCFI62:
 1477              		.cfi_def_cfa_register 7
 1478 0006 7860     		str	r0, [r7, #4]
 545:Src/tim.c     **** 
 546:Src/tim.c     ****   if(tim_baseHandle->Instance==TIM1)
 1479              		.loc 1 546 20
 1480 0008 7B68     		ldr	r3, [r7, #4]
 1481 000a 1B68     		ldr	r3, [r3]
 1482              		.loc 1 546 5
 1483 000c 0D4A     		ldr	r2, .L76
 1484 000e 9342     		cmp	r3, r2
 1485 0010 09D1     		bne	.L73
 547:Src/tim.c     ****   {
 548:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 549:Src/tim.c     **** 
 550:Src/tim.c     ****   /* USER CODE END TIM1_MspDeInit 0 */
 551:Src/tim.c     ****     /* Peripheral clock disable */
 552:Src/tim.c     ****     __HAL_RCC_TIM1_CLK_DISABLE();
 1486              		.loc 1 552 5
 1487 0012 0D4B     		ldr	r3, .L76+4
 1488 0014 1B6E     		ldr	r3, [r3, #96]
 1489 0016 0C4A     		ldr	r2, .L76+4
 1490 0018 23F40063 		bic	r3, r3, #2048
 1491 001c 1366     		str	r3, [r2, #96]
 553:Src/tim.c     **** 
 554:Src/tim.c     ****     /* TIM1 interrupt Deinit */
 555:Src/tim.c     ****     HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 1492              		.loc 1 555 5
 1493 001e 1920     		movs	r0, #25
 1494 0020 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 556:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 557:Src/tim.c     **** 
 558:Src/tim.c     ****   /* USER CODE END TIM1_MspDeInit 1 */
 559:Src/tim.c     ****   }
 560:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM15)
 561:Src/tim.c     ****   {
 562:Src/tim.c     ****   /* USER CODE BEGIN TIM13_MspDeInit 0 */
ARM GAS  /tmp/ccjZrRT3.s 			page 37


 563:Src/tim.c     **** 
 564:Src/tim.c     ****   /* USER CODE END TIM13_MspDeInit 0 */
 565:Src/tim.c     ****     /* Peripheral clock disable */
 566:Src/tim.c     ****     __HAL_RCC_TIM15_CLK_DISABLE();
 567:Src/tim.c     **** 
 568:Src/tim.c     ****     /* TIM13 interrupt Deinit */
 569:Src/tim.c     ****   /* USER CODE BEGIN TIM13:TIM8_UP_TIM13_IRQn disable */
 570:Src/tim.c     ****     /**
 571:Src/tim.c     ****     * Uncomment the line below to disable the "TIM8_UP_TIM13_IRQn" interrupt
 572:Src/tim.c     ****     * Be aware, disabling shared interrupt may affect other IPs
 573:Src/tim.c     ****     */
 574:Src/tim.c     ****     /* HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn); */
 575:Src/tim.c     ****   /* USER CODE END TIM13:TIM8_UP_TIM13_IRQn disable */
 576:Src/tim.c     **** 
 577:Src/tim.c     ****   /* USER CODE BEGIN TIM13_MspDeInit 1 */
 578:Src/tim.c     **** 
 579:Src/tim.c     ****   /* USER CODE END TIM13_MspDeInit 1 */
 580:Src/tim.c     ****   }
 581:Src/tim.c     **** }
 1495              		.loc 1 581 1
 1496 0024 0AE0     		b	.L75
 1497              	.L73:
 560:Src/tim.c     ****   {
 1498              		.loc 1 560 25
 1499 0026 7B68     		ldr	r3, [r7, #4]
 1500 0028 1B68     		ldr	r3, [r3]
 560:Src/tim.c     ****   {
 1501              		.loc 1 560 10
 1502 002a 084A     		ldr	r2, .L76+8
 1503 002c 9342     		cmp	r3, r2
 1504 002e 05D1     		bne	.L75
 566:Src/tim.c     **** 
 1505              		.loc 1 566 5
 1506 0030 054B     		ldr	r3, .L76+4
 1507 0032 1B6E     		ldr	r3, [r3, #96]
 1508 0034 044A     		ldr	r2, .L76+4
 1509 0036 23F48033 		bic	r3, r3, #65536
 1510 003a 1366     		str	r3, [r2, #96]
 1511              	.L75:
 1512              		.loc 1 581 1
 1513 003c 00BF     		nop
 1514 003e 0837     		adds	r7, r7, #8
 1515              	.LCFI63:
 1516              		.cfi_def_cfa_offset 8
 1517 0040 BD46     		mov	sp, r7
 1518              	.LCFI64:
 1519              		.cfi_def_cfa_register 13
 1520              		@ sp needed
 1521 0042 80BD     		pop	{r7, pc}
 1522              	.L77:
 1523              		.align	2
 1524              	.L76:
 1525 0044 002C0140 		.word	1073818624
 1526 0048 00100240 		.word	1073876992
 1527 004c 00400140 		.word	1073823744
 1528              		.cfi_endproc
 1529              	.LFE2000:
ARM GAS  /tmp/ccjZrRT3.s 			page 38


 1531              		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 1532              		.align	1
 1533              		.global	HAL_TIM_PWM_MspDeInit
 1534              		.syntax unified
 1535              		.thumb
 1536              		.thumb_func
 1537              		.fpu fpv4-sp-d16
 1539              	HAL_TIM_PWM_MspDeInit:
 1540              	.LFB2001:
 582:Src/tim.c     **** 
 583:Src/tim.c     **** void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
 584:Src/tim.c     **** {
 1541              		.loc 1 584 1
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 8
 1544              		@ frame_needed = 1, uses_anonymous_args = 0
 1545              		@ link register save eliminated.
 1546 0000 80B4     		push	{r7}
 1547              	.LCFI65:
 1548              		.cfi_def_cfa_offset 4
 1549              		.cfi_offset 7, -4
 1550 0002 83B0     		sub	sp, sp, #12
 1551              	.LCFI66:
 1552              		.cfi_def_cfa_offset 16
 1553 0004 00AF     		add	r7, sp, #0
 1554              	.LCFI67:
 1555              		.cfi_def_cfa_register 7
 1556 0006 7860     		str	r0, [r7, #4]
 585:Src/tim.c     **** 
 586:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM2)
 1557              		.loc 1 586 19
 1558 0008 7B68     		ldr	r3, [r7, #4]
 1559 000a 1B68     		ldr	r3, [r3]
 1560              		.loc 1 586 5
 1561 000c B3F1804F 		cmp	r3, #1073741824
 1562 0010 06D1     		bne	.L79
 587:Src/tim.c     ****   {
 588:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspDeInit 0 */
 589:Src/tim.c     **** 
 590:Src/tim.c     ****   /* USER CODE END TIM2_MspDeInit 0 */
 591:Src/tim.c     ****     /* Peripheral clock disable */
 592:Src/tim.c     ****     __HAL_RCC_TIM2_CLK_DISABLE();
 1563              		.loc 1 592 5
 1564 0012 0C4B     		ldr	r3, .L82
 1565 0014 9B6D     		ldr	r3, [r3, #88]
 1566 0016 0B4A     		ldr	r2, .L82
 1567 0018 23F00103 		bic	r3, r3, #1
 1568 001c 9365     		str	r3, [r2, #88]
 593:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 594:Src/tim.c     **** 
 595:Src/tim.c     ****   /* USER CODE END TIM2_MspDeInit 1 */
 596:Src/tim.c     ****   }
 597:Src/tim.c     ****   else if(tim_pwmHandle->Instance==TIM8)
 598:Src/tim.c     ****   {
 599:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 0 */
 600:Src/tim.c     **** 
 601:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 0 */
ARM GAS  /tmp/ccjZrRT3.s 			page 39


 602:Src/tim.c     ****     /* Peripheral clock disable */
 603:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_DISABLE();
 604:Src/tim.c     **** 
 605:Src/tim.c     ****     /* TIM8 interrupt Deinit */
 606:Src/tim.c     ****   /* USER CODE BEGIN TIM8:TIM8_UP_TIM13_IRQn disable */
 607:Src/tim.c     ****     /**
 608:Src/tim.c     ****     * Uncomment the line below to disable the "TIM8_UP_TIM13_IRQn" interrupt
 609:Src/tim.c     ****     * Be aware, disabling shared interrupt may affect other IPs
 610:Src/tim.c     ****     */
 611:Src/tim.c     ****     /* HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn); */
 612:Src/tim.c     ****   /* USER CODE END TIM8:TIM8_UP_TIM13_IRQn disable */
 613:Src/tim.c     **** 
 614:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 615:Src/tim.c     **** 
 616:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 1 */
 617:Src/tim.c     ****   }
 618:Src/tim.c     **** }
 1569              		.loc 1 618 1
 1570 001e 0AE0     		b	.L81
 1571              	.L79:
 597:Src/tim.c     ****   {
 1572              		.loc 1 597 24
 1573 0020 7B68     		ldr	r3, [r7, #4]
 1574 0022 1B68     		ldr	r3, [r3]
 597:Src/tim.c     ****   {
 1575              		.loc 1 597 10
 1576 0024 084A     		ldr	r2, .L82+4
 1577 0026 9342     		cmp	r3, r2
 1578 0028 05D1     		bne	.L81
 603:Src/tim.c     **** 
 1579              		.loc 1 603 5
 1580 002a 064B     		ldr	r3, .L82
 1581 002c 1B6E     		ldr	r3, [r3, #96]
 1582 002e 054A     		ldr	r2, .L82
 1583 0030 23F40053 		bic	r3, r3, #8192
 1584 0034 1366     		str	r3, [r2, #96]
 1585              	.L81:
 1586              		.loc 1 618 1
 1587 0036 00BF     		nop
 1588 0038 0C37     		adds	r7, r7, #12
 1589              	.LCFI68:
 1590              		.cfi_def_cfa_offset 4
 1591 003a BD46     		mov	sp, r7
 1592              	.LCFI69:
 1593              		.cfi_def_cfa_register 13
 1594              		@ sp needed
 1595 003c 5DF8047B 		ldr	r7, [sp], #4
 1596              	.LCFI70:
 1597              		.cfi_restore 7
 1598              		.cfi_def_cfa_offset 0
 1599 0040 7047     		bx	lr
 1600              	.L83:
 1601 0042 00BF     		.align	2
 1602              	.L82:
 1603 0044 00100240 		.word	1073876992
 1604 0048 00340140 		.word	1073820672
 1605              		.cfi_endproc
ARM GAS  /tmp/ccjZrRT3.s 			page 40


 1606              	.LFE2001:
 1608              		.section	.text.HAL_TIM_Encoder_MspDeInit,"ax",%progbits
 1609              		.align	1
 1610              		.global	HAL_TIM_Encoder_MspDeInit
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu fpv4-sp-d16
 1616              	HAL_TIM_Encoder_MspDeInit:
 1617              	.LFB2002:
 619:Src/tim.c     **** 
 620:Src/tim.c     **** void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef* tim_encoderHandle)
 621:Src/tim.c     **** {
 1618              		.loc 1 621 1
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622              		@ link register save eliminated.
 1623 0000 80B4     		push	{r7}
 1624              	.LCFI71:
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 7, -4
 1627 0002 83B0     		sub	sp, sp, #12
 1628              	.LCFI72:
 1629              		.cfi_def_cfa_offset 16
 1630 0004 00AF     		add	r7, sp, #0
 1631              	.LCFI73:
 1632              		.cfi_def_cfa_register 7
 1633 0006 7860     		str	r0, [r7, #4]
 622:Src/tim.c     **** 
 623:Src/tim.c     ****   if(tim_encoderHandle->Instance==TIM3)
 1634              		.loc 1 623 23
 1635 0008 7B68     		ldr	r3, [r7, #4]
 1636 000a 1B68     		ldr	r3, [r3]
 1637              		.loc 1 623 5
 1638 000c 0D4A     		ldr	r2, .L88
 1639 000e 9342     		cmp	r3, r2
 1640 0010 06D1     		bne	.L85
 624:Src/tim.c     ****   {
 625:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspDeInit 0 */
 626:Src/tim.c     **** 
 627:Src/tim.c     ****   /* USER CODE END TIM3_MspDeInit 0 */
 628:Src/tim.c     ****     /* Peripheral clock disable */
 629:Src/tim.c     ****     __HAL_RCC_TIM3_CLK_DISABLE();
 1641              		.loc 1 629 5
 1642 0012 0D4B     		ldr	r3, .L88+4
 1643 0014 9B6D     		ldr	r3, [r3, #88]
 1644 0016 0C4A     		ldr	r2, .L88+4
 1645 0018 23F00203 		bic	r3, r3, #2
 1646 001c 9365     		str	r3, [r2, #88]
 630:Src/tim.c     ****   
 631:Src/tim.c     ****     /**TIM3 GPIO Configuration    
 632:Src/tim.c     ****     PB4     ------> TIM3_CH1
 633:Src/tim.c     ****     PB5     ------> TIM3_CH2 
 634:Src/tim.c     ****     */
 635:Src/tim.c     ****   
 636:Src/tim.c     **** 
ARM GAS  /tmp/ccjZrRT3.s 			page 41


 637:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspDeInit 1 */
 638:Src/tim.c     **** 
 639:Src/tim.c     ****   /* USER CODE END TIM3_MspDeInit 1 */
 640:Src/tim.c     ****   }
 641:Src/tim.c     ****   else if(tim_encoderHandle->Instance==TIM4)
 642:Src/tim.c     ****   {
 643:Src/tim.c     ****   /* USER CODE BEGIN TIM4_MspDeInit 0 */
 644:Src/tim.c     **** 
 645:Src/tim.c     ****   /* USER CODE END TIM4_MspDeInit 0 */
 646:Src/tim.c     ****     /* Peripheral clock disable */
 647:Src/tim.c     ****     __HAL_RCC_TIM4_CLK_DISABLE();
 648:Src/tim.c     ****   
 649:Src/tim.c     ****     /**TIM4 GPIO Configuration    
 650:Src/tim.c     ****     PB6     ------> TIM4_CH1
 651:Src/tim.c     ****     PB7     ------> TIM4_CH2 
 652:Src/tim.c     ****     */
 653:Src/tim.c     **** 
 654:Src/tim.c     **** 
 655:Src/tim.c     ****   /* USER CODE BEGIN TIM4_MspDeInit 1 */
 656:Src/tim.c     **** 
 657:Src/tim.c     ****   /* USER CODE END TIM4_MspDeInit 1 */
 658:Src/tim.c     ****   }
 659:Src/tim.c     **** }
 1647              		.loc 1 659 1
 1648 001e 0AE0     		b	.L87
 1649              	.L85:
 641:Src/tim.c     ****   {
 1650              		.loc 1 641 28
 1651 0020 7B68     		ldr	r3, [r7, #4]
 1652 0022 1B68     		ldr	r3, [r3]
 641:Src/tim.c     ****   {
 1653              		.loc 1 641 10
 1654 0024 094A     		ldr	r2, .L88+8
 1655 0026 9342     		cmp	r3, r2
 1656 0028 05D1     		bne	.L87
 647:Src/tim.c     ****   
 1657              		.loc 1 647 5
 1658 002a 074B     		ldr	r3, .L88+4
 1659 002c 9B6D     		ldr	r3, [r3, #88]
 1660 002e 064A     		ldr	r2, .L88+4
 1661 0030 23F00403 		bic	r3, r3, #4
 1662 0034 9365     		str	r3, [r2, #88]
 1663              	.L87:
 1664              		.loc 1 659 1
 1665 0036 00BF     		nop
 1666 0038 0C37     		adds	r7, r7, #12
 1667              	.LCFI74:
 1668              		.cfi_def_cfa_offset 4
 1669 003a BD46     		mov	sp, r7
 1670              	.LCFI75:
 1671              		.cfi_def_cfa_register 13
 1672              		@ sp needed
 1673 003c 5DF8047B 		ldr	r7, [sp], #4
 1674              	.LCFI76:
 1675              		.cfi_restore 7
 1676              		.cfi_def_cfa_offset 0
 1677 0040 7047     		bx	lr
ARM GAS  /tmp/ccjZrRT3.s 			page 42


 1678              	.L89:
 1679 0042 00BF     		.align	2
 1680              	.L88:
 1681 0044 00040040 		.word	1073742848
 1682 0048 00100240 		.word	1073876992
 1683 004c 00080040 		.word	1073743872
 1684              		.cfi_endproc
 1685              	.LFE2002:
 1687              		.section	.text.HAL_TIM_IC_MspDeInit,"ax",%progbits
 1688              		.align	1
 1689              		.global	HAL_TIM_IC_MspDeInit
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	HAL_TIM_IC_MspDeInit:
 1696              	.LFB2003:
 660:Src/tim.c     **** 
 661:Src/tim.c     **** void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* tim_icHandle)
 662:Src/tim.c     **** {
 1697              		.loc 1 662 1
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 8
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701              		@ link register save eliminated.
 1702 0000 80B4     		push	{r7}
 1703              	.LCFI77:
 1704              		.cfi_def_cfa_offset 4
 1705              		.cfi_offset 7, -4
 1706 0002 83B0     		sub	sp, sp, #12
 1707              	.LCFI78:
 1708              		.cfi_def_cfa_offset 16
 1709 0004 00AF     		add	r7, sp, #0
 1710              	.LCFI79:
 1711              		.cfi_def_cfa_register 7
 1712 0006 7860     		str	r0, [r7, #4]
 663:Src/tim.c     **** 
 664:Src/tim.c     **** 
 665:Src/tim.c     **** } 
 1713              		.loc 1 665 1
 1714 0008 00BF     		nop
 1715 000a 0C37     		adds	r7, r7, #12
 1716              	.LCFI80:
 1717              		.cfi_def_cfa_offset 4
 1718 000c BD46     		mov	sp, r7
 1719              	.LCFI81:
 1720              		.cfi_def_cfa_register 13
 1721              		@ sp needed
 1722 000e 5DF8047B 		ldr	r7, [sp], #4
 1723              	.LCFI82:
 1724              		.cfi_restore 7
 1725              		.cfi_def_cfa_offset 0
 1726 0012 7047     		bx	lr
 1727              		.cfi_endproc
 1728              	.LFE2003:
 1730              		.text
 1731              	.Letext0:
ARM GAS  /tmp/ccjZrRT3.s 			page 43


 1732              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1733              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1734              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1735              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1736              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 1737              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1738              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1739              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1740              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1741              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1742              		.file 12 "Inc/tim.h"
ARM GAS  /tmp/ccjZrRT3.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
     /tmp/ccjZrRT3.s:18     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccjZrRT3.s:21     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccjZrRT3.s:24     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccjZrRT3.s:27     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccjZrRT3.s:30     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccjZrRT3.s:33     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccjZrRT3.s:36     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccjZrRT3.s:39     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccjZrRT3.s:42     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccjZrRT3.s:45     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccjZrRT3.s:48     .rodata.USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccjZrRT3.s:51     .rodata.USART_PRESCALER_TAB:0000000000000000 USART_PRESCALER_TAB
     /tmp/ccjZrRT3.s:65     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccjZrRT3.s:68     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccjZrRT3.s:71     .text.OC4_PWM_Override:0000000000000000 $t
     /tmp/ccjZrRT3.s:79     .text.OC4_PWM_Override:0000000000000000 OC4_PWM_Override
     /tmp/ccjZrRT3.s:143    .bss.htim1:0000000000000000 htim1
     /tmp/ccjZrRT3.s:140    .bss.htim1:0000000000000000 $d
     /tmp/ccjZrRT3.s:150    .bss.htim2:0000000000000000 htim2
     /tmp/ccjZrRT3.s:147    .bss.htim2:0000000000000000 $d
     /tmp/ccjZrRT3.s:157    .bss.htim3:0000000000000000 htim3
     /tmp/ccjZrRT3.s:154    .bss.htim3:0000000000000000 $d
     /tmp/ccjZrRT3.s:164    .bss.htim4:0000000000000000 htim4
     /tmp/ccjZrRT3.s:161    .bss.htim4:0000000000000000 $d
     /tmp/ccjZrRT3.s:171    .bss.htim8:0000000000000000 htim8
     /tmp/ccjZrRT3.s:168    .bss.htim8:0000000000000000 $d
     /tmp/ccjZrRT3.s:178    .bss.htim15:0000000000000000 htim15
     /tmp/ccjZrRT3.s:175    .bss.htim15:0000000000000000 $d
     /tmp/ccjZrRT3.s:181    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:188    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccjZrRT3.s:1401   .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
     /tmp/ccjZrRT3.s:417    .text.MX_TIM1_Init:000000000000015c $d
     /tmp/ccjZrRT3.s:423    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:430    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccjZrRT3.s:555    .text.MX_TIM2_Init:00000000000000ac $d
     /tmp/ccjZrRT3.s:560    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:567    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccjZrRT3.s:674    .text.MX_TIM3_Init:0000000000000084 $d
     /tmp/ccjZrRT3.s:680    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:687    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccjZrRT3.s:794    .text.MX_TIM4_Init:0000000000000084 $d
     /tmp/ccjZrRT3.s:800    .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:807    .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/ccjZrRT3.s:993    .text.MX_TIM8_Init:0000000000000114 $d
     /tmp/ccjZrRT3.s:999    .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/ccjZrRT3.s:1006   .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/ccjZrRT3.s:1056   .text.MX_TIM15_Init:0000000000000038 $d
     /tmp/ccjZrRT3.s:1062   .text.HAL_TIM_Base_MspInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1069   .text.HAL_TIM_Base_MspInit:0000000000000000 HAL_TIM_Base_MspInit
     /tmp/ccjZrRT3.s:1154   .text.HAL_TIM_Base_MspInit:000000000000006c $d
     /tmp/ccjZrRT3.s:1161   .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1168   .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
     /tmp/ccjZrRT3.s:1252   .text.HAL_TIM_PWM_MspInit:000000000000006c $d
     /tmp/ccjZrRT3.s:1258   .text.HAL_TIM_Encoder_MspInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1265   .text.HAL_TIM_Encoder_MspInit:0000000000000000 HAL_TIM_Encoder_MspInit
ARM GAS  /tmp/ccjZrRT3.s 			page 45


     /tmp/ccjZrRT3.s:1344   .text.HAL_TIM_Encoder_MspInit:000000000000005c $d
     /tmp/ccjZrRT3.s:1351   .text.HAL_TIM_IC_MspInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1358   .text.HAL_TIM_IC_MspInit:0000000000000000 HAL_TIM_IC_MspInit
     /tmp/ccjZrRT3.s:1394   .text.HAL_TIM_MspPostInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1449   .text.HAL_TIM_MspPostInit:0000000000000028 $d
     /tmp/ccjZrRT3.s:1454   .text.HAL_TIM_Base_MspDeInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1461   .text.HAL_TIM_Base_MspDeInit:0000000000000000 HAL_TIM_Base_MspDeInit
     /tmp/ccjZrRT3.s:1525   .text.HAL_TIM_Base_MspDeInit:0000000000000044 $d
     /tmp/ccjZrRT3.s:1532   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1539   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 HAL_TIM_PWM_MspDeInit
     /tmp/ccjZrRT3.s:1603   .text.HAL_TIM_PWM_MspDeInit:0000000000000044 $d
     /tmp/ccjZrRT3.s:1609   .text.HAL_TIM_Encoder_MspDeInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1616   .text.HAL_TIM_Encoder_MspDeInit:0000000000000000 HAL_TIM_Encoder_MspDeInit
     /tmp/ccjZrRT3.s:1681   .text.HAL_TIM_Encoder_MspDeInit:0000000000000044 $d
     /tmp/ccjZrRT3.s:1688   .text.HAL_TIM_IC_MspDeInit:0000000000000000 $t
     /tmp/ccjZrRT3.s:1695   .text.HAL_TIM_IC_MspDeInit:0000000000000000 HAL_TIM_IC_MspDeInit

UNDEFINED SYMBOLS
HAL_TIM_OC_ConfigChannel
HAL_TIM_Base_Init
Error_Handler
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_Encoder_Init
HAL_NVIC_SetPriority
HAL_NVIC_DisableIRQ
