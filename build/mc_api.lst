ARM GAS  /tmp/ccrWx2YC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mc_api.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MC_StartMotor1,"ax",%progbits
  18              		.align	1
  19              		.weak	MC_StartMotor1
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	MC_StartMotor1:
  27              	.LFB1713:
  28              		.file 1 "Src/mc_api.c"
   1:Src/mc_api.c  **** 
   2:Src/mc_api.c  **** /**
   3:Src/mc_api.c  ****   ******************************************************************************
   4:Src/mc_api.c  ****   * @file    mc_api.c
   5:Src/mc_api.c  ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_api.c  ****   * @brief   This file implements the high level interface of the Motor Control SDK.
   7:Src/mc_api.c  ****   ******************************************************************************
   8:Src/mc_api.c  ****   * @attention
   9:Src/mc_api.c  ****   *
  10:Src/mc_api.c  ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  11:Src/mc_api.c  ****   * All rights reserved.</center></h2>
  12:Src/mc_api.c  ****   *
  13:Src/mc_api.c  ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/mc_api.c  ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/mc_api.c  ****   * the License. You may obtain a copy of the License at:
  16:Src/mc_api.c  ****   *                             www.st.com/SLA0044
  17:Src/mc_api.c  ****   *
  18:Src/mc_api.c  ****   ******************************************************************************
  19:Src/mc_api.c  ****   * @ingroup MCIAPI
  20:Src/mc_api.c  ****   */
  21:Src/mc_api.c  **** 
  22:Src/mc_api.c  **** #include "mc_interface.h"
  23:Src/mc_api.c  **** #include "mc_api.h"
  24:Src/mc_api.c  **** #include "mc_config.h"
  25:Src/mc_api.c  **** #include "mcp.h"
  26:Src/mc_api.c  **** 
  27:Src/mc_api.c  **** /** @addtogroup MCSDK
  28:Src/mc_api.c  ****   * @{
  29:Src/mc_api.c  ****   */
  30:Src/mc_api.c  **** 
ARM GAS  /tmp/ccrWx2YC.s 			page 2


  31:Src/mc_api.c  **** /**
  32:Src/mc_api.c  ****   * @defgroup CAI Application Programming Interface
  33:Src/mc_api.c  ****   * @brief Interface for Motor Control applications using the classic SDK
  34:Src/mc_api.c  ****   *
  35:Src/mc_api.c  ****   * @{
  36:Src/mc_api.c  ****   */
  37:Src/mc_api.c  **** 
  38:Src/mc_api.c  **** /** @defgroup MCIAPI Motor Control API
  39:Src/mc_api.c  ****   *
  40:Src/mc_api.c  ****   * @brief High level Programming Interface of the Motor Control SDK
  41:Src/mc_api.c  ****   *
  42:Src/mc_api.c  ****   *  This interface allows for performing basic operations on the motor(s) driven by an
  43:Src/mc_api.c  ****   * Motor Control SDK based application. With it, motors can be started and stopped, speed or
  44:Src/mc_api.c  ****   * torque ramps can be programmed and executed and information on the state of the motors can
  45:Src/mc_api.c  ****   * be retrieved, among others.
  46:Src/mc_api.c  ****   *
  47:Src/mc_api.c  ****   *  This interface consists in functions that target a specific motor, indicated in their name.
  48:Src/mc_api.c  ****   * These functions aims at being the main interface used by an Application to control motors.
  49:Src/mc_api.c  ****   *
  50:Src/mc_api.c  ****   *  The current Motor Control API can cope with up to 2 motors.
  51:Src/mc_api.c  ****   * @{
  52:Src/mc_api.c  ****   */
  53:Src/mc_api.c  **** 
  54:Src/mc_api.c  **** /**
  55:Src/mc_api.c  ****   * @brief  Initiates the start-up procedure for Motor 1
  56:Src/mc_api.c  ****   *
  57:Src/mc_api.c  ****   *  If the state machine of Motor 1 is in #IDLE state, the command is immediately
  58:Src/mc_api.c  ****   * executed. Otherwise the command is discarded. The Application can check the
  59:Src/mc_api.c  ****   * return value to know whether the command was executed or discarded.
  60:Src/mc_api.c  ****   *
  61:Src/mc_api.c  ****   *  One of the following commands must be executed before calling MC_StartMotor1()
  62:Src/mc_api.c  ****   * in order to set a torque or a speed reference:
  63:Src/mc_api.c  ****   *
  64:Src/mc_api.c  ****   * - MC_ProgramSpeedRampMotor1()
  65:Src/mc_api.c  ****   * - MC_ProgramTorqueRampMotor1()
  66:Src/mc_api.c  ****   * - MC_SetCurrentReferenceMotor1()
  67:Src/mc_api.c  ****   *
  68:Src/mc_api.c  ****   * Failing to do so results in an unpredictable behaviour.
  69:Src/mc_api.c  ****   *
  70:Src/mc_api.c  ****   * If the offsets of the current measurement circuitry offsets are not known yet,
  71:Src/mc_api.c  ****   * an offset calibration procedure is executed to measure them prior to acutally
  72:Src/mc_api.c  ****   * starting up the motor.
  73:Src/mc_api.c  ****   *
  74:Src/mc_api.c  ****   * @note The MCI_StartMotor1 command only triggers the execution of the start-up
  75:Src/mc_api.c  ****   * procedure (or eventually the offset calibration procedure) and returns
  76:Src/mc_api.c  ****   * immediately after. It is not blocking the execution of the application until
  77:Src/mc_api.c  ****   * the motor is indeed running in steady state. If the application needs to wait
  78:Src/mc_api.c  ****   * for the motor to be running in steady state, the application has to check the
  79:Src/mc_api.c  ****   * state machine of the motor and verify that the #RUN state has been reached.
  80:Src/mc_api.c  ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
  81:Src/mc_api.c  ****   *
  82:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
  83:Src/mc_api.c  ****   */
  84:Src/mc_api.c  **** __weak bool MC_StartMotor1(void)
  85:Src/mc_api.c  **** {
  29              		.loc 1 85 1 view -0
  30              		.cfi_startproc
ARM GAS  /tmp/ccrWx2YC.s 			page 3


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  86:Src/mc_api.c  ****   return (MCI_StartMotor(pMCI[M1]));
  38              		.loc 1 86 3 view .LVU1
  39              		.loc 1 86 11 is_stmt 0 view .LVU2
  40 0002 024B     		ldr	r3, .L3
  41 0004 1868     		ldr	r0, [r3]
  42 0006 FFF7FEFF 		bl	MCI_StartMotor
  43              	.LVL0:
  87:Src/mc_api.c  **** }
  44              		.loc 1 87 1 view .LVU3
  45 000a 08BD     		pop	{r3, pc}
  46              	.L4:
  47              		.align	2
  48              	.L3:
  49 000c 00000000 		.word	pMCI
  50              		.cfi_endproc
  51              	.LFE1713:
  53              		.section	.text.MC_StopMotor1,"ax",%progbits
  54              		.align	1
  55              		.weak	MC_StopMotor1
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	MC_StopMotor1:
  62              	.LFB1714:
  88:Src/mc_api.c  **** 
  89:Src/mc_api.c  **** /**
  90:Src/mc_api.c  ****   * @brief  Initiates the stop procedure for Motor 1.
  91:Src/mc_api.c  ****   *
  92:Src/mc_api.c  ****   *  If the state machine is in any state but the #ICLWAIT, #IDLE, FAULT_NOW and
  93:Src/mc_api.c  ****   * #FAULT_OVER states, the command is immediately executed. Otherwise, it is
  94:Src/mc_api.c  ****   * discarded. The Application can check the return value to know whether the
  95:Src/mc_api.c  ****   * command was executed or discarded.
  96:Src/mc_api.c  ****   *
  97:Src/mc_api.c  ****   * @note The MC_StopMotor1() command only triggers the stop motor procedure
  98:Src/mc_api.c  ****   * and then returns. It is not blocking the application until the motor is indeed
  99:Src/mc_api.c  ****   * stopped. To know if it has stopped, the application can query the motor's state
 100:Src/mc_api.c  ****   * machine and check if the #IDLE state has been reached.
 101:Src/mc_api.c  ****   *
 102:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
 103:Src/mc_api.c  ****   */
 104:Src/mc_api.c  **** __weak bool MC_StopMotor1(void)
 105:Src/mc_api.c  **** {
  63              		.loc 1 105 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67 0000 08B5     		push	{r3, lr}
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrWx2YC.s 			page 4


  70              		.cfi_offset 3, -8
  71              		.cfi_offset 14, -4
 106:Src/mc_api.c  ****   return (MCI_StopMotor(pMCI[M1]));
  72              		.loc 1 106 3 view .LVU5
  73              		.loc 1 106 11 is_stmt 0 view .LVU6
  74 0002 024B     		ldr	r3, .L7
  75 0004 1868     		ldr	r0, [r3]
  76 0006 FFF7FEFF 		bl	MCI_StopMotor
  77              	.LVL1:
 107:Src/mc_api.c  **** }
  78              		.loc 1 107 1 view .LVU7
  79 000a 08BD     		pop	{r3, pc}
  80              	.L8:
  81              		.align	2
  82              	.L7:
  83 000c 00000000 		.word	pMCI
  84              		.cfi_endproc
  85              	.LFE1714:
  87              		.section	.text.MC_ProgramSpeedRampMotor1,"ax",%progbits
  88              		.align	1
  89              		.weak	MC_ProgramSpeedRampMotor1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	MC_ProgramSpeedRampMotor1:
  96              	.LVL2:
  97              	.LFB1715:
 108:Src/mc_api.c  **** 
 109:Src/mc_api.c  **** /**
 110:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 111:Src/mc_api.c  ****   *
 112:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p hFinalSpeed
 113:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 114:Src/mc_api.c  ****   *
 115:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 116:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 117:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 118:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 119:Src/mc_api.c  ****   *
 120:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 121:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 122:Src/mc_api.c  ****   *
 123:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 124:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 125:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 126:Src/mc_api.c  ****   *
 127:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 128:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 129:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 130:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 131:Src/mc_api.c  ****   * reach 0 rpm.
 132:Src/mc_api.c  ****   *
 133:Src/mc_api.c  ****   * @param  hFinalSpeed Mechanical rotor speed reference at the end of the ramp.
 134:Src/mc_api.c  ****   *                     Expressed in the unit defined by #SPEED_UNIT.
 135:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 136:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
ARM GAS  /tmp/ccrWx2YC.s 			page 5


 137:Src/mc_api.c  ****   *         value.
 138:Src/mc_api.c  ****   */
 139:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
 140:Src/mc_api.c  **** {
  98              		.loc 1 140 1 is_stmt 1 view -0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		.loc 1 140 1 is_stmt 0 view .LVU9
 103 0000 08B5     		push	{r3, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 3, -8
 107              		.cfi_offset 14, -4
 108 0002 0A46     		mov	r2, r1
 141:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 109              		.loc 1 141 3 is_stmt 1 view .LVU10
 110 0004 0146     		mov	r1, r0
 111              	.LVL3:
 112              		.loc 1 141 3 is_stmt 0 view .LVU11
 113 0006 024B     		ldr	r3, .L11
 114 0008 1868     		ldr	r0, [r3]
 115              	.LVL4:
 116              		.loc 1 141 3 view .LVU12
 117 000a FFF7FEFF 		bl	MCI_ExecSpeedRamp
 118              	.LVL5:
 142:Src/mc_api.c  **** }
 119              		.loc 1 142 1 view .LVU13
 120 000e 08BD     		pop	{r3, pc}
 121              	.L12:
 122              		.align	2
 123              	.L11:
 124 0010 00000000 		.word	pMCI
 125              		.cfi_endproc
 126              	.LFE1715:
 128              		.section	.text.MC_ProgramSpeedRampMotor1_F,"ax",%progbits
 129              		.align	1
 130              		.weak	MC_ProgramSpeedRampMotor1_F
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	MC_ProgramSpeedRampMotor1_F:
 137              	.LVL6:
 138              	.LFB1716:
 143:Src/mc_api.c  **** 
 144:Src/mc_api.c  **** /**
 145:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 146:Src/mc_api.c  ****   *
 147:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p FinalSpeed
 148:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 149:Src/mc_api.c  ****   *
 150:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 151:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 152:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 153:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 154:Src/mc_api.c  ****   *
ARM GAS  /tmp/ccrWx2YC.s 			page 6


 155:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 156:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 157:Src/mc_api.c  ****   *
 158:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 159:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 160:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 161:Src/mc_api.c  ****   *
 162:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 163:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 164:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 165:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 166:Src/mc_api.c  ****   * reach 0 rpm.
 167:Src/mc_api.c  ****   *
 168:Src/mc_api.c  ****   * @param  FinalSpeed Mechanical rotor speed reference at the end of the ramp.
 169:Src/mc_api.c  ****   *         Expressed in rpm.
 170:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 171:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
 172:Src/mc_api.c  ****   *         value.
 173:Src/mc_api.c  ****   */
 174:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
 175:Src/mc_api.c  **** {
 139              		.loc 1 175 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		.loc 1 175 1 is_stmt 0 view .LVU15
 144 0000 08B5     		push	{r3, lr}
 145              	.LCFI3:
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 3, -8
 148              		.cfi_offset 14, -4
 149 0002 0146     		mov	r1, r0
 176:Src/mc_api.c  ****   MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 150              		.loc 1 176 3 is_stmt 1 view .LVU16
 151 0004 024B     		ldr	r3, .L15
 152 0006 1868     		ldr	r0, [r3]
 153              	.LVL7:
 154              		.loc 1 176 3 is_stmt 0 view .LVU17
 155 0008 FFF7FEFF 		bl	MCI_ExecSpeedRamp_F
 156              	.LVL8:
 177:Src/mc_api.c  **** }
 157              		.loc 1 177 1 view .LVU18
 158 000c 08BD     		pop	{r3, pc}
 159              	.L16:
 160 000e 00BF     		.align	2
 161              	.L15:
 162 0010 00000000 		.word	pMCI
 163              		.cfi_endproc
 164              	.LFE1716:
 166              		.section	.text.MC_ProgramTorqueRampMotor1,"ax",%progbits
 167              		.align	1
 168              		.weak	MC_ProgramTorqueRampMotor1
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	MC_ProgramTorqueRampMotor1:
ARM GAS  /tmp/ccrWx2YC.s 			page 7


 175              	.LVL9:
 176              	.LFB1717:
 178:Src/mc_api.c  **** 
 179:Src/mc_api.c  **** /**
 180:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 181:Src/mc_api.c  ****   *
 182:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p hFinalTorque
 183:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 184:Src/mc_api.c  ****   *
 185:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 186:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 187:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 188:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 189:Src/mc_api.c  ****   *
 190:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 191:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 192:Src/mc_api.c  ****   *
 193:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 194:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 195:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 196:Src/mc_api.c  ****   *
 197:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 198:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalTorque parameter
 199:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 200:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 201:Src/mc_api.c  ****   * reach 0 rpm.
 202:Src/mc_api.c  ****   *
 203:Src/mc_api.c  ****   * @param  hFinalTorque Mechanical motor torque reference at the end of the ramp.
 204:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in digit.
 205:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 206:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 207:Src/mc_api.c  ****   *         value.
 208:Src/mc_api.c  ****   */
 209:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1(int16_t hFinalTorque, uint16_t hDurationms)
 210:Src/mc_api.c  **** {
 177              		.loc 1 210 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		.loc 1 210 1 is_stmt 0 view .LVU20
 182 0000 08B5     		push	{r3, lr}
 183              	.LCFI4:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 3, -8
 186              		.cfi_offset 14, -4
 187 0002 0A46     		mov	r2, r1
 211:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 188              		.loc 1 211 3 is_stmt 1 view .LVU21
 189 0004 0146     		mov	r1, r0
 190              	.LVL10:
 191              		.loc 1 211 3 is_stmt 0 view .LVU22
 192 0006 024B     		ldr	r3, .L19
 193 0008 1868     		ldr	r0, [r3]
 194              	.LVL11:
 195              		.loc 1 211 3 view .LVU23
 196 000a FFF7FEFF 		bl	MCI_ExecTorqueRamp
 197              	.LVL12:
ARM GAS  /tmp/ccrWx2YC.s 			page 8


 212:Src/mc_api.c  **** }
 198              		.loc 1 212 1 view .LVU24
 199 000e 08BD     		pop	{r3, pc}
 200              	.L20:
 201              		.align	2
 202              	.L19:
 203 0010 00000000 		.word	pMCI
 204              		.cfi_endproc
 205              	.LFE1717:
 207              		.section	.text.MC_ProgramTorqueRampMotor1_F,"ax",%progbits
 208              		.align	1
 209              		.weak	MC_ProgramTorqueRampMotor1_F
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv4-sp-d16
 215              	MC_ProgramTorqueRampMotor1_F:
 216              	.LVL13:
 217              	.LFB1718:
 213:Src/mc_api.c  **** 
 214:Src/mc_api.c  **** /**
 215:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 216:Src/mc_api.c  ****   *
 217:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p FinalTorque
 218:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 219:Src/mc_api.c  ****   *
 220:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 221:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 222:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 223:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 224:Src/mc_api.c  ****   *
 225:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 226:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 227:Src/mc_api.c  ****   *
 228:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 229:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 230:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 231:Src/mc_api.c  ****   *
 232:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 233:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the FinalTorque parameter
 234:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 235:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 236:Src/mc_api.c  ****   * reach 0 rpm.
 237:Src/mc_api.c  ****   *
 238:Src/mc_api.c  ****   * @param  FinalTorque Mechanical motor torque reference at the end of the ramp.
 239:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in Ampere.
 240:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 241:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 242:Src/mc_api.c  ****   *         value.
 243:Src/mc_api.c  ****   */
 244:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1_F(float_t FinalTorque, uint16_t hDurationms)
 245:Src/mc_api.c  **** {
 218              		.loc 1 245 1 is_stmt 1 view -0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		.loc 1 245 1 is_stmt 0 view .LVU26
ARM GAS  /tmp/ccrWx2YC.s 			page 9


 223 0000 08B5     		push	{r3, lr}
 224              	.LCFI5:
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 3, -8
 227              		.cfi_offset 14, -4
 228 0002 0146     		mov	r1, r0
 246:Src/mc_api.c  ****   MCI_ExecTorqueRamp_F(pMCI[M1], FinalTorque, hDurationms);
 229              		.loc 1 246 3 is_stmt 1 view .LVU27
 230 0004 024B     		ldr	r3, .L23
 231 0006 1868     		ldr	r0, [r3]
 232              	.LVL14:
 233              		.loc 1 246 3 is_stmt 0 view .LVU28
 234 0008 FFF7FEFF 		bl	MCI_ExecTorqueRamp_F
 235              	.LVL15:
 247:Src/mc_api.c  **** }
 236              		.loc 1 247 1 view .LVU29
 237 000c 08BD     		pop	{r3, pc}
 238              	.L24:
 239 000e 00BF     		.align	2
 240              	.L23:
 241 0010 00000000 		.word	pMCI
 242              		.cfi_endproc
 243              	.LFE1718:
 245              		.section	.text.MC_SetCurrentReferenceMotor1,"ax",%progbits
 246              		.align	1
 247              		.weak	MC_SetCurrentReferenceMotor1
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	MC_SetCurrentReferenceMotor1:
 254              	.LFB1719:
 248:Src/mc_api.c  **** 
 249:Src/mc_api.c  **** /**
 250:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 251:Src/mc_api.c  ****   *
 252:Src/mc_api.c  ****   *  The current reference to consider is made of the $I_d$ and $I_q$ current components.
 253:Src/mc_api.c  ****   *
 254:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1() function programs a current reference
 255:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 256:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the command is buffered
 257:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 258:Src/mc_api.c  ****   *
 259:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 260:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 261:Src/mc_api.c  ****   *
 262:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 263:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 264:Src/mc_api.c  ****   *
 265:Src/mc_api.c  ****   * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
 266:Src/mc_api.c  ****   *         in the qd_t format.
 267:Src/mc_api.c  ****   */
 268:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1(qd_t Iqdref)
 269:Src/mc_api.c  **** {
 255              		.loc 1 269 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccrWx2YC.s 			page 10


 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259 0000 00B5     		push	{lr}
 260              	.LCFI6:
 261              		.cfi_def_cfa_offset 4
 262              		.cfi_offset 14, -4
 263 0002 83B0     		sub	sp, sp, #12
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 16
 266 0004 0190     		str	r0, [sp, #4]
 270:Src/mc_api.c  ****   MCI_SetCurrentReferences(pMCI[M1], Iqdref);
 267              		.loc 1 270 3 view .LVU31
 268 0006 0146     		mov	r1, r0
 269 0008 034B     		ldr	r3, .L27
 270 000a 1868     		ldr	r0, [r3]
 271 000c FFF7FEFF 		bl	MCI_SetCurrentReferences
 272              	.LVL16:
 271:Src/mc_api.c  **** }
 273              		.loc 1 271 1 is_stmt 0 view .LVU32
 274 0010 03B0     		add	sp, sp, #12
 275              	.LCFI8:
 276              		.cfi_def_cfa_offset 4
 277              		@ sp needed
 278 0012 5DF804FB 		ldr	pc, [sp], #4
 279              	.L28:
 280 0016 00BF     		.align	2
 281              	.L27:
 282 0018 00000000 		.word	pMCI
 283              		.cfi_endproc
 284              	.LFE1719:
 286              		.section	.text.MC_SetCurrentReferenceMotor1_F,"ax",%progbits
 287              		.align	1
 288              		.weak	MC_SetCurrentReferenceMotor1_F
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	MC_SetCurrentReferenceMotor1_F:
 295              	.LFB1720:
 272:Src/mc_api.c  **** 
 273:Src/mc_api.c  **** /**
 274:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 275:Src/mc_api.c  ****   *
 276:Src/mc_api.c  ****   *  The current reference to consider is made of the $I_d$ and $I_q$ current components.
 277:Src/mc_api.c  ****   *
 278:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1_F() function programs a current reference
 279:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 280:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the command is buffered
 281:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 282:Src/mc_api.c  ****   *
 283:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 284:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 285:Src/mc_api.c  ****   *
 286:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 287:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 288:Src/mc_api.c  ****   *
 289:Src/mc_api.c  ****   * @param  IqdRef current reference in the Direct-Quadratic reference frame. Expressed
 290:Src/mc_api.c  ****   *         in the qd_f_t format.
ARM GAS  /tmp/ccrWx2YC.s 			page 11


 291:Src/mc_api.c  ****   */
 292:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1_F(qd_f_t IqdRef)
 293:Src/mc_api.c  **** {
 296              		.loc 1 293 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 8
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300 0000 00B5     		push	{lr}
 301              	.LCFI9:
 302              		.cfi_def_cfa_offset 4
 303              		.cfi_offset 14, -4
 304 0002 83B0     		sub	sp, sp, #12
 305              	.LCFI10:
 306              		.cfi_def_cfa_offset 16
 294:Src/mc_api.c  ****   MCI_SetCurrentReferences_F(pMCI[M1], IqdRef);
 307              		.loc 1 294 3 view .LVU34
 308 0004 034B     		ldr	r3, .L31
 309 0006 1868     		ldr	r0, [r3]
 310 0008 FFF7FEFF 		bl	MCI_SetCurrentReferences_F
 311              	.LVL17:
 295:Src/mc_api.c  **** }
 312              		.loc 1 295 1 is_stmt 0 view .LVU35
 313 000c 03B0     		add	sp, sp, #12
 314              	.LCFI11:
 315              		.cfi_def_cfa_offset 4
 316              		@ sp needed
 317 000e 5DF804FB 		ldr	pc, [sp], #4
 318              	.L32:
 319 0012 00BF     		.align	2
 320              	.L31:
 321 0014 00000000 		.word	pMCI
 322              		.cfi_endproc
 323              	.LFE1720:
 325              		.section	.text.MC_GetCommandStateMotor1,"ax",%progbits
 326              		.align	1
 327              		.weak	MC_GetCommandStateMotor1
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	MC_GetCommandStateMotor1:
 334              	.LFB1721:
 296:Src/mc_api.c  **** 
 297:Src/mc_api.c  **** /**
 298:Src/mc_api.c  ****   * @brief  Returns the status of the last buffered command for Motor 1.
 299:Src/mc_api.c  ****   *
 300:Src/mc_api.c  ****   * The status can be one of the following values:
 301:Src/mc_api.c  ****   * - #MCI_BUFFER_EMPTY: no buffered command is currently programmed.
 302:Src/mc_api.c  ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED: A command has been buffered but the conditions for its
 303:Src/mc_api.c  ****   *   execution have not occurred yet. The command is still in the buffer, pending execution.
 304:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_SUCCESSFULLY: the last buffered command has been executed successfully.
 305:Src/mc_api.c  ****   *   In this case calling this function resets the command state to #MCI_BUFFER_EMPTY.
 306:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESSFULLY: the buffered command has been executed unsuccessfully.
 307:Src/mc_api.c  ****   *   In this case calling this function resets the command state to #MCI_BUFFER_EMPTY.
 308:Src/mc_api.c  ****   */
 309:Src/mc_api.c  **** __weak MCI_CommandState_t  MC_GetCommandStateMotor1(void)
 310:Src/mc_api.c  **** {
ARM GAS  /tmp/ccrWx2YC.s 			page 12


 335              		.loc 1 310 1 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 08B5     		push	{r3, lr}
 340              	.LCFI12:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 311:Src/mc_api.c  ****   return (MCI_IsCommandAcknowledged(pMCI[M1]));
 344              		.loc 1 311 3 view .LVU37
 345              		.loc 1 311 11 is_stmt 0 view .LVU38
 346 0002 024B     		ldr	r3, .L35
 347 0004 1868     		ldr	r0, [r3]
 348 0006 FFF7FEFF 		bl	MCI_IsCommandAcknowledged
 349              	.LVL18:
 312:Src/mc_api.c  **** }
 350              		.loc 1 312 1 view .LVU39
 351 000a 08BD     		pop	{r3, pc}
 352              	.L36:
 353              		.align	2
 354              	.L35:
 355 000c 00000000 		.word	pMCI
 356              		.cfi_endproc
 357              	.LFE1721:
 359              		.section	.text.MC_StopSpeedRampMotor1,"ax",%progbits
 360              		.align	1
 361              		.weak	MC_StopSpeedRampMotor1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu fpv4-sp-d16
 367              	MC_StopSpeedRampMotor1:
 368              	.LFB1722:
 313:Src/mc_api.c  **** 
 314:Src/mc_api.c  **** /**
 315:Src/mc_api.c  ****  * @brief Stops the execution of the on-going speed ramp for Motor 1, if any.
 316:Src/mc_api.c  ****  *
 317:Src/mc_api.c  ****  *  If a speed ramp is currently being executed, it is immediately stopped, the rotation
 318:Src/mc_api.c  ****  * speed of Motor 1 is maintained to its current value and true is returned. If no speed
 319:Src/mc_api.c  ****  * ramp is on-going, nothing is done and false is returned.
 320:Src/mc_api.c  ****  *
 321:Src/mc_api.c  ****  * @deprecated This function is deprecated and should not be used anymore. It will be
 322:Src/mc_api.c  ****  *             removed in a future version of the MCSDK. Use MC_StopRampMotor1() instead.
 323:Src/mc_api.c  ****  */
 324:Src/mc_api.c  **** __weak bool MC_StopSpeedRampMotor1(void)
 325:Src/mc_api.c  **** {
 369              		.loc 1 325 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0000 08B5     		push	{r3, lr}
 374              	.LCFI13:
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 3, -8
 377              		.cfi_offset 14, -4
 326:Src/mc_api.c  ****   return (MCI_StopSpeedRamp(pMCI[M1]));
ARM GAS  /tmp/ccrWx2YC.s 			page 13


 378              		.loc 1 326 3 view .LVU41
 379              		.loc 1 326 11 is_stmt 0 view .LVU42
 380 0002 024B     		ldr	r3, .L39
 381 0004 1868     		ldr	r0, [r3]
 382 0006 FFF7FEFF 		bl	MCI_StopSpeedRamp
 383              	.LVL19:
 327:Src/mc_api.c  **** }
 384              		.loc 1 327 1 view .LVU43
 385 000a 08BD     		pop	{r3, pc}
 386              	.L40:
 387              		.align	2
 388              	.L39:
 389 000c 00000000 		.word	pMCI
 390              		.cfi_endproc
 391              	.LFE1722:
 393              		.section	.text.MC_StopRampMotor1,"ax",%progbits
 394              		.align	1
 395              		.weak	MC_StopRampMotor1
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv4-sp-d16
 401              	MC_StopRampMotor1:
 402              	.LFB1723:
 328:Src/mc_api.c  **** 
 329:Src/mc_api.c  **** /**
 330:Src/mc_api.c  ****  * @brief Stops the execution of the on-going ramp for Motor 1, if any.
 331:Src/mc_api.c  ****  *
 332:Src/mc_api.c  ****  *  If a ramp is currently being executed, it is immediately stopped, the torque or the speed
 333:Src/mc_api.c  ****  *  of Motor 1 is maintained to its current value.
 334:Src/mc_api.c  ****  */
 335:Src/mc_api.c  **** __weak void MC_StopRampMotor1(void)
 336:Src/mc_api.c  **** {
 403              		.loc 1 336 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407 0000 08B5     		push	{r3, lr}
 408              	.LCFI14:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 3, -8
 411              		.cfi_offset 14, -4
 337:Src/mc_api.c  ****   MCI_StopRamp(pMCI[M1]);
 412              		.loc 1 337 3 view .LVU45
 413 0002 024B     		ldr	r3, .L43
 414 0004 1868     		ldr	r0, [r3]
 415 0006 FFF7FEFF 		bl	MCI_StopRamp
 416              	.LVL20:
 338:Src/mc_api.c  **** }
 417              		.loc 1 338 1 is_stmt 0 view .LVU46
 418 000a 08BD     		pop	{r3, pc}
 419              	.L44:
 420              		.align	2
 421              	.L43:
 422 000c 00000000 		.word	pMCI
 423              		.cfi_endproc
 424              	.LFE1723:
ARM GAS  /tmp/ccrWx2YC.s 			page 14


 426              		.section	.text.MC_HasRampCompletedMotor1,"ax",%progbits
 427              		.align	1
 428              		.weak	MC_HasRampCompletedMotor1
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	MC_HasRampCompletedMotor1:
 435              	.LFB1724:
 339:Src/mc_api.c  **** 
 340:Src/mc_api.c  **** /**
 341:Src/mc_api.c  ****  * @brief Returns true if the last ramp submited for Motor 1 has completed, false otherwise
 342:Src/mc_api.c  ****  */
 343:Src/mc_api.c  **** __weak bool MC_HasRampCompletedMotor1(void)
 344:Src/mc_api.c  **** {
 436              		.loc 1 344 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 08B5     		push	{r3, lr}
 441              	.LCFI15:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 3, -8
 444              		.cfi_offset 14, -4
 345:Src/mc_api.c  ****   return (MCI_RampCompleted(pMCI[M1]));
 445              		.loc 1 345 3 view .LVU48
 446              		.loc 1 345 11 is_stmt 0 view .LVU49
 447 0002 024B     		ldr	r3, .L47
 448 0004 1868     		ldr	r0, [r3]
 449 0006 FFF7FEFF 		bl	MCI_RampCompleted
 450              	.LVL21:
 346:Src/mc_api.c  **** }
 451              		.loc 1 346 1 view .LVU50
 452 000a 08BD     		pop	{r3, pc}
 453              	.L48:
 454              		.align	2
 455              	.L47:
 456 000c 00000000 		.word	pMCI
 457              		.cfi_endproc
 458              	.LFE1724:
 460              		.section	.text.MC_GetMecSpeedReferenceMotor1,"ax",%progbits
 461              		.align	1
 462              		.weak	MC_GetMecSpeedReferenceMotor1
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	MC_GetMecSpeedReferenceMotor1:
 469              	.LFB1725:
 347:Src/mc_api.c  **** 
 348:Src/mc_api.c  **** /**
 349:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in the u
 350:Src/mc_api.c  ****  */
 351:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedReferenceMotor1(void)
 352:Src/mc_api.c  **** {
 470              		.loc 1 352 1 is_stmt 1 view -0
 471              		.cfi_startproc
ARM GAS  /tmp/ccrWx2YC.s 			page 15


 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI16:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 353:Src/mc_api.c  ****   return (MCI_GetMecSpeedRefUnit(pMCI[M1]));
 479              		.loc 1 353 3 view .LVU52
 480              		.loc 1 353 11 is_stmt 0 view .LVU53
 481 0002 024B     		ldr	r3, .L51
 482 0004 1868     		ldr	r0, [r3]
 483 0006 FFF7FEFF 		bl	MCI_GetMecSpeedRefUnit
 484              	.LVL22:
 354:Src/mc_api.c  **** }
 485              		.loc 1 354 1 view .LVU54
 486 000a 08BD     		pop	{r3, pc}
 487              	.L52:
 488              		.align	2
 489              	.L51:
 490 000c 00000000 		.word	pMCI
 491              		.cfi_endproc
 492              	.LFE1725:
 494              		.section	.text.MC_GetMecSpeedReferenceMotor1_F,"ax",%progbits
 495              		.align	1
 496              		.weak	MC_GetMecSpeedReferenceMotor1_F
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 500              		.fpu fpv4-sp-d16
 502              	MC_GetMecSpeedReferenceMotor1_F:
 503              	.LFB1726:
 355:Src/mc_api.c  **** 
 356:Src/mc_api.c  **** /**
 357:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 358:Src/mc_api.c  ****  */
 359:Src/mc_api.c  **** __weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
 360:Src/mc_api.c  **** {
 504              		.loc 1 360 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508 0000 08B5     		push	{r3, lr}
 509              	.LCFI17:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 3, -8
 512              		.cfi_offset 14, -4
 361:Src/mc_api.c  ****   return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 513              		.loc 1 361 3 view .LVU56
 514              		.loc 1 361 11 is_stmt 0 view .LVU57
 515 0002 024B     		ldr	r3, .L55
 516 0004 1868     		ldr	r0, [r3]
 517 0006 FFF7FEFF 		bl	MCI_GetMecSpeedRef_F
 518              	.LVL23:
 362:Src/mc_api.c  **** }
 519              		.loc 1 362 1 view .LVU58
 520 000a 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccrWx2YC.s 			page 16


 521              	.L56:
 522              		.align	2
 523              	.L55:
 524 000c 00000000 		.word	pMCI
 525              		.cfi_endproc
 526              	.LFE1726:
 528              		.section	.text.MC_GetMecSpeedAverageMotor1,"ax",%progbits
 529              		.align	1
 530              		.weak	MC_GetMecSpeedAverageMotor1
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv4-sp-d16
 536              	MC_GetMecSpeedAverageMotor1:
 537              	.LFB1727:
 363:Src/mc_api.c  **** 
 364:Src/mc_api.c  **** /**
 365:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the un
 366:Src/mc_api.c  ****  */
 367:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedAverageMotor1(void)
 368:Src/mc_api.c  **** {
 538              		.loc 1 368 1 is_stmt 1 view -0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542 0000 08B5     		push	{r3, lr}
 543              	.LCFI18:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 3, -8
 546              		.cfi_offset 14, -4
 369:Src/mc_api.c  ****   return (MCI_GetAvrgMecSpeedUnit(pMCI[M1]));
 547              		.loc 1 369 3 view .LVU60
 548              		.loc 1 369 11 is_stmt 0 view .LVU61
 549 0002 024B     		ldr	r3, .L59
 550 0004 1868     		ldr	r0, [r3]
 551 0006 FFF7FEFF 		bl	MCI_GetAvrgMecSpeedUnit
 552              	.LVL24:
 370:Src/mc_api.c  **** }
 553              		.loc 1 370 1 view .LVU62
 554 000a 08BD     		pop	{r3, pc}
 555              	.L60:
 556              		.align	2
 557              	.L59:
 558 000c 00000000 		.word	pMCI
 559              		.cfi_endproc
 560              	.LFE1727:
 562              		.section	.text.MC_GetAverageMecSpeedMotor1_F,"ax",%progbits
 563              		.align	1
 564              		.weak	MC_GetAverageMecSpeedMotor1_F
 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 568              		.fpu fpv4-sp-d16
 570              	MC_GetAverageMecSpeedMotor1_F:
 571              	.LFB1728:
 371:Src/mc_api.c  **** 
 372:Src/mc_api.c  **** /**
ARM GAS  /tmp/ccrWx2YC.s 			page 17


 373:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 374:Src/mc_api.c  ****  */
 375:Src/mc_api.c  **** __weak float_t MC_GetAverageMecSpeedMotor1_F(void)
 376:Src/mc_api.c  **** {
 572              		.loc 1 376 1 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 08B5     		push	{r3, lr}
 577              	.LCFI19:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 3, -8
 580              		.cfi_offset 14, -4
 377:Src/mc_api.c  ****   return (MCI_GetAvrgMecSpeed_F(pMCI[M1]));
 581              		.loc 1 377 3 view .LVU64
 582              		.loc 1 377 11 is_stmt 0 view .LVU65
 583 0002 024B     		ldr	r3, .L63
 584 0004 1868     		ldr	r0, [r3]
 585 0006 FFF7FEFF 		bl	MCI_GetAvrgMecSpeed_F
 586              	.LVL25:
 378:Src/mc_api.c  **** }
 587              		.loc 1 378 1 view .LVU66
 588 000a 08BD     		pop	{r3, pc}
 589              	.L64:
 590              		.align	2
 591              	.L63:
 592 000c 00000000 		.word	pMCI
 593              		.cfi_endproc
 594              	.LFE1728:
 596              		.section	.text.MC_GetLastRampFinalSpeedMotor1,"ax",%progbits
 597              		.align	1
 598              		.weak	MC_GetLastRampFinalSpeedMotor1
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	MC_GetLastRampFinalSpeedMotor1:
 605              	.LFB1729:
 379:Src/mc_api.c  **** 
 380:Src/mc_api.c  **** /**
 381:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 382:Src/mc_api.c  ****  */
 383:Src/mc_api.c  **** __weak int16_t MC_GetLastRampFinalSpeedMotor1(void)
 384:Src/mc_api.c  **** {
 606              		.loc 1 384 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610 0000 08B5     		push	{r3, lr}
 611              	.LCFI20:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 3, -8
 614              		.cfi_offset 14, -4
 385:Src/mc_api.c  ****   return (MCI_GetLastRampFinalSpeed(pMCI[M1]));
 615              		.loc 1 385 3 view .LVU68
 616              		.loc 1 385 11 is_stmt 0 view .LVU69
 617 0002 024B     		ldr	r3, .L67
ARM GAS  /tmp/ccrWx2YC.s 			page 18


 618 0004 1868     		ldr	r0, [r3]
 619 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalSpeed
 620              	.LVL26:
 386:Src/mc_api.c  **** }
 621              		.loc 1 386 1 view .LVU70
 622 000a 08BD     		pop	{r3, pc}
 623              	.L68:
 624              		.align	2
 625              	.L67:
 626 000c 00000000 		.word	pMCI
 627              		.cfi_endproc
 628              	.LFE1729:
 630              		.section	.text.MC_GetLastRampFinalSpeedM1_F,"ax",%progbits
 631              		.align	1
 632              		.weak	MC_GetLastRampFinalSpeedM1_F
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu fpv4-sp-d16
 638              	MC_GetLastRampFinalSpeedM1_F:
 639              	.LFB1730:
 387:Src/mc_api.c  **** 
 388:Src/mc_api.c  **** /**
 389:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 390:Src/mc_api.c  ****  */
 391:Src/mc_api.c  **** __weak float_t MC_GetLastRampFinalSpeedM1_F(void)
 392:Src/mc_api.c  **** {
 640              		.loc 1 392 1 is_stmt 1 view -0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
 644 0000 08B5     		push	{r3, lr}
 645              	.LCFI21:
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 3, -8
 648              		.cfi_offset 14, -4
 393:Src/mc_api.c  ****   return (MCI_GetLastRampFinalSpeed_F(pMCI[M1]));
 649              		.loc 1 393 3 view .LVU72
 650              		.loc 1 393 11 is_stmt 0 view .LVU73
 651 0002 024B     		ldr	r3, .L71
 652 0004 1868     		ldr	r0, [r3]
 653 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalSpeed_F
 654              	.LVL27:
 394:Src/mc_api.c  **** }
 655              		.loc 1 394 1 view .LVU74
 656 000a 08BD     		pop	{r3, pc}
 657              	.L72:
 658              		.align	2
 659              	.L71:
 660 000c 00000000 		.word	pMCI
 661              		.cfi_endproc
 662              	.LFE1730:
 664              		.section	.text.MC_GetFinalTorqueReferenceMotor1_F,"ax",%progbits
 665              		.align	1
 666              		.weak	MC_GetFinalTorqueReferenceMotor1_F
 667              		.syntax unified
 668              		.thumb
ARM GAS  /tmp/ccrWx2YC.s 			page 19


 669              		.thumb_func
 670              		.fpu fpv4-sp-d16
 672              	MC_GetFinalTorqueReferenceMotor1_F:
 673              	.LFB1731:
 395:Src/mc_api.c  **** /**
 396:Src/mc_api.c  ****  * @brief Returns the final torque reference for Motor 1, expressed in Ampere.
 397:Src/mc_api.c  ****  */
 398:Src/mc_api.c  **** __weak float_t MC_GetFinalTorqueReferenceMotor1_F(void)
 399:Src/mc_api.c  **** {
 674              		.loc 1 399 1 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678 0000 08B5     		push	{r3, lr}
 679              	.LCFI22:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 3, -8
 682              		.cfi_offset 14, -4
 400:Src/mc_api.c  ****   return (MCI_GetLastRampFinalTorque_F(pMCI[M1]));
 683              		.loc 1 400 3 view .LVU76
 684              		.loc 1 400 11 is_stmt 0 view .LVU77
 685 0002 024B     		ldr	r3, .L75
 686 0004 1868     		ldr	r0, [r3]
 687 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalTorque_F
 688              	.LVL28:
 401:Src/mc_api.c  **** }
 689              		.loc 1 401 1 view .LVU78
 690 000a 08BD     		pop	{r3, pc}
 691              	.L76:
 692              		.align	2
 693              	.L75:
 694 000c 00000000 		.word	pMCI
 695              		.cfi_endproc
 696              	.LFE1731:
 698              		.section	.text.MC_GetFinalTorqueReferenceMotor1,"ax",%progbits
 699              		.align	1
 700              		.weak	MC_GetFinalTorqueReferenceMotor1
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	MC_GetFinalTorqueReferenceMotor1:
 707              	.LFB1732:
 402:Src/mc_api.c  **** 
 403:Src/mc_api.c  **** /**
 404:Src/mc_api.c  ****  * @brief Returns the final torque reference for Motor 1, expressed in digit.
 405:Src/mc_api.c  ****  */
 406:Src/mc_api.c  **** __weak int16_t MC_GetFinalTorqueReferenceMotor1(void)
 407:Src/mc_api.c  **** {
 708              		.loc 1 407 1 is_stmt 1 view -0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712 0000 08B5     		push	{r3, lr}
 713              	.LCFI23:
 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 3, -8
ARM GAS  /tmp/ccrWx2YC.s 			page 20


 716              		.cfi_offset 14, -4
 408:Src/mc_api.c  ****   return (MCI_GetLastRampFinalTorque(pMCI[M1]));
 717              		.loc 1 408 3 view .LVU80
 718              		.loc 1 408 11 is_stmt 0 view .LVU81
 719 0002 024B     		ldr	r3, .L79
 720 0004 1868     		ldr	r0, [r3]
 721 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalTorque
 722              	.LVL29:
 409:Src/mc_api.c  **** }
 723              		.loc 1 409 1 view .LVU82
 724 000a 08BD     		pop	{r3, pc}
 725              	.L80:
 726              		.align	2
 727              	.L79:
 728 000c 00000000 		.word	pMCI
 729              		.cfi_endproc
 730              	.LFE1732:
 732              		.section	.text.MC_GetControlModeMotor1,"ax",%progbits
 733              		.align	1
 734              		.weak	MC_GetControlModeMotor1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	MC_GetControlModeMotor1:
 741              	.LFB1733:
 410:Src/mc_api.c  **** /**
 411:Src/mc_api.c  ****  * @brief Returns the Control Mode used for Motor 1 (either Speed or Torque)
 412:Src/mc_api.c  ****  */
 413:Src/mc_api.c  **** __weak MC_ControlMode_t MC_GetControlModeMotor1(void)
 414:Src/mc_api.c  **** {
 742              		.loc 1 414 1 is_stmt 1 view -0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746 0000 08B5     		push	{r3, lr}
 747              	.LCFI24:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
 415:Src/mc_api.c  ****   return (MCI_GetControlMode(pMCI[M1]));
 751              		.loc 1 415 3 view .LVU84
 752              		.loc 1 415 11 is_stmt 0 view .LVU85
 753 0002 024B     		ldr	r3, .L83
 754 0004 1868     		ldr	r0, [r3]
 755 0006 FFF7FEFF 		bl	MCI_GetControlMode
 756              	.LVL30:
 416:Src/mc_api.c  **** }
 757              		.loc 1 416 1 view .LVU86
 758 000a 08BD     		pop	{r3, pc}
 759              	.L84:
 760              		.align	2
 761              	.L83:
 762 000c 00000000 		.word	pMCI
 763              		.cfi_endproc
 764              	.LFE1733:
 766              		.section	.text.MC_GetImposedDirectionMotor1,"ax",%progbits
ARM GAS  /tmp/ccrWx2YC.s 			page 21


 767              		.align	1
 768              		.weak	MC_GetImposedDirectionMotor1
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu fpv4-sp-d16
 774              	MC_GetImposedDirectionMotor1:
 775              	.LFB1734:
 417:Src/mc_api.c  **** 
 418:Src/mc_api.c  **** /**
 419:Src/mc_api.c  ****  * @brief Returns the rotation direction imposed by the last command on Motor 1
 420:Src/mc_api.c  ****  *
 421:Src/mc_api.c  ****  * The last command is either MC_ProgramSpeedRampMotor1(), MC_ProgramTorqueRampMotor1() or
 422:Src/mc_api.c  ****  * MC_SetCurrentReferenceMotor1().
 423:Src/mc_api.c  ****  *
 424:Src/mc_api.c  ****  * The function returns -1 if the sign of the final speed, the final torque or the Iq current
 425:Src/mc_api.c  ****  * reference component of the last command is negative. Otherwise, 1 is returned.
 426:Src/mc_api.c  ****  *
 427:Src/mc_api.c  ****  * @note if no such command has ever been submitted, 1 is returned as well.
 428:Src/mc_api.c  ****  */
 429:Src/mc_api.c  **** __weak int16_t MC_GetImposedDirectionMotor1(void)
 430:Src/mc_api.c  **** {
 776              		.loc 1 430 1 is_stmt 1 view -0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780 0000 08B5     		push	{r3, lr}
 781              	.LCFI25:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 3, -8
 784              		.cfi_offset 14, -4
 431:Src/mc_api.c  ****   return (MCI_GetImposedMotorDirection(pMCI[M1]));
 785              		.loc 1 431 3 view .LVU88
 786              		.loc 1 431 11 is_stmt 0 view .LVU89
 787 0002 024B     		ldr	r3, .L87
 788 0004 1868     		ldr	r0, [r3]
 789 0006 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 790              	.LVL31:
 432:Src/mc_api.c  **** }
 791              		.loc 1 432 1 view .LVU90
 792 000a 08BD     		pop	{r3, pc}
 793              	.L88:
 794              		.align	2
 795              	.L87:
 796 000c 00000000 		.word	pMCI
 797              		.cfi_endproc
 798              	.LFE1734:
 800              		.section	.text.MC_GetSpeedSensorReliabilityMotor1,"ax",%progbits
 801              		.align	1
 802              		.weak	MC_GetSpeedSensorReliabilityMotor1
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	MC_GetSpeedSensorReliabilityMotor1:
 809              	.LFB1735:
 433:Src/mc_api.c  **** 
ARM GAS  /tmp/ccrWx2YC.s 			page 22


 434:Src/mc_api.c  **** /**
 435:Src/mc_api.c  ****  * @brief Returns true if the speed sensor used for Motor 1 is reliable, false otherwise
 436:Src/mc_api.c  ****  */
 437:Src/mc_api.c  **** __weak bool MC_GetSpeedSensorReliabilityMotor1(void)
 438:Src/mc_api.c  **** {
 810              		.loc 1 438 1 is_stmt 1 view -0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814 0000 08B5     		push	{r3, lr}
 815              	.LCFI26:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 3, -8
 818              		.cfi_offset 14, -4
 439:Src/mc_api.c  ****   return (MCI_GetSpdSensorReliability(pMCI[M1]));
 819              		.loc 1 439 3 view .LVU92
 820              		.loc 1 439 11 is_stmt 0 view .LVU93
 821 0002 024B     		ldr	r3, .L91
 822 0004 1868     		ldr	r0, [r3]
 823 0006 FFF7FEFF 		bl	MCI_GetSpdSensorReliability
 824              	.LVL32:
 440:Src/mc_api.c  **** }
 825              		.loc 1 440 1 view .LVU94
 826 000a 08BD     		pop	{r3, pc}
 827              	.L92:
 828              		.align	2
 829              	.L91:
 830 000c 00000000 		.word	pMCI
 831              		.cfi_endproc
 832              	.LFE1735:
 834              		.section	.text.MC_GetPhaseCurrentAmplitudeMotor1,"ax",%progbits
 835              		.align	1
 836              		.weak	MC_GetPhaseCurrentAmplitudeMotor1
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	MC_GetPhaseCurrentAmplitudeMotor1:
 843              	.LFB1736:
 441:Src/mc_api.c  **** 
 442:Src/mc_api.c  **** /**
 443:Src/mc_api.c  ****  * @brief returns the amplitude of the phase current injected in Motor 1
 444:Src/mc_api.c  ****  *
 445:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16A unit. To convert it to amperes, use the 
 446:Src/mc_api.c  ****  *
 447:Src/mc_api.c  ****  * @f[
 448:Src/mc_api.c  ****  * I_{Amps} = \frac{ I_{s16A} \times V_{dd}}{ 65536 \times R_{shunt} \times A_{op} }
 449:Src/mc_api.c  ****  * @f]
 450:Src/mc_api.c  ****  *
 451:Src/mc_api.c  ****  */
 452:Src/mc_api.c  **** __weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
 453:Src/mc_api.c  **** {
 844              		.loc 1 453 1 is_stmt 1 view -0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccrWx2YC.s 			page 23


 849              	.LCFI27:
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 3, -8
 852              		.cfi_offset 14, -4
 454:Src/mc_api.c  ****   return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 853              		.loc 1 454 3 view .LVU96
 854              		.loc 1 454 11 is_stmt 0 view .LVU97
 855 0002 024B     		ldr	r3, .L95
 856 0004 1868     		ldr	r0, [r3]
 857 0006 FFF7FEFF 		bl	MCI_GetPhaseCurrentAmplitude
 858              	.LVL33:
 455:Src/mc_api.c  **** }
 859              		.loc 1 455 1 view .LVU98
 860 000a 08BD     		pop	{r3, pc}
 861              	.L96:
 862              		.align	2
 863              	.L95:
 864 000c 00000000 		.word	pMCI
 865              		.cfi_endproc
 866              	.LFE1736:
 868              		.section	.text.MC_GetPhaseVoltageAmplitudeMotor1,"ax",%progbits
 869              		.align	1
 870              		.weak	MC_GetPhaseVoltageAmplitudeMotor1
 871              		.syntax unified
 872              		.thumb
 873              		.thumb_func
 874              		.fpu fpv4-sp-d16
 876              	MC_GetPhaseVoltageAmplitudeMotor1:
 877              	.LFB1737:
 456:Src/mc_api.c  **** 
 457:Src/mc_api.c  **** /**
 458:Src/mc_api.c  ****  * @brief returns the amplitude of the phase voltage applied to Motor 1
 459:Src/mc_api.c  ****  *
 460:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16V unit. To convert it to volts, use the fo
 461:Src/mc_api.c  ****  *
 462:Src/mc_api.c  ****  * @f[
 463:Src/mc_api.c  ****  * U_{Volts} = \frac{ U_{s16V} \times V_{bus}}{ \sqrt{3} \times 32768  }
 464:Src/mc_api.c  ****  * @f]
 465:Src/mc_api.c  ****  *
 466:Src/mc_api.c  ****  */
 467:Src/mc_api.c  **** __weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
 468:Src/mc_api.c  **** {
 878              		.loc 1 468 1 is_stmt 1 view -0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882 0000 08B5     		push	{r3, lr}
 883              	.LCFI28:
 884              		.cfi_def_cfa_offset 8
 885              		.cfi_offset 3, -8
 886              		.cfi_offset 14, -4
 469:Src/mc_api.c  ****   return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 887              		.loc 1 469 3 view .LVU100
 888              		.loc 1 469 11 is_stmt 0 view .LVU101
 889 0002 024B     		ldr	r3, .L99
 890 0004 1868     		ldr	r0, [r3]
 891 0006 FFF7FEFF 		bl	MCI_GetPhaseVoltageAmplitude
ARM GAS  /tmp/ccrWx2YC.s 			page 24


 892              	.LVL34:
 470:Src/mc_api.c  **** }
 893              		.loc 1 470 1 view .LVU102
 894 000a 08BD     		pop	{r3, pc}
 895              	.L100:
 896              		.align	2
 897              	.L99:
 898 000c 00000000 		.word	pMCI
 899              		.cfi_endproc
 900              	.LFE1737:
 902              		.section	.text.MC_GetIabMotor1,"ax",%progbits
 903              		.align	1
 904              		.weak	MC_GetIabMotor1
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu fpv4-sp-d16
 910              	MC_GetIabMotor1:
 911              	.LFB1738:
 471:Src/mc_api.c  **** 
 472:Src/mc_api.c  **** /**
 473:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_t format
 474:Src/mc_api.c  ****  */
 475:Src/mc_api.c  **** __weak ab_t MC_GetIabMotor1(void)
 476:Src/mc_api.c  **** {
 912              		.loc 1 476 1 is_stmt 1 view -0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 8
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916 0000 00B5     		push	{lr}
 917              	.LCFI29:
 918              		.cfi_def_cfa_offset 4
 919              		.cfi_offset 14, -4
 920 0002 83B0     		sub	sp, sp, #12
 921              	.LCFI30:
 922              		.cfi_def_cfa_offset 16
 477:Src/mc_api.c  ****   return (MCI_GetIab(pMCI[M1]));
 923              		.loc 1 477 3 view .LVU104
 924              		.loc 1 477 11 is_stmt 0 view .LVU105
 925 0004 074B     		ldr	r3, .L103
 926 0006 1868     		ldr	r0, [r3]
 927 0008 FFF7FEFF 		bl	MCI_GetIab
 928              	.LVL35:
 929 000c 0346     		mov	r3, r0
 930 000e 0020     		movs	r0, #0
 931 0010 9AB2     		uxth	r2, r3
 932 0012 62F30F00 		bfi	r0, r2, #0, #16
 933 0016 1B0C     		lsrs	r3, r3, #16
 934 0018 63F31F40 		bfi	r0, r3, #16, #16
 478:Src/mc_api.c  **** }
 935              		.loc 1 478 1 view .LVU106
 936 001c 03B0     		add	sp, sp, #12
 937              	.LCFI31:
 938              		.cfi_def_cfa_offset 4
 939              		@ sp needed
 940 001e 5DF804FB 		ldr	pc, [sp], #4
 941              	.L104:
ARM GAS  /tmp/ccrWx2YC.s 			page 25


 942 0022 00BF     		.align	2
 943              	.L103:
 944 0024 00000000 		.word	pMCI
 945              		.cfi_endproc
 946              	.LFE1738:
 948              		.section	.text.MC_GetIabMotor1_F,"ax",%progbits
 949              		.align	1
 950              		.weak	MC_GetIabMotor1_F
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu fpv4-sp-d16
 956              	MC_GetIabMotor1_F:
 957              	.LFB1739:
 479:Src/mc_api.c  **** 
 480:Src/mc_api.c  **** /**
 481:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_f_t format
 482:Src/mc_api.c  ****  */
 483:Src/mc_api.c  **** __weak ab_f_t MC_GetIabMotor1_F(void)
 484:Src/mc_api.c  **** {
 958              		.loc 1 484 1 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962 0000 00B5     		push	{lr}
 963              	.LCFI32:
 964              		.cfi_def_cfa_offset 4
 965              		.cfi_offset 14, -4
 966 0002 85B0     		sub	sp, sp, #20
 967              	.LCFI33:
 968              		.cfi_def_cfa_offset 24
 485:Src/mc_api.c  ****   return (MCI_GetIab_F(pMCI[M1]));
 969              		.loc 1 485 3 view .LVU108
 970              		.loc 1 485 11 is_stmt 0 view .LVU109
 971 0004 034B     		ldr	r3, .L107
 972 0006 1868     		ldr	r0, [r3]
 973 0008 FFF7FEFF 		bl	MCI_GetIab_F
 974              	.LVL36:
 486:Src/mc_api.c  **** }
 975              		.loc 1 486 1 view .LVU110
 976 000c 05B0     		add	sp, sp, #20
 977              	.LCFI34:
 978              		.cfi_def_cfa_offset 4
 979              		@ sp needed
 980 000e 5DF804FB 		ldr	pc, [sp], #4
 981              	.L108:
 982 0012 00BF     		.align	2
 983              	.L107:
 984 0014 00000000 		.word	pMCI
 985              		.cfi_endproc
 986              	.LFE1739:
 988              		.section	.text.MC_GetIalphabetaMotor1,"ax",%progbits
 989              		.align	1
 990              		.weak	MC_GetIalphabetaMotor1
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
ARM GAS  /tmp/ccrWx2YC.s 			page 26


 994              		.fpu fpv4-sp-d16
 996              	MC_GetIalphabetaMotor1:
 997              	.LFB1740:
 487:Src/mc_api.c  **** 
 488:Src/mc_api.c  **** /**
 489:Src/mc_api.c  ****  * @brief returns Ialpha and Ibeta current values for Motor 1 in alphabeta_t format
 490:Src/mc_api.c  ****  */
 491:Src/mc_api.c  **** __weak alphabeta_t MC_GetIalphabetaMotor1(void)
 492:Src/mc_api.c  **** {
 998              		.loc 1 492 1 is_stmt 1 view -0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002 0000 00B5     		push	{lr}
 1003              	.LCFI35:
 1004              		.cfi_def_cfa_offset 4
 1005              		.cfi_offset 14, -4
 1006 0002 83B0     		sub	sp, sp, #12
 1007              	.LCFI36:
 1008              		.cfi_def_cfa_offset 16
 493:Src/mc_api.c  ****   return (MCI_GetIalphabeta(pMCI[M1]));
 1009              		.loc 1 493 3 view .LVU112
 1010              		.loc 1 493 11 is_stmt 0 view .LVU113
 1011 0004 074B     		ldr	r3, .L111
 1012 0006 1868     		ldr	r0, [r3]
 1013 0008 FFF7FEFF 		bl	MCI_GetIalphabeta
 1014              	.LVL37:
 1015 000c 0346     		mov	r3, r0
 1016 000e 0020     		movs	r0, #0
 1017 0010 9AB2     		uxth	r2, r3
 1018 0012 62F30F00 		bfi	r0, r2, #0, #16
 1019 0016 1B0C     		lsrs	r3, r3, #16
 1020 0018 63F31F40 		bfi	r0, r3, #16, #16
 494:Src/mc_api.c  **** }
 1021              		.loc 1 494 1 view .LVU114
 1022 001c 03B0     		add	sp, sp, #12
 1023              	.LCFI37:
 1024              		.cfi_def_cfa_offset 4
 1025              		@ sp needed
 1026 001e 5DF804FB 		ldr	pc, [sp], #4
 1027              	.L112:
 1028 0022 00BF     		.align	2
 1029              	.L111:
 1030 0024 00000000 		.word	pMCI
 1031              		.cfi_endproc
 1032              	.LFE1740:
 1034              		.section	.text.MC_GetIqdMotor1,"ax",%progbits
 1035              		.align	1
 1036              		.weak	MC_GetIqdMotor1
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu fpv4-sp-d16
 1042              	MC_GetIqdMotor1:
 1043              	.LFB1741:
 495:Src/mc_api.c  **** 
 496:Src/mc_api.c  **** /**
ARM GAS  /tmp/ccrWx2YC.s 			page 27


 497:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in qd_t format
 498:Src/mc_api.c  ****  */
 499:Src/mc_api.c  **** __weak qd_t MC_GetIqdMotor1(void)
 500:Src/mc_api.c  **** {
 1044              		.loc 1 500 1 is_stmt 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 8
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048 0000 00B5     		push	{lr}
 1049              	.LCFI38:
 1050              		.cfi_def_cfa_offset 4
 1051              		.cfi_offset 14, -4
 1052 0002 83B0     		sub	sp, sp, #12
 1053              	.LCFI39:
 1054              		.cfi_def_cfa_offset 16
 501:Src/mc_api.c  ****   return (MCI_GetIqd(pMCI[M1]));
 1055              		.loc 1 501 3 view .LVU116
 1056              		.loc 1 501 11 is_stmt 0 view .LVU117
 1057 0004 074B     		ldr	r3, .L115
 1058 0006 1868     		ldr	r0, [r3]
 1059 0008 FFF7FEFF 		bl	MCI_GetIqd
 1060              	.LVL38:
 1061 000c 0346     		mov	r3, r0
 1062 000e 0020     		movs	r0, #0
 1063 0010 9AB2     		uxth	r2, r3
 1064 0012 62F30F00 		bfi	r0, r2, #0, #16
 1065 0016 1B0C     		lsrs	r3, r3, #16
 1066 0018 63F31F40 		bfi	r0, r3, #16, #16
 502:Src/mc_api.c  **** }
 1067              		.loc 1 502 1 view .LVU118
 1068 001c 03B0     		add	sp, sp, #12
 1069              	.LCFI40:
 1070              		.cfi_def_cfa_offset 4
 1071              		@ sp needed
 1072 001e 5DF804FB 		ldr	pc, [sp], #4
 1073              	.L116:
 1074 0022 00BF     		.align	2
 1075              	.L115:
 1076 0024 00000000 		.word	pMCI
 1077              		.cfi_endproc
 1078              	.LFE1741:
 1080              		.section	.text.MC_GetIqdMotor1_F,"ax",%progbits
 1081              		.align	1
 1082              		.weak	MC_GetIqdMotor1_F
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv4-sp-d16
 1088              	MC_GetIqdMotor1_F:
 1089              	.LFB1742:
 503:Src/mc_api.c  **** 
 504:Src/mc_api.c  **** /**
 505:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in float_t type
 506:Src/mc_api.c  ****  */
 507:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdMotor1_F(void)
 508:Src/mc_api.c  **** {
 1090              		.loc 1 508 1 is_stmt 1 view -0
ARM GAS  /tmp/ccrWx2YC.s 			page 28


 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 16
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094 0000 00B5     		push	{lr}
 1095              	.LCFI41:
 1096              		.cfi_def_cfa_offset 4
 1097              		.cfi_offset 14, -4
 1098 0002 85B0     		sub	sp, sp, #20
 1099              	.LCFI42:
 1100              		.cfi_def_cfa_offset 24
 509:Src/mc_api.c  ****   return (MCI_GetIqd_F(pMCI[M1]));
 1101              		.loc 1 509 3 view .LVU120
 1102              		.loc 1 509 11 is_stmt 0 view .LVU121
 1103 0004 034B     		ldr	r3, .L119
 1104 0006 1868     		ldr	r0, [r3]
 1105 0008 FFF7FEFF 		bl	MCI_GetIqd_F
 1106              	.LVL39:
 510:Src/mc_api.c  **** }
 1107              		.loc 1 510 1 view .LVU122
 1108 000c 05B0     		add	sp, sp, #20
 1109              	.LCFI43:
 1110              		.cfi_def_cfa_offset 4
 1111              		@ sp needed
 1112 000e 5DF804FB 		ldr	pc, [sp], #4
 1113              	.L120:
 1114 0012 00BF     		.align	2
 1115              	.L119:
 1116 0014 00000000 		.word	pMCI
 1117              		.cfi_endproc
 1118              	.LFE1742:
 1120              		.section	.text.MC_GetIqdrefMotor1,"ax",%progbits
 1121              		.align	1
 1122              		.weak	MC_GetIqdrefMotor1
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu fpv4-sp-d16
 1128              	MC_GetIqdrefMotor1:
 1129              	.LFB1743:
 511:Src/mc_api.c  **** 
 512:Src/mc_api.c  **** /**
 513:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in qd_t format
 514:Src/mc_api.c  ****  */
 515:Src/mc_api.c  **** __weak qd_t MC_GetIqdrefMotor1(void)
 516:Src/mc_api.c  **** {
 1130              		.loc 1 516 1 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 8
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134 0000 00B5     		push	{lr}
 1135              	.LCFI44:
 1136              		.cfi_def_cfa_offset 4
 1137              		.cfi_offset 14, -4
 1138 0002 83B0     		sub	sp, sp, #12
 1139              	.LCFI45:
 1140              		.cfi_def_cfa_offset 16
 517:Src/mc_api.c  ****   return (MCI_GetIqdref(pMCI[M1]));
ARM GAS  /tmp/ccrWx2YC.s 			page 29


 1141              		.loc 1 517 3 view .LVU124
 1142              		.loc 1 517 11 is_stmt 0 view .LVU125
 1143 0004 074B     		ldr	r3, .L123
 1144 0006 1868     		ldr	r0, [r3]
 1145 0008 FFF7FEFF 		bl	MCI_GetIqdref
 1146              	.LVL40:
 1147 000c 0346     		mov	r3, r0
 1148 000e 0020     		movs	r0, #0
 1149 0010 9AB2     		uxth	r2, r3
 1150 0012 62F30F00 		bfi	r0, r2, #0, #16
 1151 0016 1B0C     		lsrs	r3, r3, #16
 1152 0018 63F31F40 		bfi	r0, r3, #16, #16
 518:Src/mc_api.c  **** }
 1153              		.loc 1 518 1 view .LVU126
 1154 001c 03B0     		add	sp, sp, #12
 1155              	.LCFI46:
 1156              		.cfi_def_cfa_offset 4
 1157              		@ sp needed
 1158 001e 5DF804FB 		ldr	pc, [sp], #4
 1159              	.L124:
 1160 0022 00BF     		.align	2
 1161              	.L123:
 1162 0024 00000000 		.word	pMCI
 1163              		.cfi_endproc
 1164              	.LFE1743:
 1166              		.section	.text.MC_GetIqdrefMotor1_F,"ax",%progbits
 1167              		.align	1
 1168              		.weak	MC_GetIqdrefMotor1_F
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1172              		.fpu fpv4-sp-d16
 1174              	MC_GetIqdrefMotor1_F:
 1175              	.LFB1744:
 519:Src/mc_api.c  **** 
 520:Src/mc_api.c  **** /**
 521:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in float_t type
 522:Src/mc_api.c  ****  */
 523:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdrefMotor1_F(void)
 524:Src/mc_api.c  **** {
 1176              		.loc 1 524 1 is_stmt 1 view -0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 16
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180 0000 00B5     		push	{lr}
 1181              	.LCFI47:
 1182              		.cfi_def_cfa_offset 4
 1183              		.cfi_offset 14, -4
 1184 0002 85B0     		sub	sp, sp, #20
 1185              	.LCFI48:
 1186              		.cfi_def_cfa_offset 24
 525:Src/mc_api.c  ****   return (MCI_GetIqdref_F(pMCI[M1]));
 1187              		.loc 1 525 3 view .LVU128
 1188              		.loc 1 525 11 is_stmt 0 view .LVU129
 1189 0004 034B     		ldr	r3, .L127
 1190 0006 1868     		ldr	r0, [r3]
 1191 0008 FFF7FEFF 		bl	MCI_GetIqdref_F
ARM GAS  /tmp/ccrWx2YC.s 			page 30


 1192              	.LVL41:
 526:Src/mc_api.c  **** }
 1193              		.loc 1 526 1 view .LVU130
 1194 000c 05B0     		add	sp, sp, #20
 1195              	.LCFI49:
 1196              		.cfi_def_cfa_offset 4
 1197              		@ sp needed
 1198 000e 5DF804FB 		ldr	pc, [sp], #4
 1199              	.L128:
 1200 0012 00BF     		.align	2
 1201              	.L127:
 1202 0014 00000000 		.word	pMCI
 1203              		.cfi_endproc
 1204              	.LFE1744:
 1206              		.section	.text.MC_GetVqdMotor1,"ax",%progbits
 1207              		.align	1
 1208              		.weak	MC_GetVqdMotor1
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	MC_GetVqdMotor1:
 1215              	.LFB1745:
 527:Src/mc_api.c  **** 
 528:Src/mc_api.c  **** /**
 529:Src/mc_api.c  ****  * @brief returns Vq and Vd voltage values for Motor 1 in qd_t format
 530:Src/mc_api.c  ****  */
 531:Src/mc_api.c  **** __weak qd_t MC_GetVqdMotor1(void)
 532:Src/mc_api.c  **** {
 1216              		.loc 1 532 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 8
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220 0000 00B5     		push	{lr}
 1221              	.LCFI50:
 1222              		.cfi_def_cfa_offset 4
 1223              		.cfi_offset 14, -4
 1224 0002 83B0     		sub	sp, sp, #12
 1225              	.LCFI51:
 1226              		.cfi_def_cfa_offset 16
 533:Src/mc_api.c  ****   return (MCI_GetVqd(pMCI[M1]));
 1227              		.loc 1 533 3 view .LVU132
 1228              		.loc 1 533 11 is_stmt 0 view .LVU133
 1229 0004 074B     		ldr	r3, .L131
 1230 0006 1868     		ldr	r0, [r3]
 1231 0008 FFF7FEFF 		bl	MCI_GetVqd
 1232              	.LVL42:
 1233 000c 0346     		mov	r3, r0
 1234 000e 0020     		movs	r0, #0
 1235 0010 9AB2     		uxth	r2, r3
 1236 0012 62F30F00 		bfi	r0, r2, #0, #16
 1237 0016 1B0C     		lsrs	r3, r3, #16
 1238 0018 63F31F40 		bfi	r0, r3, #16, #16
 534:Src/mc_api.c  **** }
 1239              		.loc 1 534 1 view .LVU134
 1240 001c 03B0     		add	sp, sp, #12
 1241              	.LCFI52:
ARM GAS  /tmp/ccrWx2YC.s 			page 31


 1242              		.cfi_def_cfa_offset 4
 1243              		@ sp needed
 1244 001e 5DF804FB 		ldr	pc, [sp], #4
 1245              	.L132:
 1246 0022 00BF     		.align	2
 1247              	.L131:
 1248 0024 00000000 		.word	pMCI
 1249              		.cfi_endproc
 1250              	.LFE1745:
 1252              		.section	.text.MC_GetValphabetaMotor1,"ax",%progbits
 1253              		.align	1
 1254              		.weak	MC_GetValphabetaMotor1
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	MC_GetValphabetaMotor1:
 1261              	.LFB1746:
 535:Src/mc_api.c  **** 
 536:Src/mc_api.c  **** /**
 537:Src/mc_api.c  ****  * @brief returns Valpha and Vbeta voltage values for Motor 1 in alphabeta_t format
 538:Src/mc_api.c  ****  */
 539:Src/mc_api.c  **** __weak alphabeta_t MC_GetValphabetaMotor1(void)
 540:Src/mc_api.c  **** {
 1262              		.loc 1 540 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 8
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266 0000 00B5     		push	{lr}
 1267              	.LCFI53:
 1268              		.cfi_def_cfa_offset 4
 1269              		.cfi_offset 14, -4
 1270 0002 83B0     		sub	sp, sp, #12
 1271              	.LCFI54:
 1272              		.cfi_def_cfa_offset 16
 541:Src/mc_api.c  ****   return (MCI_GetValphabeta(pMCI[M1]));
 1273              		.loc 1 541 3 view .LVU136
 1274              		.loc 1 541 11 is_stmt 0 view .LVU137
 1275 0004 074B     		ldr	r3, .L135
 1276 0006 1868     		ldr	r0, [r3]
 1277 0008 FFF7FEFF 		bl	MCI_GetValphabeta
 1278              	.LVL43:
 1279 000c 0346     		mov	r3, r0
 1280 000e 0020     		movs	r0, #0
 1281 0010 9AB2     		uxth	r2, r3
 1282 0012 62F30F00 		bfi	r0, r2, #0, #16
 1283 0016 1B0C     		lsrs	r3, r3, #16
 1284 0018 63F31F40 		bfi	r0, r3, #16, #16
 542:Src/mc_api.c  **** }
 1285              		.loc 1 542 1 view .LVU138
 1286 001c 03B0     		add	sp, sp, #12
 1287              	.LCFI55:
 1288              		.cfi_def_cfa_offset 4
 1289              		@ sp needed
 1290 001e 5DF804FB 		ldr	pc, [sp], #4
 1291              	.L136:
 1292 0022 00BF     		.align	2
ARM GAS  /tmp/ccrWx2YC.s 			page 32


 1293              	.L135:
 1294 0024 00000000 		.word	pMCI
 1295              		.cfi_endproc
 1296              	.LFE1746:
 1298              		.section	.text.MC_GetElAngledppMotor1,"ax",%progbits
 1299              		.align	1
 1300              		.weak	MC_GetElAngledppMotor1
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1304              		.fpu fpv4-sp-d16
 1306              	MC_GetElAngledppMotor1:
 1307              	.LFB1747:
 543:Src/mc_api.c  **** 
 544:Src/mc_api.c  **** /**
 545:Src/mc_api.c  ****  * @brief returns the electrical angle of the rotor of Motor 1, in DDP format
 546:Src/mc_api.c  ****  */
 547:Src/mc_api.c  **** __weak int16_t MC_GetElAngledppMotor1(void)
 548:Src/mc_api.c  **** {
 1308              		.loc 1 548 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312 0000 08B5     		push	{r3, lr}
 1313              	.LCFI56:
 1314              		.cfi_def_cfa_offset 8
 1315              		.cfi_offset 3, -8
 1316              		.cfi_offset 14, -4
 549:Src/mc_api.c  ****   return (MCI_GetElAngledpp(pMCI[M1]));
 1317              		.loc 1 549 3 view .LVU140
 1318              		.loc 1 549 11 is_stmt 0 view .LVU141
 1319 0002 024B     		ldr	r3, .L139
 1320 0004 1868     		ldr	r0, [r3]
 1321 0006 FFF7FEFF 		bl	MCI_GetElAngledpp
 1322              	.LVL44:
 550:Src/mc_api.c  **** }
 1323              		.loc 1 550 1 view .LVU142
 1324 000a 08BD     		pop	{r3, pc}
 1325              	.L140:
 1326              		.align	2
 1327              	.L139:
 1328 000c 00000000 		.word	pMCI
 1329              		.cfi_endproc
 1330              	.LFE1747:
 1332              		.section	.text.MC_GetTerefMotor1,"ax",%progbits
 1333              		.align	1
 1334              		.weak	MC_GetTerefMotor1
 1335              		.syntax unified
 1336              		.thumb
 1337              		.thumb_func
 1338              		.fpu fpv4-sp-d16
 1340              	MC_GetTerefMotor1:
 1341              	.LFB1748:
 551:Src/mc_api.c  **** 
 552:Src/mc_api.c  **** /**
 553:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
 554:Src/mc_api.c  ****  */
ARM GAS  /tmp/ccrWx2YC.s 			page 33


 555:Src/mc_api.c  **** __weak int16_t MC_GetTerefMotor1(void)
 556:Src/mc_api.c  **** {
 1342              		.loc 1 556 1 is_stmt 1 view -0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 0
 1345              		@ frame_needed = 0, uses_anonymous_args = 0
 1346 0000 08B5     		push	{r3, lr}
 1347              	.LCFI57:
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 3, -8
 1350              		.cfi_offset 14, -4
 557:Src/mc_api.c  ****   return (MCI_GetTeref(pMCI[M1]));
 1351              		.loc 1 557 3 view .LVU144
 1352              		.loc 1 557 11 is_stmt 0 view .LVU145
 1353 0002 024B     		ldr	r3, .L143
 1354 0004 1868     		ldr	r0, [r3]
 1355 0006 FFF7FEFF 		bl	MCI_GetTeref
 1356              	.LVL45:
 558:Src/mc_api.c  **** }
 1357              		.loc 1 558 1 view .LVU146
 1358 000a 08BD     		pop	{r3, pc}
 1359              	.L144:
 1360              		.align	2
 1361              	.L143:
 1362 000c 00000000 		.word	pMCI
 1363              		.cfi_endproc
 1364              	.LFE1748:
 1366              		.section	.text.MC_GetTerefMotor1_F,"ax",%progbits
 1367              		.align	1
 1368              		.weak	MC_GetTerefMotor1_F
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	MC_GetTerefMotor1_F:
 1375              	.LFB1749:
 559:Src/mc_api.c  **** 
 560:Src/mc_api.c  **** /**
 561:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
 562:Src/mc_api.c  ****  */
 563:Src/mc_api.c  **** __weak float_t MC_GetTerefMotor1_F(void)
 564:Src/mc_api.c  **** {
 1376              		.loc 1 564 1 is_stmt 1 view -0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 0, uses_anonymous_args = 0
 1380 0000 08B5     		push	{r3, lr}
 1381              	.LCFI58:
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 3, -8
 1384              		.cfi_offset 14, -4
 565:Src/mc_api.c  ****   return (MCI_GetTeref_F(pMCI[M1]));
 1385              		.loc 1 565 3 view .LVU148
 1386              		.loc 1 565 11 is_stmt 0 view .LVU149
 1387 0002 024B     		ldr	r3, .L147
 1388 0004 1868     		ldr	r0, [r3]
 1389 0006 FFF7FEFF 		bl	MCI_GetTeref_F
ARM GAS  /tmp/ccrWx2YC.s 			page 34


 1390              	.LVL46:
 566:Src/mc_api.c  **** }
 1391              		.loc 1 566 1 view .LVU150
 1392 000a 08BD     		pop	{r3, pc}
 1393              	.L148:
 1394              		.align	2
 1395              	.L147:
 1396 000c 00000000 		.word	pMCI
 1397              		.cfi_endproc
 1398              	.LFE1749:
 1400              		.section	.text.MC_Clear_IqdrefMotor1,"ax",%progbits
 1401              		.align	1
 1402              		.weak	MC_Clear_IqdrefMotor1
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	MC_Clear_IqdrefMotor1:
 1409              	.LFB1750:
 567:Src/mc_api.c  **** 
 568:Src/mc_api.c  **** /**
 569:Src/mc_api.c  ****  * @brief re-initializes Iq and Id references to their default values for Motor 1
 570:Src/mc_api.c  ****  *
 571:Src/mc_api.c  ****  * The default values for the Iq and Id references are coming from the Speed
 572:Src/mc_api.c  ****  * or the Torque controller depending on the control mode.
 573:Src/mc_api.c  ****  *
 574:Src/mc_api.c  ****  * @see   SpeednTorqCtrl for more details.
 575:Src/mc_api.c  ****  */
 576:Src/mc_api.c  **** __weak void MC_Clear_IqdrefMotor1(void)
 577:Src/mc_api.c  **** {
 1410              		.loc 1 577 1 is_stmt 1 view -0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414 0000 08B5     		push	{r3, lr}
 1415              	.LCFI59:
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 3, -8
 1418              		.cfi_offset 14, -4
 578:Src/mc_api.c  ****   MCI_Clear_Iqdref(pMCI[M1]);
 1419              		.loc 1 578 3 view .LVU152
 1420 0002 024B     		ldr	r3, .L151
 1421 0004 1868     		ldr	r0, [r3]
 1422 0006 FFF7FEFF 		bl	MCI_Clear_Iqdref
 1423              	.LVL47:
 579:Src/mc_api.c  **** }
 1424              		.loc 1 579 1 is_stmt 0 view .LVU153
 1425 000a 08BD     		pop	{r3, pc}
 1426              	.L152:
 1427              		.align	2
 1428              	.L151:
 1429 000c 00000000 		.word	pMCI
 1430              		.cfi_endproc
 1431              	.LFE1750:
 1433              		.section	.text.MC_AcknowledgeFaultMotor1,"ax",%progbits
 1434              		.align	1
 1435              		.weak	MC_AcknowledgeFaultMotor1
ARM GAS  /tmp/ccrWx2YC.s 			page 35


 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv4-sp-d16
 1441              	MC_AcknowledgeFaultMotor1:
 1442              	.LFB1751:
 580:Src/mc_api.c  **** 
 581:Src/mc_api.c  **** /**
 582:Src/mc_api.c  ****  * @brief Acknowledge a Motor Control fault that occured on Motor 1
 583:Src/mc_api.c  ****  *
 584:Src/mc_api.c  ****  *  This function informs Motor 1's state machine that the Application has taken
 585:Src/mc_api.c  ****  * the error condition that occured into account. If no error condition exists when
 586:Src/mc_api.c  ****  * the function is called, nothing is done and false is returned. Otherwise, true is
 587:Src/mc_api.c  ****  * returned.
 588:Src/mc_api.c  ****  */
 589:Src/mc_api.c  **** __weak bool MC_AcknowledgeFaultMotor1(void)
 590:Src/mc_api.c  **** {
 1443              		.loc 1 590 1 is_stmt 1 view -0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447 0000 08B5     		push	{r3, lr}
 1448              	.LCFI60:
 1449              		.cfi_def_cfa_offset 8
 1450              		.cfi_offset 3, -8
 1451              		.cfi_offset 14, -4
 591:Src/mc_api.c  ****   return (MCI_FaultAcknowledged(pMCI[M1]));
 1452              		.loc 1 591 3 view .LVU155
 1453              		.loc 1 591 11 is_stmt 0 view .LVU156
 1454 0002 024B     		ldr	r3, .L155
 1455 0004 1868     		ldr	r0, [r3]
 1456 0006 FFF7FEFF 		bl	MCI_FaultAcknowledged
 1457              	.LVL48:
 592:Src/mc_api.c  **** }
 1458              		.loc 1 592 1 view .LVU157
 1459 000a 08BD     		pop	{r3, pc}
 1460              	.L156:
 1461              		.align	2
 1462              	.L155:
 1463 000c 00000000 		.word	pMCI
 1464              		.cfi_endproc
 1465              	.LFE1751:
 1467              		.section	.text.MC_GetOccurredFaultsMotor1,"ax",%progbits
 1468              		.align	1
 1469              		.weak	MC_GetOccurredFaultsMotor1
 1470              		.syntax unified
 1471              		.thumb
 1472              		.thumb_func
 1473              		.fpu fpv4-sp-d16
 1475              	MC_GetOccurredFaultsMotor1:
 1476              	.LFB1752:
 593:Src/mc_api.c  **** 
 594:Src/mc_api.c  **** /**
 595:Src/mc_api.c  ****  * @brief Returns a bit-field showing non acknowledged faults that occurred on Motor 1.
 596:Src/mc_api.c  ****  *
 597:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 598:Src/mc_api.c  ****  * that have occurred on Motor 1 since its state machine moved to the #FAULT_NOW state.
ARM GAS  /tmp/ccrWx2YC.s 			page 36


 599:Src/mc_api.c  ****  *
 600:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 601:Src/mc_api.c  ****  * of all possible faults codes.
 602:Src/mc_api.c  ****  */
 603:Src/mc_api.c  **** __weak uint16_t MC_GetOccurredFaultsMotor1(void)
 604:Src/mc_api.c  **** {
 1477              		.loc 1 604 1 is_stmt 1 view -0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 0
 1480              		@ frame_needed = 0, uses_anonymous_args = 0
 1481 0000 08B5     		push	{r3, lr}
 1482              	.LCFI61:
 1483              		.cfi_def_cfa_offset 8
 1484              		.cfi_offset 3, -8
 1485              		.cfi_offset 14, -4
 605:Src/mc_api.c  ****   return (MCI_GetOccurredFaults(pMCI[M1]));
 1486              		.loc 1 605 3 view .LVU159
 1487              		.loc 1 605 11 is_stmt 0 view .LVU160
 1488 0002 024B     		ldr	r3, .L159
 1489 0004 1868     		ldr	r0, [r3]
 1490 0006 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1491              	.LVL49:
 606:Src/mc_api.c  **** }
 1492              		.loc 1 606 1 view .LVU161
 1493 000a 08BD     		pop	{r3, pc}
 1494              	.L160:
 1495              		.align	2
 1496              	.L159:
 1497 000c 00000000 		.word	pMCI
 1498              		.cfi_endproc
 1499              	.LFE1752:
 1501              		.section	.text.MC_GetCurrentFaultsMotor1,"ax",%progbits
 1502              		.align	1
 1503              		.weak	MC_GetCurrentFaultsMotor1
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu fpv4-sp-d16
 1509              	MC_GetCurrentFaultsMotor1:
 1510              	.LFB1753:
 607:Src/mc_api.c  **** 
 608:Src/mc_api.c  **** /**
 609:Src/mc_api.c  ****  * @brief returns a bitfield showing all current faults on Motor 1
 610:Src/mc_api.c  ****  *
 611:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 612:Src/mc_api.c  ****  * that are currently active.
 613:Src/mc_api.c  ****  *
 614:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 615:Src/mc_api.c  ****  * of all possible faults codes.
 616:Src/mc_api.c  ****  */
 617:Src/mc_api.c  **** __weak uint16_t MC_GetCurrentFaultsMotor1(void)
 618:Src/mc_api.c  **** {
 1511              		.loc 1 618 1 is_stmt 1 view -0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccrWx2YC.s 			page 37


 1516              	.LCFI62:
 1517              		.cfi_def_cfa_offset 8
 1518              		.cfi_offset 3, -8
 1519              		.cfi_offset 14, -4
 619:Src/mc_api.c  ****   return (MCI_GetCurrentFaults(pMCI[M1]));
 1520              		.loc 1 619 3 view .LVU163
 1521              		.loc 1 619 11 is_stmt 0 view .LVU164
 1522 0002 024B     		ldr	r3, .L163
 1523 0004 1868     		ldr	r0, [r3]
 1524 0006 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1525              	.LVL50:
 620:Src/mc_api.c  **** }
 1526              		.loc 1 620 1 view .LVU165
 1527 000a 08BD     		pop	{r3, pc}
 1528              	.L164:
 1529              		.align	2
 1530              	.L163:
 1531 000c 00000000 		.word	pMCI
 1532              		.cfi_endproc
 1533              	.LFE1753:
 1535              		.section	.text.MC_GetSTMStateMotor1,"ax",%progbits
 1536              		.align	1
 1537              		.weak	MC_GetSTMStateMotor1
 1538              		.syntax unified
 1539              		.thumb
 1540              		.thumb_func
 1541              		.fpu fpv4-sp-d16
 1543              	MC_GetSTMStateMotor1:
 1544              	.LFB1754:
 621:Src/mc_api.c  **** 
 622:Src/mc_api.c  **** /**
 623:Src/mc_api.c  ****  * @brief returns the current state of Motor 1 state machine
 624:Src/mc_api.c  ****  */
 625:Src/mc_api.c  **** __weak MCI_State_t MC_GetSTMStateMotor1(void)
 626:Src/mc_api.c  **** {
 1545              		.loc 1 626 1 is_stmt 1 view -0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549 0000 08B5     		push	{r3, lr}
 1550              	.LCFI63:
 1551              		.cfi_def_cfa_offset 8
 1552              		.cfi_offset 3, -8
 1553              		.cfi_offset 14, -4
 627:Src/mc_api.c  ****   return (MCI_GetSTMState(pMCI[M1]));
 1554              		.loc 1 627 3 view .LVU167
 1555              		.loc 1 627 11 is_stmt 0 view .LVU168
 1556 0002 024B     		ldr	r3, .L167
 1557 0004 1868     		ldr	r0, [r3]
 1558 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1559              	.LVL51:
 628:Src/mc_api.c  **** }
 1560              		.loc 1 628 1 view .LVU169
 1561 000a 08BD     		pop	{r3, pc}
 1562              	.L168:
 1563              		.align	2
 1564              	.L167:
ARM GAS  /tmp/ccrWx2YC.s 			page 38


 1565 000c 00000000 		.word	pMCI
 1566              		.cfi_endproc
 1567              	.LFE1754:
 1569              		.section	.text.MC_SetPolarizationOffsetsMotor1,"ax",%progbits
 1570              		.align	1
 1571              		.global	MC_SetPolarizationOffsetsMotor1
 1572              		.syntax unified
 1573              		.thumb
 1574              		.thumb_func
 1575              		.fpu fpv4-sp-d16
 1577              	MC_SetPolarizationOffsetsMotor1:
 1578              	.LVL52:
 1579              	.LFB1755:
 629:Src/mc_api.c  **** 
 630:Src/mc_api.c  **** /**
 631:Src/mc_api.c  ****   * @brief Sets the polarization offset values to use for Motor 1
 632:Src/mc_api.c  ****   *
 633:Src/mc_api.c  ****   * The Motor Control algorithm relies on a number of current and voltage measures. The hardware
 634:Src/mc_api.c  ****   * parts that make these measurements need to be characterized at least once in the course of
 635:Src/mc_api.c  ****   * product life, prior to its first activation. This characterization consists in measuring the
 636:Src/mc_api.c  ****   * voltage presented to the ADC channels when either no current flows into the phases of the motor
 637:Src/mc_api.c  ****   * or no voltage is applied to them. This characterization is named polarization offsets measureme
 638:Src/mc_api.c  ****   * and its results are the polarization offsets.
 639:Src/mc_api.c  ****   *
 640:Src/mc_api.c  ****   * The Motor Control Firmware can performs this polarization offsets measurement procedure which
 641:Src/mc_api.c  ****   * results in a number of offset values that the application can store in a non volatile memory an
 642:Src/mc_api.c  ****   * then set into the Motor Control subsystem at power-on or after a reset.
 643:Src/mc_api.c  ****   *
 644:Src/mc_api.c  ****   * The application uses this function to set the polarization offset values that the Motor Control
 645:Src/mc_api.c  ****   * subsystem is to use in the current session. This function can only be used when the state machi
 646:Src/mc_api.c  ****   * of the motor is in the #IDLE state in which case it returns #MC_SUCCESS. Otherwise, it does not
 647:Src/mc_api.c  ****   * and returns the #MC_WRONG_STATE_ERROR error code.
 648:Src/mc_api.c  ****   *
 649:Src/mc_api.c  ****   *  The Motor Control subsystem needs to know the polarization offsets before the motor can be con
 650:Src/mc_api.c  ****   * The MC_SetPolarizationOffsetsMotor1() function provides a way to set these offsets. Alternative
 651:Src/mc_api.c  ****   * application can either:
 652:Src/mc_api.c  ****   *
 653:Src/mc_api.c  ****   *  * Execute the polarization offsets measurement procedure with a call to
 654:Src/mc_api.c  ****   *    MC_StartPolarizationOffsetsMeasurementMotor1() after a reset or a power on;
 655:Src/mc_api.c  ****   *  * Start the motor control with the MC_StartWithPolarizationMotor1() that will execute the proc
 656:Src/mc_api.c  ****   *    before actually starting the motor, on the first time it is called after a reset or a power 
 657:Src/mc_api.c  ****   *
 658:Src/mc_api.c  ****   * When this function completes successfully, the state of the polarization offsets measurement pr
 659:Src/mc_api.c  ****   * is set to #COMPLETED. See MC_GetPolarizationState().
 660:Src/mc_api.c  ****   *
 661:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on a structure containing the offset values
 662:Src/mc_api.c  ****   */
 663:Src/mc_api.c  **** bool MC_SetPolarizationOffsetsMotor1(PolarizationOffsets_t * PolarizationOffsets)
 664:Src/mc_api.c  **** {
 1580              		.loc 1 664 1 is_stmt 1 view -0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 0
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584              		.loc 1 664 1 is_stmt 0 view .LVU171
 1585 0000 08B5     		push	{r3, lr}
 1586              	.LCFI64:
 1587              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrWx2YC.s 			page 39


 1588              		.cfi_offset 3, -8
 1589              		.cfi_offset 14, -4
 1590 0002 0146     		mov	r1, r0
 665:Src/mc_api.c  ****   return (MCI_SetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1591              		.loc 1 665 3 is_stmt 1 view .LVU172
 1592              		.loc 1 665 11 is_stmt 0 view .LVU173
 1593 0004 024B     		ldr	r3, .L171
 1594 0006 1868     		ldr	r0, [r3]
 1595              	.LVL53:
 1596              		.loc 1 665 11 view .LVU174
 1597 0008 FFF7FEFF 		bl	MCI_SetCalibratedOffsetsMotor
 1598              	.LVL54:
 666:Src/mc_api.c  **** }
 1599              		.loc 1 666 1 view .LVU175
 1600 000c 08BD     		pop	{r3, pc}
 1601              	.L172:
 1602 000e 00BF     		.align	2
 1603              	.L171:
 1604 0010 00000000 		.word	pMCI
 1605              		.cfi_endproc
 1606              	.LFE1755:
 1608              		.section	.text.MC_GetPolarizationOffsetsMotor1,"ax",%progbits
 1609              		.align	1
 1610              		.global	MC_GetPolarizationOffsetsMotor1
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu fpv4-sp-d16
 1616              	MC_GetPolarizationOffsetsMotor1:
 1617              	.LVL55:
 1618              	.LFB1756:
 667:Src/mc_api.c  **** 
 668:Src/mc_api.c  **** /**
 669:Src/mc_api.c  ****   * @brief Returns the polarization offset values measured or set for Motor 1
 670:Src/mc_api.c  ****   *
 671:Src/mc_api.c  ****   *  See MC_SetPolarizationOffsetsMotor1() for more details.
 672:Src/mc_api.c  ****   *
 673:Src/mc_api.c  ****   *  If the Motor Control Firmware knows the polarization offset values, they are copied into the
 674:Src/mc_api.c  ****   * @p PolarizationOffsets structure and #MC_SUCCESS is returned. Otherwise, nothing is done and
 675:Src/mc_api.c  ****   * #MC_NO_POLARIZATION_OFFSETS_ERROR is returned.
 676:Src/mc_api.c  ****   *
 677:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on the structure into which the polarization offsets will
 678:Src/mc_api.c  ****   *        copied
 679:Src/mc_api.c  ****   * @return #MC_SUCCESS if calibration data were present and could be copied into @p PolarizationOf
 680:Src/mc_api.c  ****   *         #MC_NO_POLARIZATION_OFFSETS_ERROR otherwise.
 681:Src/mc_api.c  ****   */
 682:Src/mc_api.c  **** bool MC_GetPolarizationOffsetsMotor1(PolarizationOffsets_t * PolarizationOffsets)
 683:Src/mc_api.c  **** {
 1619              		.loc 1 683 1 is_stmt 1 view -0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 0
 1622              		@ frame_needed = 0, uses_anonymous_args = 0
 1623              		.loc 1 683 1 is_stmt 0 view .LVU177
 1624 0000 08B5     		push	{r3, lr}
 1625              	.LCFI65:
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 3, -8
ARM GAS  /tmp/ccrWx2YC.s 			page 40


 1628              		.cfi_offset 14, -4
 1629 0002 0146     		mov	r1, r0
 684:Src/mc_api.c  ****    return (MCI_GetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1630              		.loc 1 684 4 is_stmt 1 view .LVU178
 1631              		.loc 1 684 12 is_stmt 0 view .LVU179
 1632 0004 024B     		ldr	r3, .L175
 1633 0006 1868     		ldr	r0, [r3]
 1634              	.LVL56:
 1635              		.loc 1 684 12 view .LVU180
 1636 0008 FFF7FEFF 		bl	MCI_GetCalibratedOffsetsMotor
 1637              	.LVL57:
 685:Src/mc_api.c  **** }
 1638              		.loc 1 685 1 view .LVU181
 1639 000c 08BD     		pop	{r3, pc}
 1640              	.L176:
 1641 000e 00BF     		.align	2
 1642              	.L175:
 1643 0010 00000000 		.word	pMCI
 1644              		.cfi_endproc
 1645              	.LFE1756:
 1647              		.section	.text.MC_StartPolarizationOffsetsMeasurementMotor1,"ax",%progbits
 1648              		.align	1
 1649              		.global	MC_StartPolarizationOffsetsMeasurementMotor1
 1650              		.syntax unified
 1651              		.thumb
 1652              		.thumb_func
 1653              		.fpu fpv4-sp-d16
 1655              	MC_StartPolarizationOffsetsMeasurementMotor1:
 1656              	.LFB1757:
 686:Src/mc_api.c  **** 
 687:Src/mc_api.c  **** /**
 688:Src/mc_api.c  ****   * @brief Starts the polarization offsets measurement procedure.
 689:Src/mc_api.c  ****   *
 690:Src/mc_api.c  ****   * See MC_SetPolarizationOffsetsMotor1() for more details.
 691:Src/mc_api.c  ****   *
 692:Src/mc_api.c  ****   * If the Motor Control Firmware is in the #IDLE state, the procedure is started, the state machin
 693:Src/mc_api.c  ****   * of the motor switches to #OFFSET_CALIB and #MC_SUCCESS is returned. Otherwise, nothing is done
 694:Src/mc_api.c  ****   * and the #MC_WRONG_STATE_ERROR error code is returned.
 695:Src/mc_api.c  ****   *
 696:Src/mc_api.c  ****   * The polarization offsets measurement procedure is only triggered by this function and it is has
 697:Src/mc_api.c  ****   * completed when this function returns. The application can use the MC_GetPolarizationState()
 698:Src/mc_api.c  ****   * function to query the state of the procedure.
 699:Src/mc_api.c  ****   *
 700:Src/mc_api.c  ****   * @see MC_GetPolarizationState()
 701:Src/mc_api.c  ****   */
 702:Src/mc_api.c  **** bool MC_StartPolarizationOffsetsMeasurementMotor1(void)
 703:Src/mc_api.c  **** {
 1657              		.loc 1 703 1 is_stmt 1 view -0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 0
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661 0000 08B5     		push	{r3, lr}
 1662              	.LCFI66:
 1663              		.cfi_def_cfa_offset 8
 1664              		.cfi_offset 3, -8
 1665              		.cfi_offset 14, -4
 704:Src/mc_api.c  ****   return (MCI_StartOffsetMeasurments(pMCI[M1]));
ARM GAS  /tmp/ccrWx2YC.s 			page 41


 1666              		.loc 1 704 3 view .LVU183
 1667              		.loc 1 704 11 is_stmt 0 view .LVU184
 1668 0002 024B     		ldr	r3, .L179
 1669 0004 1868     		ldr	r0, [r3]
 1670 0006 FFF7FEFF 		bl	MCI_StartOffsetMeasurments
 1671              	.LVL58:
 705:Src/mc_api.c  **** }
 1672              		.loc 1 705 1 view .LVU185
 1673 000a 08BD     		pop	{r3, pc}
 1674              	.L180:
 1675              		.align	2
 1676              	.L179:
 1677 000c 00000000 		.word	pMCI
 1678              		.cfi_endproc
 1679              	.LFE1757:
 1681              		.section	.text.MC_GetAveragePowerMotor1_F,"ax",%progbits
 1682              		.align	1
 1683              		.weak	MC_GetAveragePowerMotor1_F
 1684              		.syntax unified
 1685              		.thumb
 1686              		.thumb_func
 1687              		.fpu fpv4-sp-d16
 1689              	MC_GetAveragePowerMotor1_F:
 1690              	.LFB1758:
 706:Src/mc_api.c  **** 
 707:Src/mc_api.c  **** /**
 708:Src/mc_api.c  ****  * @brief This method is used to get the average measured motor power
 709:Src/mc_api.c  ****  *        expressed in watt for Motor 1.
 710:Src/mc_api.c  **** 
 711:Src/mc_api.c  ****  * @retval float_t The average measured motor power expressed in watt.
 712:Src/mc_api.c  ****  */
 713:Src/mc_api.c  **** __weak float_t MC_GetAveragePowerMotor1_F(void)
 714:Src/mc_api.c  **** {
 1691              		.loc 1 714 1 is_stmt 1 view -0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695 0000 08B5     		push	{r3, lr}
 1696              	.LCFI67:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 3, -8
 1699              		.cfi_offset 14, -4
 715:Src/mc_api.c  ****   return (PQD_GetAvrgElMotorPowerW(pMPM[M1]));
 1700              		.loc 1 715 3 view .LVU187
 1701              		.loc 1 715 11 is_stmt 0 view .LVU188
 1702 0002 024B     		ldr	r3, .L183
 1703 0004 1868     		ldr	r0, [r3]
 1704 0006 FFF7FEFF 		bl	PQD_GetAvrgElMotorPowerW
 1705              	.LVL59:
 716:Src/mc_api.c  **** }
 1706              		.loc 1 716 1 view .LVU189
 1707 000a 08BD     		pop	{r3, pc}
 1708              	.L184:
 1709              		.align	2
 1710              	.L183:
 1711 000c 00000000 		.word	pMPM
 1712              		.cfi_endproc
ARM GAS  /tmp/ccrWx2YC.s 			page 42


 1713              	.LFE1758:
 1715              		.section	.text.MC_ProfilerCommand,"ax",%progbits
 1716              		.align	1
 1717              		.weak	MC_ProfilerCommand
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1721              		.fpu fpv4-sp-d16
 1723              	MC_ProfilerCommand:
 1724              	.LVL60:
 1725              	.LFB1759:
 717:Src/mc_api.c  **** 
 718:Src/mc_api.c  **** /**
 719:Src/mc_api.c  ****  * @brief call the correct profiler command.
 720:Src/mc_api.c  ****  * Interface is generic MCPV2 interface :
 721:Src/mc_api.c  ****  * - rxLength : length of data send in the payload command
 722:Src/mc_api.c  ****  * - rxBuffer : pointer to the actual payload command
 723:Src/mc_api.c  ****  * - txSyncFreeSpace : Total amount of space available for the answer
 724:Src/mc_api.c  ****  * - txLength : Amount of space actually used for the answer - Set in the command itself
 725:Src/mc_api.c  ****  * - txBuffer : Pointer to the buffer containing the answer
 726:Src/mc_api.c  ****  * @retval returns MCP_CMD_OK or MCP_CMD_NOK if profiler is started correctly or not.
 727:Src/mc_api.c  ****  *  */
 728:Src/mc_api.c  **** __weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, ui
 729:Src/mc_api.c  **** {
 1726              		.loc 1 729 1 is_stmt 1 view -0
 1727              		.cfi_startproc
 1728              		@ args = 4, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 1730              		.loc 1 729 1 is_stmt 0 view .LVU191
 1731 0000 10B5     		push	{r4, lr}
 1732              	.LCFI68:
 1733              		.cfi_def_cfa_offset 8
 1734              		.cfi_offset 4, -8
 1735              		.cfi_offset 14, -4
 1736 0002 82B0     		sub	sp, sp, #8
 1737              	.LCFI69:
 1738              		.cfi_def_cfa_offset 16
 730:Src/mc_api.c  ****   return (SCC_CMD(&SCC, rxLength, rxBuffer, txSyncFreeSpace, txLength, txBuffer));
 1739              		.loc 1 730 3 is_stmt 1 view .LVU192
 1740              		.loc 1 730 11 is_stmt 0 view .LVU193
 1741 0004 049C     		ldr	r4, [sp, #16]
 1742 0006 0194     		str	r4, [sp, #4]
 1743 0008 0093     		str	r3, [sp]
 1744 000a 1346     		mov	r3, r2
 1745              	.LVL61:
 1746              		.loc 1 730 11 view .LVU194
 1747 000c 0A46     		mov	r2, r1
 1748              	.LVL62:
 1749              		.loc 1 730 11 view .LVU195
 1750 000e 0146     		mov	r1, r0
 1751              	.LVL63:
 1752              		.loc 1 730 11 view .LVU196
 1753 0010 0248     		ldr	r0, .L187
 1754              	.LVL64:
 1755              		.loc 1 730 11 view .LVU197
 1756 0012 FFF7FEFF 		bl	SCC_CMD
 1757              	.LVL65:
ARM GAS  /tmp/ccrWx2YC.s 			page 43


 731:Src/mc_api.c  **** }
 1758              		.loc 1 731 1 view .LVU198
 1759 0016 02B0     		add	sp, sp, #8
 1760              	.LCFI70:
 1761              		.cfi_def_cfa_offset 8
 1762              		@ sp needed
 1763 0018 10BD     		pop	{r4, pc}
 1764              	.LVL66:
 1765              	.L188:
 1766              		.loc 1 731 1 view .LVU199
 1767 001a 00BF     		.align	2
 1768              	.L187:
 1769 001c 00000000 		.word	SCC
 1770              		.cfi_endproc
 1771              	.LFE1759:
 1773              		.text
 1774              	.Letext0:
 1775              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1776              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1777              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1778              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1779              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1780              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1781              		.file 8 "Inc/mc_type.h"
 1782              		.file 9 "Inc/pwm_curr_fdbk.h"
 1783              		.file 10 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1784              		.file 11 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1785              		.file 12 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1786              		.file 13 "Inc/mc_perf.h"
 1787              		.file 14 "Inc/mc_interface.h"
 1788              		.file 15 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 1789              		.file 16 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 1790              		.file 17 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 1791              		.file 18 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 1792              		.file 19 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 1793              		.file 20 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 1794              		.file 21 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 1795              		.file 22 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_one_touch_tuning.h"
 1796              		.file 23 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 1797              		.file 24 "Inc/hall_speed_pos_fdbk.h"
 1798              		.file 25 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_hall_tuning.h"
 1799              		.file 26 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_self_com_ctrl.h"
 1800              		.file 27 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 1801              		.file 28 "Inc/mc_config.h"
ARM GAS  /tmp/ccrWx2YC.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_api.c
     /tmp/ccrWx2YC.s:18     .text.MC_StartMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:26     .text.MC_StartMotor1:0000000000000000 MC_StartMotor1
     /tmp/ccrWx2YC.s:49     .text.MC_StartMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:54     .text.MC_StopMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:61     .text.MC_StopMotor1:0000000000000000 MC_StopMotor1
     /tmp/ccrWx2YC.s:83     .text.MC_StopMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:88     .text.MC_ProgramSpeedRampMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:95     .text.MC_ProgramSpeedRampMotor1:0000000000000000 MC_ProgramSpeedRampMotor1
     /tmp/ccrWx2YC.s:124    .text.MC_ProgramSpeedRampMotor1:0000000000000010 $d
     /tmp/ccrWx2YC.s:129    .text.MC_ProgramSpeedRampMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:136    .text.MC_ProgramSpeedRampMotor1_F:0000000000000000 MC_ProgramSpeedRampMotor1_F
     /tmp/ccrWx2YC.s:162    .text.MC_ProgramSpeedRampMotor1_F:0000000000000010 $d
     /tmp/ccrWx2YC.s:167    .text.MC_ProgramTorqueRampMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:174    .text.MC_ProgramTorqueRampMotor1:0000000000000000 MC_ProgramTorqueRampMotor1
     /tmp/ccrWx2YC.s:203    .text.MC_ProgramTorqueRampMotor1:0000000000000010 $d
     /tmp/ccrWx2YC.s:208    .text.MC_ProgramTorqueRampMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:215    .text.MC_ProgramTorqueRampMotor1_F:0000000000000000 MC_ProgramTorqueRampMotor1_F
     /tmp/ccrWx2YC.s:241    .text.MC_ProgramTorqueRampMotor1_F:0000000000000010 $d
     /tmp/ccrWx2YC.s:246    .text.MC_SetCurrentReferenceMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:253    .text.MC_SetCurrentReferenceMotor1:0000000000000000 MC_SetCurrentReferenceMotor1
     /tmp/ccrWx2YC.s:282    .text.MC_SetCurrentReferenceMotor1:0000000000000018 $d
     /tmp/ccrWx2YC.s:287    .text.MC_SetCurrentReferenceMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:294    .text.MC_SetCurrentReferenceMotor1_F:0000000000000000 MC_SetCurrentReferenceMotor1_F
     /tmp/ccrWx2YC.s:321    .text.MC_SetCurrentReferenceMotor1_F:0000000000000014 $d
     /tmp/ccrWx2YC.s:326    .text.MC_GetCommandStateMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:333    .text.MC_GetCommandStateMotor1:0000000000000000 MC_GetCommandStateMotor1
     /tmp/ccrWx2YC.s:355    .text.MC_GetCommandStateMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:360    .text.MC_StopSpeedRampMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:367    .text.MC_StopSpeedRampMotor1:0000000000000000 MC_StopSpeedRampMotor1
     /tmp/ccrWx2YC.s:389    .text.MC_StopSpeedRampMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:394    .text.MC_StopRampMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:401    .text.MC_StopRampMotor1:0000000000000000 MC_StopRampMotor1
     /tmp/ccrWx2YC.s:422    .text.MC_StopRampMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:427    .text.MC_HasRampCompletedMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:434    .text.MC_HasRampCompletedMotor1:0000000000000000 MC_HasRampCompletedMotor1
     /tmp/ccrWx2YC.s:456    .text.MC_HasRampCompletedMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:461    .text.MC_GetMecSpeedReferenceMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:468    .text.MC_GetMecSpeedReferenceMotor1:0000000000000000 MC_GetMecSpeedReferenceMotor1
     /tmp/ccrWx2YC.s:490    .text.MC_GetMecSpeedReferenceMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:495    .text.MC_GetMecSpeedReferenceMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:502    .text.MC_GetMecSpeedReferenceMotor1_F:0000000000000000 MC_GetMecSpeedReferenceMotor1_F
     /tmp/ccrWx2YC.s:524    .text.MC_GetMecSpeedReferenceMotor1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:529    .text.MC_GetMecSpeedAverageMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:536    .text.MC_GetMecSpeedAverageMotor1:0000000000000000 MC_GetMecSpeedAverageMotor1
     /tmp/ccrWx2YC.s:558    .text.MC_GetMecSpeedAverageMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:563    .text.MC_GetAverageMecSpeedMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:570    .text.MC_GetAverageMecSpeedMotor1_F:0000000000000000 MC_GetAverageMecSpeedMotor1_F
     /tmp/ccrWx2YC.s:592    .text.MC_GetAverageMecSpeedMotor1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:597    .text.MC_GetLastRampFinalSpeedMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:604    .text.MC_GetLastRampFinalSpeedMotor1:0000000000000000 MC_GetLastRampFinalSpeedMotor1
     /tmp/ccrWx2YC.s:626    .text.MC_GetLastRampFinalSpeedMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:631    .text.MC_GetLastRampFinalSpeedM1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:638    .text.MC_GetLastRampFinalSpeedM1_F:0000000000000000 MC_GetLastRampFinalSpeedM1_F
     /tmp/ccrWx2YC.s:660    .text.MC_GetLastRampFinalSpeedM1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:665    .text.MC_GetFinalTorqueReferenceMotor1_F:0000000000000000 $t
ARM GAS  /tmp/ccrWx2YC.s 			page 45


     /tmp/ccrWx2YC.s:672    .text.MC_GetFinalTorqueReferenceMotor1_F:0000000000000000 MC_GetFinalTorqueReferenceMotor1_F
     /tmp/ccrWx2YC.s:694    .text.MC_GetFinalTorqueReferenceMotor1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:699    .text.MC_GetFinalTorqueReferenceMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:706    .text.MC_GetFinalTorqueReferenceMotor1:0000000000000000 MC_GetFinalTorqueReferenceMotor1
     /tmp/ccrWx2YC.s:728    .text.MC_GetFinalTorqueReferenceMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:733    .text.MC_GetControlModeMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:740    .text.MC_GetControlModeMotor1:0000000000000000 MC_GetControlModeMotor1
     /tmp/ccrWx2YC.s:762    .text.MC_GetControlModeMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:767    .text.MC_GetImposedDirectionMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:774    .text.MC_GetImposedDirectionMotor1:0000000000000000 MC_GetImposedDirectionMotor1
     /tmp/ccrWx2YC.s:796    .text.MC_GetImposedDirectionMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:801    .text.MC_GetSpeedSensorReliabilityMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:808    .text.MC_GetSpeedSensorReliabilityMotor1:0000000000000000 MC_GetSpeedSensorReliabilityMotor1
     /tmp/ccrWx2YC.s:830    .text.MC_GetSpeedSensorReliabilityMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:835    .text.MC_GetPhaseCurrentAmplitudeMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:842    .text.MC_GetPhaseCurrentAmplitudeMotor1:0000000000000000 MC_GetPhaseCurrentAmplitudeMotor1
     /tmp/ccrWx2YC.s:864    .text.MC_GetPhaseCurrentAmplitudeMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:869    .text.MC_GetPhaseVoltageAmplitudeMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:876    .text.MC_GetPhaseVoltageAmplitudeMotor1:0000000000000000 MC_GetPhaseVoltageAmplitudeMotor1
     /tmp/ccrWx2YC.s:898    .text.MC_GetPhaseVoltageAmplitudeMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:903    .text.MC_GetIabMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:910    .text.MC_GetIabMotor1:0000000000000000 MC_GetIabMotor1
     /tmp/ccrWx2YC.s:944    .text.MC_GetIabMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:949    .text.MC_GetIabMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:956    .text.MC_GetIabMotor1_F:0000000000000000 MC_GetIabMotor1_F
     /tmp/ccrWx2YC.s:984    .text.MC_GetIabMotor1_F:0000000000000014 $d
     /tmp/ccrWx2YC.s:989    .text.MC_GetIalphabetaMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:996    .text.MC_GetIalphabetaMotor1:0000000000000000 MC_GetIalphabetaMotor1
     /tmp/ccrWx2YC.s:1030   .text.MC_GetIalphabetaMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:1035   .text.MC_GetIqdMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1042   .text.MC_GetIqdMotor1:0000000000000000 MC_GetIqdMotor1
     /tmp/ccrWx2YC.s:1076   .text.MC_GetIqdMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:1081   .text.MC_GetIqdMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:1088   .text.MC_GetIqdMotor1_F:0000000000000000 MC_GetIqdMotor1_F
     /tmp/ccrWx2YC.s:1116   .text.MC_GetIqdMotor1_F:0000000000000014 $d
     /tmp/ccrWx2YC.s:1121   .text.MC_GetIqdrefMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1128   .text.MC_GetIqdrefMotor1:0000000000000000 MC_GetIqdrefMotor1
     /tmp/ccrWx2YC.s:1162   .text.MC_GetIqdrefMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:1167   .text.MC_GetIqdrefMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:1174   .text.MC_GetIqdrefMotor1_F:0000000000000000 MC_GetIqdrefMotor1_F
     /tmp/ccrWx2YC.s:1202   .text.MC_GetIqdrefMotor1_F:0000000000000014 $d
     /tmp/ccrWx2YC.s:1207   .text.MC_GetVqdMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1214   .text.MC_GetVqdMotor1:0000000000000000 MC_GetVqdMotor1
     /tmp/ccrWx2YC.s:1248   .text.MC_GetVqdMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:1253   .text.MC_GetValphabetaMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1260   .text.MC_GetValphabetaMotor1:0000000000000000 MC_GetValphabetaMotor1
     /tmp/ccrWx2YC.s:1294   .text.MC_GetValphabetaMotor1:0000000000000024 $d
     /tmp/ccrWx2YC.s:1299   .text.MC_GetElAngledppMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1306   .text.MC_GetElAngledppMotor1:0000000000000000 MC_GetElAngledppMotor1
     /tmp/ccrWx2YC.s:1328   .text.MC_GetElAngledppMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1333   .text.MC_GetTerefMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1340   .text.MC_GetTerefMotor1:0000000000000000 MC_GetTerefMotor1
     /tmp/ccrWx2YC.s:1362   .text.MC_GetTerefMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1367   .text.MC_GetTerefMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:1374   .text.MC_GetTerefMotor1_F:0000000000000000 MC_GetTerefMotor1_F
     /tmp/ccrWx2YC.s:1396   .text.MC_GetTerefMotor1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:1401   .text.MC_Clear_IqdrefMotor1:0000000000000000 $t
ARM GAS  /tmp/ccrWx2YC.s 			page 46


     /tmp/ccrWx2YC.s:1408   .text.MC_Clear_IqdrefMotor1:0000000000000000 MC_Clear_IqdrefMotor1
     /tmp/ccrWx2YC.s:1429   .text.MC_Clear_IqdrefMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1434   .text.MC_AcknowledgeFaultMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1441   .text.MC_AcknowledgeFaultMotor1:0000000000000000 MC_AcknowledgeFaultMotor1
     /tmp/ccrWx2YC.s:1463   .text.MC_AcknowledgeFaultMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1468   .text.MC_GetOccurredFaultsMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1475   .text.MC_GetOccurredFaultsMotor1:0000000000000000 MC_GetOccurredFaultsMotor1
     /tmp/ccrWx2YC.s:1497   .text.MC_GetOccurredFaultsMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1502   .text.MC_GetCurrentFaultsMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1509   .text.MC_GetCurrentFaultsMotor1:0000000000000000 MC_GetCurrentFaultsMotor1
     /tmp/ccrWx2YC.s:1531   .text.MC_GetCurrentFaultsMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1536   .text.MC_GetSTMStateMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1543   .text.MC_GetSTMStateMotor1:0000000000000000 MC_GetSTMStateMotor1
     /tmp/ccrWx2YC.s:1565   .text.MC_GetSTMStateMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1570   .text.MC_SetPolarizationOffsetsMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1577   .text.MC_SetPolarizationOffsetsMotor1:0000000000000000 MC_SetPolarizationOffsetsMotor1
     /tmp/ccrWx2YC.s:1604   .text.MC_SetPolarizationOffsetsMotor1:0000000000000010 $d
     /tmp/ccrWx2YC.s:1609   .text.MC_GetPolarizationOffsetsMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1616   .text.MC_GetPolarizationOffsetsMotor1:0000000000000000 MC_GetPolarizationOffsetsMotor1
     /tmp/ccrWx2YC.s:1643   .text.MC_GetPolarizationOffsetsMotor1:0000000000000010 $d
     /tmp/ccrWx2YC.s:1648   .text.MC_StartPolarizationOffsetsMeasurementMotor1:0000000000000000 $t
     /tmp/ccrWx2YC.s:1655   .text.MC_StartPolarizationOffsetsMeasurementMotor1:0000000000000000 MC_StartPolarizationOffsetsMeasurementMotor1
     /tmp/ccrWx2YC.s:1677   .text.MC_StartPolarizationOffsetsMeasurementMotor1:000000000000000c $d
     /tmp/ccrWx2YC.s:1682   .text.MC_GetAveragePowerMotor1_F:0000000000000000 $t
     /tmp/ccrWx2YC.s:1689   .text.MC_GetAveragePowerMotor1_F:0000000000000000 MC_GetAveragePowerMotor1_F
     /tmp/ccrWx2YC.s:1711   .text.MC_GetAveragePowerMotor1_F:000000000000000c $d
     /tmp/ccrWx2YC.s:1716   .text.MC_ProfilerCommand:0000000000000000 $t
     /tmp/ccrWx2YC.s:1723   .text.MC_ProfilerCommand:0000000000000000 MC_ProfilerCommand
     /tmp/ccrWx2YC.s:1769   .text.MC_ProfilerCommand:000000000000001c $d

UNDEFINED SYMBOLS
MCI_StartMotor
pMCI
MCI_StopMotor
MCI_ExecSpeedRamp
MCI_ExecSpeedRamp_F
MCI_ExecTorqueRamp
MCI_ExecTorqueRamp_F
MCI_SetCurrentReferences
MCI_SetCurrentReferences_F
MCI_IsCommandAcknowledged
MCI_StopSpeedRamp
MCI_StopRamp
MCI_RampCompleted
MCI_GetMecSpeedRefUnit
MCI_GetMecSpeedRef_F
MCI_GetAvrgMecSpeedUnit
MCI_GetAvrgMecSpeed_F
MCI_GetLastRampFinalSpeed
MCI_GetLastRampFinalSpeed_F
MCI_GetLastRampFinalTorque_F
MCI_GetLastRampFinalTorque
MCI_GetControlMode
MCI_GetImposedMotorDirection
MCI_GetSpdSensorReliability
MCI_GetPhaseCurrentAmplitude
MCI_GetPhaseVoltageAmplitude
ARM GAS  /tmp/ccrWx2YC.s 			page 47


MCI_GetIab
MCI_GetIab_F
MCI_GetIalphabeta
MCI_GetIqd
MCI_GetIqd_F
MCI_GetIqdref
MCI_GetIqdref_F
MCI_GetVqd
MCI_GetValphabeta
MCI_GetElAngledpp
MCI_GetTeref
MCI_GetTeref_F
MCI_Clear_Iqdref
MCI_FaultAcknowledged
MCI_GetOccurredFaults
MCI_GetCurrentFaults
MCI_GetSTMState
MCI_SetCalibratedOffsetsMotor
MCI_GetCalibratedOffsetsMotor
MCI_StartOffsetMeasurments
PQD_GetAvrgElMotorPowerW
pMPM
SCC_CMD
SCC
